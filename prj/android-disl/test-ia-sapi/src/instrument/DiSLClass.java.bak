package instrument;

import observe.ImmutabilityAnalysisRE;
import observe.AndroidRE;
import ch.usi.dag.disl.annotation.After;
import ch.usi.dag.disl.annotation.AfterReturning;
import ch.usi.dag.disl.annotation.Before;
import ch.usi.dag.disl.annotation.GuardMethod;
import ch.usi.dag.disl.classcontext.ClassContext;
import ch.usi.dag.disl.dynamiccontext.DynamicContext;
import ch.usi.dag.disl.marker.BodyMarker;
import ch.usi.dag.disl.marker.BytecodeMarker;
import ch.usi.dag.disl.processorcontext.ArgumentProcessorContext;
import ch.usi.dag.disl.processorcontext.ArgumentProcessorMode;
import ch.usi.dag.disl.staticcontext.MethodStaticContext;
import android.os.Process;
import com.android.internal.os.ZygoteConnection;

public class DiSLClass {

    /** CONSTRUCTORS *************************************************************/

    @Before(marker = BodyMarker.class, guard = ConstructorGuard.class, scope="MainActivity.*")
    public static void beforeConstructor(DynamicContext dc) {
        ImmutabilityAnalysisRE.constructorStart(dc.getThis());
    }

    @After(marker = BodyMarker.class, guard = ConstructorGuard.class, scope="MainActivity.*")
    public static void afterConstructor() {
    	ImmutabilityAnalysisRE.constructorEnd();
    }

    public static class ConstructorGuard {

        @GuardMethod
        public static boolean isApplicable(MethodStaticContext sc) {
            return "<init>".equals(sc.thisMethodName());
        }
    }

    /** FIELD ACCESSES ***********************************************************/

    @Before(marker=BytecodeMarker.class, args = "getfield", scope="MainActivity.*")
    public static void beforeFieldRead(FieldAccessStaticContext sc, DynamicContext dc, ClassContext cc) {
        
    	final Object object = dc.getStackValue(0, Object.class);
    	
    	if(object != null) {
    		ImmutabilityAnalysisRE.onFieldRead(object, cc.asClass(sc.getOwner()), sc.getFieldId());
    	}
    }

    @Before(marker = BytecodeMarker.class, args = "putfield", scope="MainActivity.*")
    public static void beforeFieldWrite(FieldAccessStaticContext sc, DynamicContext dc, ClassContext cc) {
        
    	final Object object = dc.getStackValue(1, Object.class);
        
        if(object != null) {
        	ImmutabilityAnalysisRE.onFieldWrite(object, cc.asClass(sc.getOwner()), sc.getFieldId());
        }
    }

    /** SHADOW HEAP **************************************************************/

    /**
     * Instruments the allocation of a single object (<code>new</code>)
     * 
     * Note that this snippet requires that bytecode verification is switched off (<code>-noverify</code>) as the newly
     * created instances are passed to the runtime <em>prior</em> to initialization.
     */
    @AfterReturning(marker = BytecodeMarker.class, args = "new", scope="MainActivity.*")
    public static void objectAllocated(DynamicContext dc, AllocationSiteStaticContext sc, MethodStaticContext msc) {
        ImmutabilityAnalysisRE.onObjectAllocation(dc.getStackValue(0, Object.class), sc.getAllocationSite());
    }

    /**
     * Instruments the reflective allocation of a single object through a call to
     * {@link java.lang.reflect.Constructor#newInstance(Object...) Constructor.newInstance(Object...)}.
     * 
     * Note that this method assumes that {@link Class#newInstance()} internally delegates to
     * {@code Constructor.newInstance(Object...)}; hence, it only instruments the latter. This assumption is true under
     * OpenJDK and possibly other JREs.
     */
    @AfterReturning(marker = BodyMarker.class,
            scope = "java.lang.Object java.lang.reflect.Constructor.newInstance(java.lang.Object[])")
    public static void objectAllocatedThroughReflection(DynamicContext dc, AllocationSiteStaticContext sc) {
        ImmutabilityAnalysisRE.onObjectAllocation(dc.getStackValue(0, Object.class), sc.getReflectiveAllocationSite());
    }

	@Before(marker = BodyMarker.class, scope = "android.app.ActivityThread.main")
		public static void testLoadEarly(MethodStaticContext sc){ 
			AndroidRE.mapPID(sc.thisMethodFullName(), -1);
			System.loadLibrary("shadowvm");
		}

	@Before(marker = BodyMarker.class, scope = "ZygoteConnection.handleChildProc")
		public static void testProcessPID(MethodStaticContext sc, ArgumentProcessorContext pc){
			Object[] args = pc.getArgs(ArgumentProcessorMode.METHOD_ARGS);
			System.out.println("****************************ZygoteConnection.handleChildProc*****************************");
			System.out.printf("disl: args for %s %s\n", sc.thisMethodFullName(), sc.thisMethodDescriptor());
			String pname = ((ZygoteConnection.Arguments)args[0]).niceName;
			System.out.println("disl: \t\tProcess handleChildProc GET\t PNAME:"+pname);
			AndroidRE.mapPID(pname,-1);
		}
	@Before(marker = BodyMarker.class, scope = "Process.start")
		public static void testProcessStart(MethodStaticContext sc, ArgumentProcessorContext pc){
			Object[] args = pc.getArgs(ArgumentProcessorMode.METHOD_ARGS);
			System.out.println("*****************************DISL BEFORE START*****************************");
			System.out.printf("disl: args for %s %s\n", sc.thisMethodFullName(), sc.thisMethodDescriptor());
			String pname="default";
			//Second argument is the pname
			if(args[1].getClass().getCanonicalName().equals("java.lang.String")){
				pname = args[1].toString();
			}
			System.out.println("disl: \t\tProcess before GET\t PNAME:"+pname);
			//send to the server the pid:pname
			AndroidRE.mapPID(pname,-1);
		}

	@AfterReturning(marker = BodyMarker.class, scope = "Process.startViaZygote")
		public static void testprocess(MethodStaticContext sc, ArgumentProcessorContext pc,DynamicContext di)
		{
			//Return value contatins the new pid
			Process.ProcessStartResult ret = di.getStackValue(0, Process.ProcessStartResult.class);
			Object[] args = pc.getArgs(ArgumentProcessorMode.METHOD_ARGS);
			System.out.println("*****************************DISL START NEW PROCESS*****************************");
			System.out.printf("disl: args for %s %s\n", sc.thisMethodFullName(), sc.thisMethodDescriptor());
			String pname="default";
			//Second argument is the pname
			if(args[1].getClass().getCanonicalName().equals("java.lang.String")){
				pname = args[1].toString();
			}
			System.out.println("disl: \t\tProcess GET PID:\t" + ret.pid+"\t PNAME:"+pname);
			//send to the server the pid:pname
			AndroidRE.mapPID(pname,ret.pid);
		}
}
