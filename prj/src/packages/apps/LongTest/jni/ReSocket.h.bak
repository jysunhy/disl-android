#ifndef _RESOCKET_H_
#define _RESOCKET_H_

#include "Common.h"

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

void send_data(int sockfd, const void * data, int data_len);
void rcv_data(int sockfd, void * data, int data_len);

int new_connection(const char* host, int port);

void send_data(int sockfd, const void * data, int data_len) {

	int sent = 0;

	while (sent != data_len) {

		int res = send(sockfd, ((unsigned char *)data) + sent,
				(data_len - sent), 0);
		ASSERT(res>0, "Error while sending data to server");
		sent += res;
	}
}

void rcv_data(int sockfd, void * data, int data_len) {

	int received = 0;

	while (received != data_len) {

		int res = recv(sockfd, ((unsigned char *)data) + received,
				(data_len - received), 0);
		ASSERT(res>0, "Error while receiving data from server");

		received += res;
	}
}

int new_connection(const char* host, const char* port){

	struct addrinfo * addr;
	int gai_res = getaddrinfo(host, port, NULL, &addr);
	//ASSERT(gai_res != 0, gai_strerror(gai_res));

	// create stream socket
	int sockfd = socket(addr->ai_family, SOCK_STREAM, 0);
	//ASSERT(sockfd>0, "Cannot create socket");

	// connect to server
	int conn_res = connect(sockfd, addr->ai_addr, addr->ai_addrlen);
	//ASSERT(!conn_res,"Cannot connect to server");

	// free host address info
	freeaddrinfo(addr);

	return sockfd;
}

#endif
