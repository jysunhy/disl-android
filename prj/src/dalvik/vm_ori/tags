!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$chaintgt	compiler/template/armv5te/TEMPLATE_INVOKE_METHOD_CHAIN.S	/^$chaintgt:$/;"	l
ACC_MIRANDA	oo/Object.h	/^    ACC_MIRANDA         = 0x8000,       \/\/ method (internal to VM)$/;"	e	enum:AccessFlags
ADJUST_PC	mterp/c/header.cpp	108;"	d	file:
ADJUST_PC	mterp/c/header.cpp	91;"	d	file:
ADJUST_PC	mterp/out/InterpC-allstubs.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-allstubs.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv5te-vfp.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv5te-vfp.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv5te.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv5te.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv7-a-neon.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv7-a-neon.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv7-a.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-armv7-a.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-portable.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-portable.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-x86-atom.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-x86-atom.cpp	98;"	d	file:
ADJUST_PC	mterp/out/InterpC-x86.cpp	115;"	d	file:
ADJUST_PC	mterp/out/InterpC-x86.cpp	98;"	d	file:
ALIGN_DOWN	Common.h	59;"	d
ALIGN_DOWN_TO_PAGE_SIZE	Common.h	61;"	d
ALIGN_UP	Common.h	58;"	d
ALIGN_UP_TO_PAGE_SIZE	Common.h	60;"	d
ALLOCATION_UNIT_SIZE	alloc/DdmHeap.cpp	186;"	d	file:
ALLOC_ALIGNMENT	alloc/Copying.cpp	/^enum { ALLOC_ALIGNMENT = 8 };$/;"	e	enum:__anon8	file:
ALLOC_DEFAULT	alloc/Alloc.h	/^    ALLOC_DEFAULT = 0x00,$/;"	e	enum:__anon4
ALLOC_DONT_TRACK	alloc/Alloc.h	/^    ALLOC_DONT_TRACK = 0x01,  \/* don't add to internal tracking list *\/$/;"	e	enum:__anon4
ALLOC_NON_MOVING	alloc/Alloc.h	/^    ALLOC_NON_MOVING = 0x02,$/;"	e	enum:__anon4
ALOGE	alloc/TEST/HeapBitmapTest/include/Dalvik.h	12;"	d
ALOGW	alloc/TEST/HeapBitmapTest/include/Dalvik.h	11;"	d
ANALYSIS_QUEUE_SIZE	shadowlib/ReProtocol.h	13;"	d
APP_STL	shadowlib/Application.mk	/^APP_STL := stlport_static # system|stlport_static|stlport_shared|gnustl_static$/;"	m
ARENA_DEFAULT_SIZE	compiler/CompilerUtility.h	23;"	d
ARRAYSIZE	alloc/Copying.cpp	123;"	d	file:
ASHMEM_H_	alloc/TEST/HeapBitmapTest/include/cutils/ashmem.h	2;"	d
ASHMEM_NAME_LEN	alloc/TEST/HeapBitmapTest/include/cutils/ashmem.h	6;"	d
ASM_DEF_VERIFY	mterp/Mterp.cpp	40;"	d	file:
ASSIST_DEBUGGER	mterp/armv5te/entry.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ASSIST_DEBUGGER	mterp/out/InterpAsm-armv5te-vfp.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ASSIST_DEBUGGER	mterp/out/InterpAsm-armv5te.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ASSIST_DEBUGGER	mterp/out/InterpAsm-armv7-a-neon.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ASSIST_DEBUGGER	mterp/out/InterpAsm-armv7-a.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ASSIST_DEBUGGER	mterp/out/InterpAsm-x86-atom.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ASSIST_DEBUGGER	mterp/x86-atom/entry.S	/^#define ASSIST_DEBUGGER 1$/;"	d
ATOMIC_CACHE_CALC	mterp/common/FindInterface.h	32;"	d
ATOMIC_CACHE_CALC	mterp/common/FindInterface.h	38;"	d
ATOMIC_CACHE_CALC	oo/TypeCheck.cpp	244;"	d	file:
ATOMIC_CACHE_CALC	oo/TypeCheck.cpp	247;"	d	file:
ATOMIC_CACHE_LOOKUP	AtomicCache.h	95;"	d
ATOMIC_LOCK_FLAG	AtomicCache.cpp	35;"	d	file:
AccessFlags	oo/Object.h	/^enum AccessFlags {$/;"	g
AddLocalReferenceFailure	Jni.cpp	/^static void AddLocalReferenceFailure(IndirectRefTable* pRefTable) {$/;"	f	file:
AddressSet	Debugger.h	/^struct AddressSet {$/;"	s
AddressSetContext	Debugger.cpp	/^struct AddressSetContext {$/;"	s	file:
AllocObject	Jni.cpp	/^static jobject AllocObject(JNIEnv* env, jclass jclazz) {$/;"	f	file:
AllocProfState	Profile.h	/^struct AllocProfState {$/;"	s
AllocRecord	AllocTracker.cpp	/^struct AllocRecord {$/;"	s	file:
AnalysisEndEvent	shadowlib/ReProtocol.h	/^		bool AnalysisEndEvent(thread_id_type tid){$/;"	f	class:ReProtocol
AnalysisStartEvent	shadowlib/ReProtocol.h	/^		bool AnalysisStartEvent(thread_id_type tid, ordering_id_type oid, short methodId){$/;"	f	class:ReProtocol
AnnotationResultStyle	reflect/Annotation.cpp	/^enum AnnotationResultStyle {$/;"	g	file:
AnnotationValue	reflect/Reflect.h	/^struct AnnotationValue {$/;"	s
ArenaMemBlock	compiler/CompilerUtility.h	/^typedef struct ArenaMemBlock {$/;"	s
ArenaMemBlock	compiler/CompilerUtility.h	/^} ArenaMemBlock;$/;"	t	typeref:struct:ArenaMemBlock
ArmConditionCode	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmConditionCode {$/;"	g
ArmConditionCode	compiler/codegen/arm/ArmLIR.h	/^} ArmConditionCode;$/;"	t	typeref:enum:ArmConditionCode
ArmEncodingKind	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmEncodingKind {$/;"	g
ArmEncodingKind	compiler/codegen/arm/ArmLIR.h	/^} ArmEncodingKind;$/;"	t	typeref:enum:ArmEncodingKind
ArmEncodingMap	compiler/codegen/arm/ArmLIR.h	/^typedef struct ArmEncodingMap {$/;"	s
ArmEncodingMap	compiler/codegen/arm/ArmLIR.h	/^} ArmEncodingMap;$/;"	t	typeref:struct:ArmEncodingMap
ArmLIR	compiler/codegen/arm/ArmLIR.h	/^typedef struct ArmLIR {$/;"	s
ArmLIR	compiler/codegen/arm/ArmLIR.h	/^} ArmLIR;$/;"	t	typeref:struct:ArmLIR
ArmOpDmbOptions	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmOpDmbOptions {$/;"	g
ArmOpDmbOptions	compiler/codegen/arm/ArmLIR.h	/^} ArmOpDmbOptions;$/;"	t	typeref:enum:ArmOpDmbOptions
ArmOpFeatureFlags	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmOpFeatureFlags {$/;"	g
ArmOpFeatureFlags	compiler/codegen/arm/ArmLIR.h	/^} ArmOpFeatureFlags;$/;"	t	typeref:enum:ArmOpFeatureFlags
ArmOpcode	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmOpcode {$/;"	g
ArmOpcode	compiler/codegen/arm/ArmLIR.h	/^} ArmOpcode;$/;"	t	typeref:enum:ArmOpcode
ArmShiftEncodings	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmShiftEncodings {$/;"	g
ArmShiftEncodings	compiler/codegen/arm/ArmLIR.h	/^} ArmShiftEncodings;$/;"	t	typeref:enum:ArmShiftEncodings
ArmTargetOptHints	compiler/codegen/arm/ArmLIR.h	/^typedef enum ArmTargetOptHints {$/;"	g
ArmTargetOptHints	compiler/codegen/arm/ArmLIR.h	/^} ArmTargetOptHints;$/;"	t	typeref:enum:ArmTargetOptHints
ArrayAccessInfo	compiler/Dataflow.h	/^typedef struct ArrayAccessInfo {$/;"	s
ArrayAccessInfo	compiler/Dataflow.h	/^} ArrayAccessInfo;$/;"	t	typeref:struct:ArrayAccessInfo
ArrayObject	oo/Object.h	/^struct ArrayObject : Object {$/;"	s
AssemblerStatus	compiler/CompilerIR.h	/^typedef enum AssemblerStatus {$/;"	g
AssemblerStatus	compiler/CompilerIR.h	/^} AssemblerStatus;$/;"	t	typeref:enum:AssemblerStatus
AssertionControl	Globals.h	/^struct AssertionControl {$/;"	s
AtomicCache	AtomicCache.h	/^struct AtomicCache {$/;"	s
AtomicCacheEntry	AtomicCache.h	/^struct AtomicCacheEntry {$/;"	s
AttachCurrentThread	Jni.cpp	/^static jint AttachCurrentThread(JavaVM* vm, JNIEnv** p_env, void* thr_args) {$/;"	f	file:
AttachCurrentThreadAsDaemon	Jni.cpp	/^static jint AttachCurrentThreadAsDaemon(JavaVM* vm, JNIEnv** p_env, void* thr_args)$/;"	f	file:
BAIL_LOOP_COMPILATION	compiler/Loop.h	43;"	d
BBType	compiler/CompilerIR.h	/^typedef enum BBType {$/;"	g
BBType	compiler/CompilerIR.h	/^} BBType;$/;"	t	typeref:enum:BBType
BLOCK_ALIGN	LinearAlloc.cpp	69;"	d	file:
BLOCK_CONTINUED	alloc/Copying.cpp	/^    BLOCK_CONTINUED = 7$/;"	e	enum:__anon7	file:
BLOCK_FREE	alloc/Copying.cpp	/^    BLOCK_FREE = 0,$/;"	e	enum:__anon7	file:
BLOCK_FROM_SPACE	alloc/Copying.cpp	/^    BLOCK_FROM_SPACE = 1,$/;"	e	enum:__anon7	file:
BLOCK_NAME_LEN	compiler/CompilerUtility.h	53;"	d
BLOCK_SHIFT	alloc/Copying.cpp	/^enum { BLOCK_SHIFT = 9 };$/;"	e	enum:__anon5	file:
BLOCK_SIZE	alloc/Copying.cpp	/^enum { BLOCK_SIZE = 1 << BLOCK_SHIFT };$/;"	e	enum:__anon6	file:
BLOCK_TO_SPACE	alloc/Copying.cpp	/^    BLOCK_TO_SPACE = 2,$/;"	e	enum:__anon7	file:
BOOL_TO_INT	AtomicCache.cpp	29;"	d	file:
BOOL_TO_INT	oo/TypeCheck.cpp	27;"	d	file:
BUFFER_INIT_SIZE	shadowlib/ReProtocol.h	16;"	d
BUF_SIZE	shadowlib/Buffer.h	4;"	d
BYTES_PER_SEGMENT	hprof/HprofHeap.cpp	28;"	d	file:
BYTE_OFFSET	oo/ObjectInlines.h	48;"	d
BaseQueue	shadowlib/ReQueue.h	/^		BaseQueue(){$/;"	f	class:BaseQueue
BaseQueue	shadowlib/ReQueue.h	/^		BaseQueue(int capacity):q_capacity(capacity),q_occupied(0){$/;"	f	class:BaseQueue
BaseQueue	shadowlib/ReQueue.h	/^class BaseQueue{$/;"	c
BasicBlock	compiler/CompilerIR.h	/^typedef struct BasicBlock {$/;"	s
BasicBlock	compiler/CompilerIR.h	/^} BasicBlock;$/;"	t	typeref:struct:BasicBlock
BasicBlockDataFlow	compiler/Dataflow.h	/^typedef struct BasicBlockDataFlow {$/;"	s
BasicBlockDataFlow	compiler/Dataflow.h	/^} BasicBlockDataFlow;$/;"	t	typeref:struct:BasicBlockDataFlow
BitVector	BitVector.h	/^struct BitVector {$/;"	s
BitVectorIterator	BitVector.h	/^struct BitVectorIterator {$/;"	s
BitmapCallback	alloc/HeapBitmap.h	/^typedef void BitmapCallback(Object *obj, void *arg);$/;"	t
BitmapScanCallback	alloc/HeapBitmap.h	/^typedef void BitmapScanCallback(Object *obj, void *finger, void *arg);$/;"	t
BitmapSweepCallback	alloc/HeapBitmap.h	/^typedef void BitmapSweepCallback(size_t numPtrs, void **ptrs, void *arg);$/;"	t
BlockListType	compiler/CompilerIR.h	/^typedef enum BlockListType {$/;"	g
BlockListType	compiler/CompilerIR.h	/^} BlockListType;$/;"	t	typeref:enum:BlockListType
Breakpoint	interp/Interp.cpp	/^struct Breakpoint {$/;"	s	file:
BreakpointSet	interp/Interp.cpp	/^struct BreakpointSet {$/;"	s	file:
Buffer	shadowlib/Buffer.h	/^		Buffer(int capacity=BUF_SIZE):buf_capacity(capacity),buf_occupied(0){$/;"	f	class:Buffer
Buffer	shadowlib/Buffer.h	/^class Buffer{$/;"	c
Buffer	shadowlib/ReQueue.h	/^		Buffer(int capacity):BaseQueue(capacity){}$/;"	f	class:Buffer
Buffer	shadowlib/ReQueue.h	/^class Buffer: public BaseQueue{$/;"	c
BufferedData	StdioConverter.cpp	/^struct BufferedData {$/;"	s	file:
CACHE_XARG	AtomicCache.h	91;"	d
CACHE_XARG	AtomicCache.h	93;"	d
CALC_CACHE_STATS	AtomicCache.h	25;"	d
CALL	CheckJni.cpp	1563;"	d	file:
CALLER_RP	mterp/out/InterpAsm-x86.S	/^#define CALLER_RP      (  4)$/;"	d
CALLER_RP	mterp/x86/header.S	/^#define CALLER_RP      (  4)$/;"	d
CALL_NONVIRTUAL	Jni.cpp	1976;"	d	file:
CALL_STATIC	Jni.cpp	2046;"	d	file:
CALL_VIRTUAL	Jni.cpp	1906;"	d	file:
CC	alloc/TEST/HeapBitmapTest/Makefile	/^CC := gcc$/;"	m
CFLAGS	alloc/TEST/HeapBitmapTest/Makefile	/^CFLAGS := -g -Wall -Werror$/;"	m
CHAIN_CELL_NORMAL_SIZE	compiler/codegen/arm/ArmLIR.h	792;"	d
CHAIN_CELL_NORMAL_SIZE	compiler/codegen/x86/X86LIR.h	179;"	d
CHAIN_CELL_OFFSET_SIZE	compiler/codegen/arm/Assemble.cpp	1236;"	d	file:
CHAIN_CELL_OFFSET_TAG	compiler/codegen/arm/ArmLIR.h	790;"	d
CHAIN_CELL_OFFSET_TAG	compiler/codegen/x86/X86LIR.h	177;"	d
CHAIN_CELL_PREDICTED_SIZE	compiler/codegen/arm/ArmLIR.h	793;"	d
CHAIN_CELL_PREDICTED_SIZE	compiler/codegen/x86/X86LIR.h	180;"	d
CHECK_BRANCH_OFFSETS	mterp/c/header.cpp	36;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-allstubs.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-armv5te-vfp.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-armv5te.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-armv7-a-neon.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-armv7-a.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-portable.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-x86-atom.cpp	43;"	d	file:
CHECK_BRANCH_OFFSETS	mterp/out/InterpC-x86.cpp	43;"	d	file:
CHECK_JNI_ENTRY	CheckJni.cpp	1311;"	d	file:
CHECK_JNI_EXIT	CheckJni.cpp	1315;"	d	file:
CHECK_JNI_EXIT_VOID	CheckJni.cpp	1319;"	d	file:
CHECK_REGISTER_INDICES	mterp/c/header.cpp	37;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-allstubs.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-armv5te-vfp.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-armv5te.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-armv7-a-neon.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-armv7-a.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-portable.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-x86-atom.cpp	44;"	d	file:
CHECK_REGISTER_INDICES	mterp/out/InterpC-x86.cpp	44;"	d	file:
CHECK_REG_DEP	compiler/codegen/arm/LocalOptimizations.cpp	25;"	d	file:
CHECK_STACK_SUM	Jni.cpp	139;"	d	file:
CHECK_STACK_SUM	Jni.cpp	188;"	d	file:
CHUNK_TYPE	Debugger.h	306;"	d
CLASS_BITS_PER_WORD	oo/Object.h	152;"	d
CLASS_BIT_FROM_OFFSET	oo/Object.h	171;"	d
CLASS_CAN_ENCODE_OFFSET	oo/Object.h	165;"	d
CLASS_ERROR	oo/Object.h	/^    CLASS_ERROR         = -1,$/;"	e	enum:ClassStatus
CLASS_FIELD_SLOTS	oo/Object.h	334;"	d
CLASS_HIGH_BIT	oo/Object.h	154;"	d
CLASS_IDX	oo/Object.h	/^    CLASS_IDX           = 1,    \/* loaded, DEX idx in super or ifaces *\/$/;"	e	enum:ClassStatus
CLASS_ID_MASK	shadowlib/Netref.h	/^static const uint64_t CLASS_ID_MASK = 0x3FFFFF;$/;"	v
CLASS_ID_POS	shadowlib/Netref.h	/^static const uint8_t CLASS_ID_POS = 40;$/;"	v
CLASS_INITIALIZED	oo/Object.h	/^    CLASS_INITIALIZED   = 7,    \/* ready to go *\/$/;"	e	enum:ClassStatus
CLASS_INITIALIZING	oo/Object.h	/^    CLASS_INITIALIZING  = 6,    \/* class init in progress *\/$/;"	e	enum:ClassStatus
CLASS_INSTANCE_MASK	shadowlib/Netref.h	/^static const uint64_t CLASS_INSTANCE_MASK = 0x1;$/;"	v
CLASS_INSTANCE_POS	shadowlib/Netref.h	/^static const uint8_t CLASS_INSTANCE_POS = 62;$/;"	v
CLASS_ISARRAY	oo/Object.h	/^    CLASS_ISARRAY              = (1<<30), \/\/ class is a "[*"$/;"	e	enum:ClassFlags
CLASS_ISCLASS	oo/Object.h	/^    CLASS_ISCLASS              = (1<<28), \/\/ class is *the* class Class$/;"	e	enum:ClassFlags
CLASS_ISFINALIZABLE	oo/Object.h	/^    CLASS_ISFINALIZABLE        = (1<<31), \/\/ class\/ancestor overrides finalize()$/;"	e	enum:ClassFlags
CLASS_ISFINALIZERREFERENCE	oo/Object.h	/^    CLASS_ISFINALIZERREFERENCE = (1<<25), \/\/ class is a finalizer reference$/;"	e	enum:ClassFlags
CLASS_ISOBJECTARRAY	oo/Object.h	/^    CLASS_ISOBJECTARRAY        = (1<<29), \/\/ class is a "[L*" or "[[*"$/;"	e	enum:ClassFlags
CLASS_ISOPTIMIZED	oo/Object.h	/^    CLASS_ISOPTIMIZED          = (1<<17), \/\/ class may contain opt instrs$/;"	e	enum:ClassFlags
CLASS_ISPHANTOMREFERENCE	oo/Object.h	/^    CLASS_ISPHANTOMREFERENCE   = (1<<24), \/\/ class is a phantom reference$/;"	e	enum:ClassFlags
CLASS_ISPREVERIFIED	oo/Object.h	/^    CLASS_ISPREVERIFIED        = (1<<16), \/\/ class has been pre-verified$/;"	e	enum:ClassFlags
CLASS_ISREFERENCE	oo/Object.h	/^    CLASS_ISREFERENCE          = (1<<27), \/\/ class is a soft\/weak\/phantom ref$/;"	e	enum:ClassFlags
CLASS_ISWEAKREFERENCE	oo/Object.h	/^    CLASS_ISWEAKREFERENCE      = (1<<26), \/\/ class is a weak reference$/;"	e	enum:ClassFlags
CLASS_LOADED	oo/Object.h	/^    CLASS_LOADED        = 2,    \/* DEX idx values resolved *\/$/;"	e	enum:ClassStatus
CLASS_MULTIPLE_DEFS	oo/Object.h	/^    CLASS_MULTIPLE_DEFS        = (1<<23), \/\/ DEX verifier: defs in multiple DEXs$/;"	e	enum:ClassFlags
CLASS_NOTREADY	oo/Object.h	/^    CLASS_NOTREADY      = 0,$/;"	e	enum:ClassStatus
CLASS_OFFSET_ALIGNMENT	oo/Object.h	153;"	d
CLASS_OFFSET_FROM_CLZ	oo/Object.h	176;"	d
CLASS_RESOLVED	oo/Object.h	/^    CLASS_RESOLVED      = 3,    \/* part of linking *\/$/;"	e	enum:ClassStatus
CLASS_SFIELD_SLOTS	oo/Class.cpp	168;"	d	file:
CLASS_SMALLEST_OFFSET	oo/Object.h	151;"	d
CLASS_STATICS_ID	hprof/HprofHeap.cpp	37;"	d	file:
CLASS_VERIFIED	oo/Object.h	/^    CLASS_VERIFIED      = 5,    \/* logically part of linking; done pre-init *\/$/;"	e	enum:ClassStatus
CLASS_VERIFYING	oo/Object.h	/^    CLASS_VERIFYING     = 4,    \/* in the process of being verified *\/$/;"	e	enum:ClassStatus
CLASS_WALK_SUPER	oo/Object.h	150;"	d
CLEAR_CLASS_FLAG	oo/Object.h	95;"	d
CLEAR_METHOD_FLAG	oo/Object.h	118;"	d
CLZ	Common.h	63;"	d
COMPILER_IC_PATCH_QUEUE_SIZE	compiler/Compiler.h	29;"	d
COMPILER_TRACED	compiler/Compiler.h	42;"	d
COMPILER_TRACEE	compiler/Compiler.h	43;"	d
COMPILER_TRACE_CHAINING	compiler/Compiler.h	44;"	d
COMPILER_WORK_QUEUE_SIZE	compiler/Compiler.h	28;"	d
COMPUTE_STACK_SUM	Jni.cpp	138;"	d	file:
COMPUTE_STACK_SUM	Jni.cpp	187;"	d	file:
CONCURRENT_MIN_FREE	alloc/HeapSource.cpp	58;"	d	file:
CONCURRENT_START	alloc/HeapSource.cpp	53;"	d	file:
CONNECTED	Ddm.cpp	156;"	d	file:
CPU_CACHE_WIDTH	AtomicCache.cpp	32;"	d	file:
CPU_CACHE_WIDTH_1	AtomicCache.cpp	33;"	d	file:
CS_ERROR	jdwp/JdwpConstants.h	/^    CS_ERROR                = 0x08,$/;"	e	enum:JdwpClassStatus
CS_INITIALIZED	jdwp/JdwpConstants.h	/^    CS_INITIALIZED          = 0x04,$/;"	e	enum:JdwpClassStatus
CS_PREPARED	jdwp/JdwpConstants.h	/^    CS_PREPARED             = 0x02,$/;"	e	enum:JdwpClassStatus
CS_VERIFIED	jdwp/JdwpConstants.h	/^    CS_VERIFIED             = 0x01,$/;"	e	enum:JdwpClassStatus
CallABI_ENTER	arch/x86-atom/Call386ABI.S	/^CallABI_ENTER:$/;"	l
CallABI_EXIT	arch/x86-atom/Call386ABI.S	/^CallABI_EXIT:$/;"	l
CallAPI	shadowlib/ReAgent.cpp	/^void CallAPI(JNIEnv * jni_env, jclass this_class, jint api){$/;"	f
CallsiteInfo	compiler/CompilerIR.h	/^typedef struct CallsiteInfo {$/;"	s
CallsiteInfo	compiler/CompilerIR.h	/^} CallsiteInfo;$/;"	t	typeref:struct:CallsiteInfo
ChainCellCounts	compiler/CompilerIR.h	/^typedef struct ChainCellCounts {$/;"	s
ChainCellCounts	compiler/CompilerIR.h	/^} ChainCellCounts;$/;"	t	typeref:struct:ChainCellCounts
Check_AllocObject	CheckJni.cpp	/^static jobject Check_AllocObject(JNIEnv* env, jclass clazz) {$/;"	f	file:
Check_AttachCurrentThread	CheckJni.cpp	/^static jint Check_AttachCurrentThread(JavaVM* vm, JNIEnv** p_env, void* thr_args) {$/;"	f	file:
Check_AttachCurrentThreadAsDaemon	CheckJni.cpp	/^static jint Check_AttachCurrentThreadAsDaemon(JavaVM* vm, JNIEnv** p_env, void* thr_args) {$/;"	f	file:
Check_DefineClass	CheckJni.cpp	/^static jclass Check_DefineClass(JNIEnv* env, const char* name, jobject loader,$/;"	f	file:
Check_DeleteGlobalRef	CheckJni.cpp	/^static void Check_DeleteGlobalRef(JNIEnv* env, jobject globalRef) {$/;"	f	file:
Check_DeleteLocalRef	CheckJni.cpp	/^static void Check_DeleteLocalRef(JNIEnv* env, jobject localRef) {$/;"	f	file:
Check_DeleteWeakGlobalRef	CheckJni.cpp	/^static void Check_DeleteWeakGlobalRef(JNIEnv* env, jweak obj) {$/;"	f	file:
Check_DestroyJavaVM	CheckJni.cpp	/^static jint Check_DestroyJavaVM(JavaVM* vm) {$/;"	f	file:
Check_DetachCurrentThread	CheckJni.cpp	/^static jint Check_DetachCurrentThread(JavaVM* vm) {$/;"	f	file:
Check_EnsureLocalCapacity	CheckJni.cpp	/^static jint Check_EnsureLocalCapacity(JNIEnv *env, jint capacity) {$/;"	f	file:
Check_ExceptionCheck	CheckJni.cpp	/^static jboolean Check_ExceptionCheck(JNIEnv* env) {$/;"	f	file:
Check_ExceptionClear	CheckJni.cpp	/^static void Check_ExceptionClear(JNIEnv* env) {$/;"	f	file:
Check_ExceptionDescribe	CheckJni.cpp	/^static void Check_ExceptionDescribe(JNIEnv* env) {$/;"	f	file:
Check_ExceptionOccurred	CheckJni.cpp	/^static jthrowable Check_ExceptionOccurred(JNIEnv* env) {$/;"	f	file:
Check_FatalError	CheckJni.cpp	/^static void Check_FatalError(JNIEnv* env, const char* msg) {$/;"	f	file:
Check_FindClass	CheckJni.cpp	/^static jclass Check_FindClass(JNIEnv* env, const char* name) {$/;"	f	file:
Check_FromReflectedField	CheckJni.cpp	/^static jfieldID Check_FromReflectedField(JNIEnv* env, jobject field) {$/;"	f	file:
Check_FromReflectedMethod	CheckJni.cpp	/^static jmethodID Check_FromReflectedMethod(JNIEnv* env, jobject method) {$/;"	f	file:
Check_GetArrayLength	CheckJni.cpp	/^static jsize Check_GetArrayLength(JNIEnv* env, jarray array) {$/;"	f	file:
Check_GetDirectBufferAddress	CheckJni.cpp	/^static void* Check_GetDirectBufferAddress(JNIEnv* env, jobject buf) {$/;"	f	file:
Check_GetDirectBufferCapacity	CheckJni.cpp	/^static jlong Check_GetDirectBufferCapacity(JNIEnv* env, jobject buf) {$/;"	f	file:
Check_GetEnv	CheckJni.cpp	/^static jint Check_GetEnv(JavaVM* vm, void** env, jint version) {$/;"	f	file:
Check_GetFieldID	CheckJni.cpp	/^static jfieldID Check_GetFieldID(JNIEnv* env, jclass clazz, const char* name, const char* sig) {$/;"	f	file:
Check_GetJavaVM	CheckJni.cpp	/^static jint Check_GetJavaVM(JNIEnv *env, JavaVM **vm) {$/;"	f	file:
Check_GetMethodID	CheckJni.cpp	/^static jmethodID Check_GetMethodID(JNIEnv* env, jclass clazz, const char* name, const char* sig) {$/;"	f	file:
Check_GetObjectArrayElement	CheckJni.cpp	/^static jobject Check_GetObjectArrayElement(JNIEnv* env, jobjectArray array, jsize index) {$/;"	f	file:
Check_GetObjectClass	CheckJni.cpp	/^static jclass Check_GetObjectClass(JNIEnv* env, jobject obj) {$/;"	f	file:
Check_GetObjectRefType	CheckJni.cpp	/^static jobjectRefType Check_GetObjectRefType(JNIEnv* env, jobject obj) {$/;"	f	file:
Check_GetPrimitiveArrayCritical	CheckJni.cpp	/^static void* Check_GetPrimitiveArrayCritical(JNIEnv* env, jarray array, jboolean* isCopy) {$/;"	f	file:
Check_GetStaticFieldID	CheckJni.cpp	/^static jfieldID Check_GetStaticFieldID(JNIEnv* env, jclass clazz,$/;"	f	file:
Check_GetStaticMethodID	CheckJni.cpp	/^static jmethodID Check_GetStaticMethodID(JNIEnv* env, jclass clazz,$/;"	f	file:
Check_GetStringChars	CheckJni.cpp	/^static const jchar* Check_GetStringChars(JNIEnv* env, jstring string, jboolean* isCopy) {$/;"	f	file:
Check_GetStringCritical	CheckJni.cpp	/^static const jchar* Check_GetStringCritical(JNIEnv* env, jstring string, jboolean* isCopy) {$/;"	f	file:
Check_GetStringLength	CheckJni.cpp	/^static jsize Check_GetStringLength(JNIEnv* env, jstring string) {$/;"	f	file:
Check_GetStringRegion	CheckJni.cpp	/^static void Check_GetStringRegion(JNIEnv* env, jstring str, jsize start, jsize len, jchar* buf) {$/;"	f	file:
Check_GetStringUTFChars	CheckJni.cpp	/^static const char* Check_GetStringUTFChars(JNIEnv* env, jstring string, jboolean* isCopy) {$/;"	f	file:
Check_GetStringUTFLength	CheckJni.cpp	/^static jsize Check_GetStringUTFLength(JNIEnv* env, jstring string) {$/;"	f	file:
Check_GetStringUTFRegion	CheckJni.cpp	/^static void Check_GetStringUTFRegion(JNIEnv* env, jstring str, jsize start, jsize len, char* buf) {$/;"	f	file:
Check_GetSuperclass	CheckJni.cpp	/^static jclass Check_GetSuperclass(JNIEnv* env, jclass clazz) {$/;"	f	file:
Check_GetVersion	CheckJni.cpp	/^static jint Check_GetVersion(JNIEnv* env) {$/;"	f	file:
Check_IsAssignableFrom	CheckJni.cpp	/^static jboolean Check_IsAssignableFrom(JNIEnv* env, jclass clazz1, jclass clazz2) {$/;"	f	file:
Check_IsInstanceOf	CheckJni.cpp	/^static jboolean Check_IsInstanceOf(JNIEnv* env, jobject obj, jclass clazz) {$/;"	f	file:
Check_IsSameObject	CheckJni.cpp	/^static jboolean Check_IsSameObject(JNIEnv* env, jobject ref1, jobject ref2) {$/;"	f	file:
Check_MonitorEnter	CheckJni.cpp	/^static jint Check_MonitorEnter(JNIEnv* env, jobject obj) {$/;"	f	file:
Check_MonitorExit	CheckJni.cpp	/^static jint Check_MonitorExit(JNIEnv* env, jobject obj) {$/;"	f	file:
Check_NewDirectByteBuffer	CheckJni.cpp	/^static jobject Check_NewDirectByteBuffer(JNIEnv* env, void* address, jlong capacity) {$/;"	f	file:
Check_NewGlobalRef	CheckJni.cpp	/^static jobject Check_NewGlobalRef(JNIEnv* env, jobject obj) {$/;"	f	file:
Check_NewLocalRef	CheckJni.cpp	/^static jobject Check_NewLocalRef(JNIEnv* env, jobject ref) {$/;"	f	file:
Check_NewObject	CheckJni.cpp	/^static jobject Check_NewObject(JNIEnv* env, jclass clazz, jmethodID methodID, ...) {$/;"	f	file:
Check_NewObjectA	CheckJni.cpp	/^static jobject Check_NewObjectA(JNIEnv* env, jclass clazz, jmethodID methodID, jvalue* args) {$/;"	f	file:
Check_NewObjectArray	CheckJni.cpp	/^static jobjectArray Check_NewObjectArray(JNIEnv* env, jsize length,$/;"	f	file:
Check_NewObjectV	CheckJni.cpp	/^static jobject Check_NewObjectV(JNIEnv* env, jclass clazz, jmethodID methodID, va_list args) {$/;"	f	file:
Check_NewString	CheckJni.cpp	/^static jstring Check_NewString(JNIEnv* env, const jchar* unicodeChars, jsize len) {$/;"	f	file:
Check_NewStringUTF	CheckJni.cpp	/^static jstring Check_NewStringUTF(JNIEnv* env, const char* bytes) {$/;"	f	file:
Check_NewWeakGlobalRef	CheckJni.cpp	/^static jweak Check_NewWeakGlobalRef(JNIEnv* env, jobject obj) {$/;"	f	file:
Check_PopLocalFrame	CheckJni.cpp	/^static jobject Check_PopLocalFrame(JNIEnv* env, jobject res) {$/;"	f	file:
Check_PushLocalFrame	CheckJni.cpp	/^static jint Check_PushLocalFrame(JNIEnv* env, jint capacity) {$/;"	f	file:
Check_RegisterNatives	CheckJni.cpp	/^static jint Check_RegisterNatives(JNIEnv* env, jclass clazz, const JNINativeMethod* methods,$/;"	f	file:
Check_ReleasePrimitiveArrayCritical	CheckJni.cpp	/^static void Check_ReleasePrimitiveArrayCritical(JNIEnv* env, jarray array, void* carray, jint mode)$/;"	f	file:
Check_ReleaseStringChars	CheckJni.cpp	/^static void Check_ReleaseStringChars(JNIEnv* env, jstring string, const jchar* chars) {$/;"	f	file:
Check_ReleaseStringCritical	CheckJni.cpp	/^static void Check_ReleaseStringCritical(JNIEnv* env, jstring string, const jchar* carray) {$/;"	f	file:
Check_ReleaseStringUTFChars	CheckJni.cpp	/^static void Check_ReleaseStringUTFChars(JNIEnv* env, jstring string, const char* utf) {$/;"	f	file:
Check_SetObjectArrayElement	CheckJni.cpp	/^static void Check_SetObjectArrayElement(JNIEnv* env, jobjectArray array, jsize index, jobject value)$/;"	f	file:
Check_Throw	CheckJni.cpp	/^static jint Check_Throw(JNIEnv* env, jthrowable obj) {$/;"	f	file:
Check_ThrowNew	CheckJni.cpp	/^static jint Check_ThrowNew(JNIEnv* env, jclass clazz, const char* message) {$/;"	f	file:
Check_ToReflectedField	CheckJni.cpp	/^static jobject Check_ToReflectedField(JNIEnv* env, jclass cls,$/;"	f	file:
Check_ToReflectedMethod	CheckJni.cpp	/^static jobject Check_ToReflectedMethod(JNIEnv* env, jclass cls,$/;"	f	file:
Check_UnregisterNatives	CheckJni.cpp	/^static jint Check_UnregisterNatives(JNIEnv* env, jclass clazz) {$/;"	f	file:
ClassFlags	oo/Object.h	/^enum ClassFlags {$/;"	g
ClassMatchCriteria	oo/Class.cpp	/^struct ClassMatchCriteria {$/;"	s	file:
ClassObject	oo/Object.h	/^struct ClassObject : Object {$/;"	s
ClassPathEntry	oo/Class.h	/^struct ClassPathEntry {$/;"	s
ClassPathEntryKind	oo/Class.h	/^enum ClassPathEntryKind {$/;"	g
ClassStatus	oo/Object.h	/^enum ClassStatus {$/;"	g
CompilationUnit	compiler/CompilerIR.h	/^typedef struct CompilationUnit {$/;"	s
CompilationUnit	compiler/CompilerIR.h	/^} CompilationUnit;$/;"	t	typeref:struct:CompilationUnit
CompilerMethodStats	compiler/Compiler.h	/^typedef struct CompilerMethodStats {$/;"	s
CompilerMethodStats	compiler/Compiler.h	/^} CompilerMethodStats;$/;"	t	typeref:struct:CompilerMethodStats
CompilerWorkOrder	compiler/Compiler.h	/^typedef struct CompilerWorkOrder {$/;"	s
CompilerWorkOrder	compiler/Compiler.h	/^} CompilerWorkOrder;$/;"	t	typeref:struct:CompilerWorkOrder
Connect	shadowlib/Socket.cpp	/^bool Socket::Connect ()$/;"	f	class:Socket
ConnectionClose	shadowlib/ReProtocol.h	/^		bool ConnectionClose(){$/;"	f	class:ReProtocol
Convert32	InlineNative.cpp	/^union Convert32 {$/;"	u	file:
Convert64	InlineNative.cpp	/^union Convert64 {$/;"	u	file:
CountContext	alloc/Alloc.cpp	/^struct CountContext {$/;"	s	file:
DALVIK_ALLOCTRACKER_H_	AllocTracker.h	20;"	d
DALVIK_ALLOC_ALLOC_H_	alloc/Alloc.h	20;"	d
DALVIK_ALLOC_CARDTABLE_H_	alloc/CardTable.h	24;"	d
DALVIK_ALLOC_DDMHEAP_H_	alloc/DdmHeap.h	20;"	d
DALVIK_ALLOC_HEAP_H_	alloc/Heap.h	20;"	d
DALVIK_ALLOC_HEAP_INTERNAL_H_	alloc/HeapInternal.h	20;"	d
DALVIK_ALLOC_MARK_SWEEP_H_	alloc/MarkSweep.h	17;"	d
DALVIK_ALLOC_VERIFY_H_	alloc/Verify.h	18;"	d
DALVIK_ALLOC_VISITINLINES_H_	alloc/VisitInlines.h	18;"	d
DALVIK_ALLOC_VISIT_H_	alloc/Visit.h	18;"	d
DALVIK_ALLOC_WRITEBARRIER_H_	alloc/WriteBarrier.h	18;"	d
DALVIK_ATOMICCACHE_H_	AtomicCache.h	20;"	d
DALVIK_ATOMIC_H_	Atomic.h	21;"	d
DALVIK_BITS_H_	Bits.h	22;"	d
DALVIK_BITVECTOR_H_	BitVector.h	21;"	d
DALVIK_BUG_VERSION	DalvikVersion.h	28;"	d
DALVIK_CODEVERIFY_H_	analysis/CodeVerify.h	21;"	d
DALVIK_COMMON_H_	Common.h	21;"	d
DALVIK_DALVIK_H_	Dalvik.h	21;"	d
DALVIK_DDM_H_	Ddm.h	20;"	d
DALVIK_DEBUGGER_H_	Debugger.h	22;"	d
DALVIK_DEXPREPARE_H_	analysis/DexPrepare.h	21;"	d
DALVIK_DEXVERIFY_H_	analysis/DexVerify.h	21;"	d
DALVIK_DVMDEX_H_	DvmDex.h	22;"	d
DALVIK_EXCEPTION_H_	Exception.h	21;"	d
DALVIK_GLOBALS_H_	Globals.h	30;"	d
DALVIK_HASH_H_	Hash.h	23;"	d
DALVIK_HEAPDEBUG_H_	alloc/HeapDebug.h	17;"	d
DALVIK_HEAP_BITMAPINLINES_H_	alloc/HeapBitmapInlines.h	18;"	d
DALVIK_HEAP_BITMAP_H_	alloc/HeapBitmap.h	17;"	d
DALVIK_HEAP_SOURCE_H_	alloc/HeapSource.h	17;"	d
DALVIK_HPROF_HPROF_H_	hprof/Hprof.h	17;"	d
DALVIK_H_	alloc/TEST/HeapBitmapTest/include/Dalvik.h	2;"	d
DALVIK_INDIRECTREFTABLE_H_	IndirectRefTable.h	18;"	d
DALVIK_INIT_H_	Init.h	21;"	d
DALVIK_INLINENATIVE_H_	InlineNative.h	21;"	d
DALVIK_INTERN_H_	Intern.h	20;"	d
DALVIK_INTERP_DEFS_H_	interp/InterpDefs.h	25;"	d
DALVIK_INTERP_INTERP_H_	interp/Interp.h	21;"	d
DALVIK_INTERP_JIT_H_	interp/Jit.h	20;"	d
DALVIK_INTERP_STACK_H_	interp/Stack.h	21;"	d
DALVIK_INTERP_STATE_H_	interp/InterpState.h	25;"	d
DALVIK_JARFILE_H_	JarFile.h	20;"	d
DALVIK_JDWP_EXPANDBUF_H_	jdwp/ExpandBuf.h	20;"	d
DALVIK_JDWP_JDWPCONSTANTS_H_	jdwp/JdwpConstants.h	20;"	d
DALVIK_JDWP_JDWPEVENT_H_	jdwp/JdwpEvent.h	20;"	d
DALVIK_JDWP_JDWPHANDLER_H_	jdwp/JdwpHandler.h	20;"	d
DALVIK_JDWP_JDWPPRIV_H_	jdwp/JdwpPriv.h	20;"	d
DALVIK_JDWP_JDWP_H_	jdwp/Jdwp.h	25;"	d
DALVIK_JIT_ARM	compiler/Compiler.h	/^    DALVIK_JIT_ARM,$/;"	e	enum:JitInstructionSetType
DALVIK_JIT_IA32	compiler/Compiler.h	/^    DALVIK_JIT_IA32$/;"	e	enum:JitInstructionSetType
DALVIK_JIT_NONE	compiler/Compiler.h	/^    DALVIK_JIT_NONE = 0,$/;"	e	enum:JitInstructionSetType
DALVIK_JIT_THUMB	compiler/Compiler.h	/^    DALVIK_JIT_THUMB,$/;"	e	enum:JitInstructionSetType
DALVIK_JIT_THUMB2	compiler/Compiler.h	/^    DALVIK_JIT_THUMB2,$/;"	e	enum:JitInstructionSetType
DALVIK_JNIINTERNAL_H_	JniInternal.h	20;"	d
DALVIK_JNI_COUNT_MASK	JniInternal.h	81;"	d
DALVIK_JNI_COUNT_SHIFT	JniInternal.h	82;"	d
DALVIK_JNI_NO_ARG_INFO	JniInternal.h	78;"	d
DALVIK_JNI_RETURN_DOUBLE	JniInternal.h	/^    DALVIK_JNI_RETURN_DOUBLE = 2,$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_FLOAT	JniInternal.h	/^    DALVIK_JNI_RETURN_FLOAT = 1,$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_MASK	JniInternal.h	79;"	d
DALVIK_JNI_RETURN_S1	JniInternal.h	/^    DALVIK_JNI_RETURN_S1 = 7$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_S2	JniInternal.h	/^    DALVIK_JNI_RETURN_S2 = 5,$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_S4	JniInternal.h	/^    DALVIK_JNI_RETURN_S4 = 4,$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_S8	JniInternal.h	/^    DALVIK_JNI_RETURN_S8 = 3,$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_SHIFT	JniInternal.h	80;"	d
DALVIK_JNI_RETURN_U2	JniInternal.h	/^    DALVIK_JNI_RETURN_U2 = 6,$/;"	e	enum:DalvikJniReturnType
DALVIK_JNI_RETURN_VOID	JniInternal.h	/^    DALVIK_JNI_RETURN_VOID = 0,     \/* must be zero *\/$/;"	e	enum:DalvikJniReturnType
DALVIK_LINEARALLOC_H_	LinearAlloc.h	20;"	d
DALVIK_LIVENESS_H_	analysis/Liveness.h	21;"	d
DALVIK_MAJOR_VERSION	DalvikVersion.h	26;"	d
DALVIK_MINOR_VERSION	DalvikVersion.h	27;"	d
DALVIK_MISC_H_	Misc.h	21;"	d
DALVIK_MTERP_MTERP_H_	mterp/Mterp.h	21;"	d
DALVIK_NATIVE_H_	Native.h	23;"	d
DALVIK_NATIVE_INTERNALNATIVEPRIV_H_	native/InternalNativePriv.h	21;"	d
DALVIK_NATIVE_INTERNALNATIVE_H_	native/InternalNative.h	18;"	d
DALVIK_OO_ACCESSCHECK_H_	oo/AccessCheck.h	20;"	d
DALVIK_OO_ARRAY_H_	oo/Array.h	20;"	d
DALVIK_OO_CLASS_H_	oo/Class.h	20;"	d
DALVIK_OO_OBJECTINLINES_H_	oo/ObjectInlines.h	21;"	d
DALVIK_OO_OBJECT_H_	oo/Object.h	22;"	d
DALVIK_OO_RESOLVE_H_	oo/Resolve.h	20;"	d
DALVIK_OO_TYPECHECK_H_	oo/TypeCheck.h	20;"	d
DALVIK_OPTIMIZE_H_	analysis/Optimize.h	21;"	d
DALVIK_POINTERSET_H_	PointerSet.h	21;"	d
DALVIK_PROFILE_H_	Profile.h	21;"	d
DALVIK_RAWDEXFILE_H_	RawDexFile.h	22;"	d
DALVIK_REFERENCETABLE_H_	ReferenceTable.h	24;"	d
DALVIK_REFLECT_REFLECT_H_	reflect/Reflect.h	20;"	d
DALVIK_REGISTERMAP_H_	analysis/RegisterMap.h	23;"	d
DALVIK_SHADOWAPI_H_	ShadowAPI.h	2;"	d
DALVIK_SIGNALCATCHER_H_	SignalCatcher.h	20;"	d
DALVIK_STDOUTCONVERTER_H_	StdioConverter.h	20;"	d
DALVIK_STRING_H_	UtfString.h	22;"	d
DALVIK_SYNC_H_	Sync.h	20;"	d
DALVIK_TEST_TEST_H_	test/Test.h	21;"	d
DALVIK_THREAD_H_	Thread.h	21;"	d
DALVIK_VERIFYSUBS_H_	analysis/VerifySubs.h	21;"	d
DALVIK_VERSION_H_	DalvikVersion.h	21;"	d
DALVIK_VFYBASICBLOCK_H_	analysis/VfyBasicBlock.h	22;"	d
DALVIK_VM_BUILD	DalvikVersion.h	35;"	d
DALVIK_VM_COMPILERCODEGEN_H_	compiler/codegen/CompilerCodegen.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_ARM_ARMLIR_H_	compiler/codegen/arm/ArmLIR.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_ARM_ARMV5TE_ARCHVARIANT_H_	compiler/codegen/arm/armv5te/ArchVariant.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_ARM_ARMV5TE_VFP_ARCHVARIANT_H_	compiler/codegen/arm/armv5te-vfp/ArchVariant.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_ARM_ARMV5TE_VFP_ARCHVARIANT_H_	compiler/codegen/arm/armv7-a-neon/ArchVariant.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_ARM_ARMV7_A_ARCHVARIANT_H_	compiler/codegen/arm/armv7-a/ArchVariant.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_ARM_CALLOUT_HELPER_H_	compiler/codegen/arm/CalloutHelper.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_X86_CALLOUT_HELPER_H_	compiler/codegen/x86/CalloutHelper.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_X86_IA32_ARCHVARIANT_H_	compiler/codegen/x86/ia32/ArchVariant.h	18;"	d
DALVIK_VM_COMPILER_CODEGEN_X86_X86LIR_H_	compiler/codegen/x86/X86LIR.h	18;"	d
DALVIK_VM_COMPILER_H_	compiler/Compiler.h	18;"	d
DALVIK_VM_COMPILER_INTERNAL_H_	compiler/CompilerInternals.h	18;"	d
DALVIK_VM_COMPILER_IR_H_	compiler/CompilerIR.h	18;"	d
DALVIK_VM_COMPILER_OPTIMIZATION_H_	compiler/codegen/Optimizer.h	18;"	d
DALVIK_VM_COMPILER_UTILITY_H_	compiler/CompilerUtility.h	18;"	d
DALVIK_VM_DATAFLOW_H_	compiler/Dataflow.h	18;"	d
DALVIK_VM_LOOP_H_	compiler/Loop.h	18;"	d
DBG	arch/arm/CallEABI.S	/^DBG bne     dvmAbort                    @ DEBUG$/;"	l
DBG	arch/arm/CallEABI.S	/^DBG bne     dvmAbort                    @ no, fail$/;"	l
DBG	arch/arm/CallEABI.S	/^DBG movcs   ip, #-3                     @ DEBUG DEBUG - make pad word obvious$/;"	l
DBG	arch/arm/CallEABI.S	/^DBG strcs   ip, [r8]                    @ DEBUG DEBUG$/;"	l
DBG	arch/arm/CallEABI.S	/^DBG tst     sp, #4                      @ 64-bit aligned?$/;"	l
DBG	arch/arm/CallEABI.S	/^DBG tst     sp, #7                      @ DEBUG - make sure sp is aligned now$/;"	l
DBG_BREAKPOINT	Debugger.h	/^    DBG_BREAKPOINT      = 0x01,$/;"	e	enum:__anon3
DBG_METHOD_ENTRY	Debugger.h	/^    DBG_METHOD_ENTRY    = 0x04,$/;"	e	enum:__anon3
DBG_METHOD_EXIT	Debugger.h	/^    DBG_METHOD_EXIT     = 0x08,$/;"	e	enum:__anon3
DBG_SINGLE_STEP	Debugger.h	/^    DBG_SINGLE_STEP     = 0x02,$/;"	e	enum:__anon3
DBUG_MSG	test/TestIndirectRefTable.cpp	27;"	d	file:
DEAD_CODE_SCAN	analysis/CodeVerify.cpp	54;"	d	file:
DEAD_CODE_SCAN	analysis/CodeVerify.cpp	56;"	d	file:
DEBUG_ENABLE_ASSERT	native/dalvik_system_Zygote.cpp	/^    DEBUG_ENABLE_ASSERT             = 1 << 2,$/;"	e	enum:__anon21	file:
DEBUG_ENABLE_CHECKJNI	native/dalvik_system_Zygote.cpp	/^    DEBUG_ENABLE_CHECKJNI           = 1 << 1,$/;"	e	enum:__anon21	file:
DEBUG_ENABLE_DEBUGGER	native/dalvik_system_Zygote.cpp	/^    DEBUG_ENABLE_DEBUGGER           = 1,$/;"	e	enum:__anon21	file:
DEBUG_ENABLE_JNI_LOGGING	native/dalvik_system_Zygote.cpp	/^    DEBUG_ENABLE_JNI_LOGGING        = 1 << 4,$/;"	e	enum:__anon21	file:
DEBUG_ENABLE_SAFEMODE	native/dalvik_system_Zygote.cpp	/^    DEBUG_ENABLE_SAFEMODE           = 1 << 3,$/;"	e	enum:__anon21	file:
DEBUG_LOOP	compiler/Loop.cpp	22;"	d	file:
DEBUG_OPT	compiler/codegen/arm/LocalOptimizations.cpp	22;"	d	file:
DECODE_ALIAS_INFO_REG	compiler/codegen/arm/ArmLIR.h	157;"	d
DECODE_ALIAS_INFO_WIDE	compiler/codegen/arm/ArmLIR.h	158;"	d
DECODE_REG	compiler/Dataflow.h	125;"	d
DECODE_SUB	compiler/Dataflow.h	126;"	d
DEFAULT_HEAP_ID	alloc/DdmHeap.cpp	28;"	d	file:
DEFAULT_HEAP_UTILIZATION	alloc/HeapSource.cpp	41;"	d	file:
DEFAULT_LOCK_BUFFER	shadowlib/Lock.h	7;"	d
DEFAULT_MAP_SIZE	shadowlib/Map.h	9;"	d
DEFAULT_MAX_LENGTH	LinearAlloc.cpp	72;"	d	file:
DEFAULT_QUEUE_SIZE	shadowlib/ReQueue.h	7;"	d
DEXOPT_GEN_REGISTER_MAPS	analysis/DexPrepare.h	/^    DEXOPT_GEN_REGISTER_MAPS = 1 << 5,  \/* generate register maps during vfy *\/$/;"	e	enum:DexoptFlags
DEXOPT_IS_BOOTSTRAP	analysis/DexPrepare.h	/^    DEXOPT_IS_BOOTSTRAP      = 1 << 4,  \/* is dex in bootstrap class path? *\/$/;"	e	enum:DexoptFlags
DEXOPT_OPT_ALL	analysis/DexPrepare.h	/^    DEXOPT_OPT_ALL           = 1 << 1,  \/* optimize when verify fails? *\/$/;"	e	enum:DexoptFlags
DEXOPT_OPT_ENABLED	analysis/DexPrepare.h	/^    DEXOPT_OPT_ENABLED       = 1,       \/* optimizations enabled? *\/$/;"	e	enum:DexoptFlags
DEXOPT_SMP	analysis/DexPrepare.h	/^    DEXOPT_SMP               = 1 << 7   \/* specify SMP target *\/$/;"	e	enum:DexoptFlags
DEXOPT_UNIPROCESSOR	analysis/DexPrepare.h	/^    DEXOPT_UNIPROCESSOR      = 1 << 6,  \/* specify uniprocessor target *\/$/;"	e	enum:DexoptFlags
DEXOPT_VERIFY_ALL	analysis/DexPrepare.h	/^    DEXOPT_VERIFY_ALL        = 1 << 3,  \/* verify bootstrap classes? *\/$/;"	e	enum:DexoptFlags
DEXOPT_VERIFY_ENABLED	analysis/DexPrepare.h	/^    DEXOPT_VERIFY_ENABLED    = 1 << 2,  \/* verification enabled? *\/$/;"	e	enum:DexoptFlags
DEX_CACHE_BAD_ARCHIVE	JarFile.h	/^    DEX_CACHE_BAD_ARCHIVE = -1,$/;"	e	enum:DexCacheStatus
DEX_CACHE_ERROR	JarFile.h	/^    DEX_CACHE_ERROR = -2,$/;"	e	enum:DexCacheStatus
DEX_CACHE_OK	JarFile.h	/^    DEX_CACHE_OK = 0,$/;"	e	enum:DexCacheStatus
DEX_CACHE_STALE	JarFile.h	/^    DEX_CACHE_STALE,$/;"	e	enum:DexCacheStatus
DEX_CACHE_STALE_ODEX	JarFile.h	/^    DEX_CACHE_STALE_ODEX,$/;"	e	enum:DexCacheStatus
DF_A_IS_REG	compiler/Dataflow.h	81;"	d
DF_B_IS_REG	compiler/Dataflow.h	82;"	d
DF_C_IS_REG	compiler/Dataflow.h	83;"	d
DF_DA	compiler/Dataflow.h	55;"	d
DF_DA_WIDE	compiler/Dataflow.h	56;"	d
DF_FORMAT_35C	compiler/Dataflow.h	60;"	d
DF_FORMAT_3RC	compiler/Dataflow.h	61;"	d
DF_FP_A	compiler/Dataflow.h	66;"	d
DF_FP_B	compiler/Dataflow.h	67;"	d
DF_FP_C	compiler/Dataflow.h	68;"	d
DF_HAS_DEFS	compiler/Dataflow.h	75;"	d
DF_HAS_NR_CHECKS	compiler/Dataflow.h	77;"	d
DF_HAS_USES	compiler/Dataflow.h	72;"	d
DF_IS_GETTER	compiler/Dataflow.h	69;"	d
DF_IS_GETTER_OR_SETTER	compiler/Dataflow.h	84;"	d
DF_IS_LINEAR	compiler/Dataflow.h	58;"	d
DF_IS_MOVE	compiler/Dataflow.h	57;"	d
DF_IS_SETTER	compiler/Dataflow.h	70;"	d
DF_NOP	compiler/Dataflow.h	48;"	d
DF_NULL_N_RANGE_CHECK_0	compiler/Dataflow.h	63;"	d
DF_NULL_N_RANGE_CHECK_1	compiler/Dataflow.h	64;"	d
DF_NULL_N_RANGE_CHECK_2	compiler/Dataflow.h	65;"	d
DF_PHI	compiler/Dataflow.h	62;"	d
DF_SETS_CONST	compiler/Dataflow.h	59;"	d
DF_UA	compiler/Dataflow.h	49;"	d
DF_UA_WIDE	compiler/Dataflow.h	52;"	d
DF_UB	compiler/Dataflow.h	50;"	d
DF_UB_WIDE	compiler/Dataflow.h	53;"	d
DF_UC	compiler/Dataflow.h	51;"	d
DF_UC_WIDE	compiler/Dataflow.h	54;"	d
DISCONNECTED	Ddm.cpp	157;"	d	file:
DOUBLEREG	compiler/codegen/arm/ArmLIR.h	72;"	d
DRT_SHOW_LIVENESS	analysis/CodeVerify.cpp	/^    DRT_SHOW_LIVENESS   = 0x04,$/;"	e	enum:__anon15	file:
DRT_SHOW_LOCALS	analysis/CodeVerify.cpp	/^    DRT_SHOW_LOCALS     = 0x02,$/;"	e	enum:__anon15	file:
DRT_SHOW_REF_TYPES	analysis/CodeVerify.cpp	/^    DRT_SHOW_REF_TYPES  = 0x01,$/;"	e	enum:__anon15	file:
DRT_SIMPLE	analysis/CodeVerify.cpp	/^    DRT_SIMPLE          = 0,$/;"	e	enum:__anon15	file:
DUMP_PRIM_DATA	hprof/HprofHeap.cpp	25;"	d	file:
DUMP_REGS	mterp/c/header.cpp	131;"	d	file:
DUMP_REGS	mterp/c/header.cpp	136;"	d	file:
DUMP_REGS	mterp/out/InterpC-allstubs.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-allstubs.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv5te-vfp.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv5te-vfp.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv5te.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv5te.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv7-a-neon.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv7-a-neon.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv7-a.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-armv7-a.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-portable.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-portable.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-x86-atom.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-x86-atom.cpp	143;"	d	file:
DUMP_REGS	mterp/out/InterpC-x86.cpp	138;"	d	file:
DUMP_REGS	mterp/out/InterpC-x86.cpp	143;"	d	file:
DUMP_RESOURCE_MASK	compiler/codegen/arm/ArchUtility.cpp	291;"	d	file:
DUMP_SSA_REP	compiler/codegen/arm/ArchUtility.cpp	292;"	d	file:
DVM_OBJECT_INIT	oo/Object.h	223;"	d
DalvikBridgeFunc	oo/Object.h	/^typedef void (*DalvikBridgeFunc)(const u4* args, JValue* pResult,$/;"	t
DalvikJniReturnType	JniInternal.h	/^enum DalvikJniReturnType {$/;"	g
DalvikNativeClass	Native.h	/^struct DalvikNativeClass {$/;"	s
DalvikNativeFunc	oo/Object.h	/^typedef void (*DalvikNativeFunc)(const u4* args, JValue* pResult);$/;"	t
DalvikNativeMethod	Native.h	/^struct DalvikNativeMethod {$/;"	s
Dalvik_ch_usi_dag_dislre_AREDispatch_test	native/Test.cpp	/^static void Dalvik_ch_usi_dag_dislre_AREDispatch_test(const u4* args, JValue* pResult){$/;"	f	file:
Dalvik_dalvik_bytecode_OpcodeInfo_isInvoke	native/dalvik_bytecode_OpcodeInfo.cpp	/^static void Dalvik_dalvik_bytecode_OpcodeInfo_isInvoke(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_DexFile_closeDexFile	native/dalvik_system_DexFile.cpp	/^static void Dalvik_dalvik_system_DexFile_closeDexFile(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_DexFile_defineClass	native/dalvik_system_DexFile.cpp	/^static void Dalvik_dalvik_system_DexFile_defineClass(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_DexFile_getClassNameList	native/dalvik_system_DexFile.cpp	/^static void Dalvik_dalvik_system_DexFile_getClassNameList(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_DexFile_isDexOptNeeded	native/dalvik_system_DexFile.cpp	/^static void Dalvik_dalvik_system_DexFile_isDexOptNeeded(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_DexFile_openDexFile	native/dalvik_system_DexFile.cpp	/^static void Dalvik_dalvik_system_DexFile_openDexFile(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_DexFile_openDexFile_bytearray	native/dalvik_system_DexFile.cpp	/^static void Dalvik_dalvik_system_DexFile_openDexFile_bytearray(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_cacheRegisterMap	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_cacheRegisterMap(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_countInstancesOfClass	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_countInstancesOfClass(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_crash	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_crash(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_dumpHprofData	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_dumpHprofData(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_dumpHprofDataDdms	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_dumpHprofDataDdms(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_dumpReferenceTables	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_dumpReferenceTables(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_getAllocCount	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_getAllocCount(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_getInstructionCount	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_getInstructionCount(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_getLoadedClassCount	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_getLoadedClassCount(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_getVmFeatureList	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_getVmFeatureList(const u4* args, JValue* pResult) {$/;"	f	file:
Dalvik_dalvik_system_VMDebug_infopoint	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_infopoint(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_isDebuggerConnected	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_isDebuggerConnected(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_isDebuggingEnabled	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_isDebuggingEnabled(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_isMethodTracingActive	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_isMethodTracingActive(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_lastDebuggerActivity	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_lastDebuggerActivity(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_printLoadedClasses	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_printLoadedClasses(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_resetAllocCount	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_resetAllocCount(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_resetInstructionCount	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_resetInstructionCount(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_startAllocCounting	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_startAllocCounting(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_startEmulatorTracing	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_startEmulatorTracing(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_startInstructionCounting	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_startInstructionCounting(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_startMethodTracingNative	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_startMethodTracingNative(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_stopAllocCounting	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_stopAllocCounting(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_stopEmulatorTracing	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_stopEmulatorTracing(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_stopInstructionCounting	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_stopInstructionCounting(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_stopMethodTracing	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_stopMethodTracing(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMDebug_threadCpuTimeNanos	native/dalvik_system_VMDebug.cpp	/^static void Dalvik_dalvik_system_VMDebug_threadCpuTimeNanos(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_addressOf	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_addressOf(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_bootClassPath	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_bootClassPath(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_classPath	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_classPath(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_clearGrowthLimit	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_clearGrowthLimit(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_disableJitCompilation	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_disableJitCompilation(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_getTargetHeapUtilization	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_getTargetHeapUtilization($/;"	f	file:
Dalvik_dalvik_system_VMRuntime_isDebuggerActive	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_isDebuggerActive($/;"	f	file:
Dalvik_dalvik_system_VMRuntime_nativeSetTargetHeapUtilization	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_nativeSetTargetHeapUtilization($/;"	f	file:
Dalvik_dalvik_system_VMRuntime_newNonMovableArray	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_newNonMovableArray(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_properties	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_properties(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_setTargetSdkVersion	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_setTargetSdkVersion(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_startJitCompilation	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_startJitCompilation(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMRuntime_vmVersion	native/dalvik_system_VMRuntime.cpp	/^static void Dalvik_dalvik_system_VMRuntime_vmVersion(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMStack_fillStackTraceElements	native/dalvik_system_VMStack.cpp	/^static void Dalvik_dalvik_system_VMStack_fillStackTraceElements(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMStack_getCallingClassLoader	native/dalvik_system_VMStack.cpp	/^static void Dalvik_dalvik_system_VMStack_getCallingClassLoader(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMStack_getClasses	native/dalvik_system_VMStack.cpp	/^static void Dalvik_dalvik_system_VMStack_getClasses(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMStack_getStackClass2	native/dalvik_system_VMStack.cpp	/^static void Dalvik_dalvik_system_VMStack_getStackClass2(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_VMStack_getThreadStackTrace	native/dalvik_system_VMStack.cpp	/^static void Dalvik_dalvik_system_VMStack_getThreadStackTrace(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_Zygote_execShell	native/dalvik_system_Zygote.cpp	/^static void Dalvik_dalvik_system_Zygote_execShell($/;"	f	file:
Dalvik_dalvik_system_Zygote_fork	native/dalvik_system_Zygote.cpp	/^static void Dalvik_dalvik_system_Zygote_fork(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_dalvik_system_Zygote_forkAndSpecialize	native/dalvik_system_Zygote.cpp	/^static void Dalvik_dalvik_system_Zygote_forkAndSpecialize(const u4* args,$/;"	f	file:
Dalvik_dalvik_system_Zygote_forkSystemServer	native/dalvik_system_Zygote.cpp	/^static void Dalvik_dalvik_system_Zygote_forkSystemServer($/;"	f	file:
Dalvik_java_lang_Class_classForName	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_classForName(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Class_desiredAssertionStatus	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_desiredAssertionStatus(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getClassLoader	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getClassLoader(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getComponentType	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getComponentType(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredAnnotation	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredAnnotation(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredAnnotations	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredAnnotations(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredClasses	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredClasses(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredConstructorOrMethod	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredConstructorOrMethod($/;"	f	file:
Dalvik_java_lang_Class_getDeclaredConstructors	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredConstructors(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredField	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredField(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredFields	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredFields(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaredMethods	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaredMethods(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getDeclaringClass	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getDeclaringClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getEnclosingClass	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getEnclosingClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getEnclosingConstructor	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getEnclosingConstructor(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getEnclosingMethod	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getEnclosingMethod(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getInnerClassName	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getInnerClassName(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getInterfaces	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getInterfaces(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getModifiers	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getModifiers(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Class_getNameNative	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getNameNative(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Class_getSignatureAnnotation	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getSignatureAnnotation(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_getSuperclass	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_getSuperclass(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_isAnonymousClass	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_isAnonymousClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_isAssignableFrom	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_isAssignableFrom(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_isDeclaredAnnotationPresent	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_isDeclaredAnnotationPresent(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_isInstance	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_isInstance(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_isInterface	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_isInterface(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_isPrimitive	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_isPrimitive(const u4* args,$/;"	f	file:
Dalvik_java_lang_Class_newInstance	native/java_lang_Class.cpp	/^static void Dalvik_java_lang_Class_newInstance(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Object_getClass	native/java_lang_Object.cpp	/^static void Dalvik_java_lang_Object_getClass(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Object_hashCode	native/java_lang_Object.cpp	/^static void Dalvik_java_lang_Object_hashCode(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Object_internalClone	native/java_lang_Object.cpp	/^static void Dalvik_java_lang_Object_internalClone(const u4* args,$/;"	f	file:
Dalvik_java_lang_Object_notify	native/java_lang_Object.cpp	/^static void Dalvik_java_lang_Object_notify(const u4* args, JValue* pResult,$/;"	f	file:
Dalvik_java_lang_Object_notifyAll	native/java_lang_Object.cpp	/^static void Dalvik_java_lang_Object_notifyAll(const u4* args, JValue* pResult,$/;"	f	file:
Dalvik_java_lang_Object_wait	native/java_lang_Object.cpp	/^static void Dalvik_java_lang_Object_wait(const u4* args, JValue* pResult,$/;"	f	file:
Dalvik_java_lang_Runtime_freeMemory	native/java_lang_Runtime.cpp	/^static void Dalvik_java_lang_Runtime_freeMemory(const u4* args,$/;"	f	file:
Dalvik_java_lang_Runtime_gc	native/java_lang_Runtime.cpp	/^static void Dalvik_java_lang_Runtime_gc(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Runtime_maxMemory	native/java_lang_Runtime.cpp	/^static void Dalvik_java_lang_Runtime_maxMemory(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Runtime_nativeExit	native/java_lang_Runtime.cpp	/^static void Dalvik_java_lang_Runtime_nativeExit(const u4* args,$/;"	f	file:
Dalvik_java_lang_Runtime_nativeLoad	native/java_lang_Runtime.cpp	/^static void Dalvik_java_lang_Runtime_nativeLoad(const u4* args,$/;"	f	file:
Dalvik_java_lang_Runtime_totalMemory	native/java_lang_Runtime.cpp	/^static void Dalvik_java_lang_Runtime_totalMemory(const u4* args,$/;"	f	file:
Dalvik_java_lang_System_arraycopy	native/java_lang_System.cpp	/^static void Dalvik_java_lang_System_arraycopy(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_System_currentTimeMillis	native/java_lang_System.cpp	/^static void Dalvik_java_lang_System_currentTimeMillis(const u4* args,$/;"	f	file:
Dalvik_java_lang_System_identityHashCode	native/java_lang_System.cpp	/^static void Dalvik_java_lang_System_identityHashCode(const u4* args,$/;"	f	file:
Dalvik_java_lang_System_mapLibraryName	native/java_lang_System.cpp	/^static void Dalvik_java_lang_System_mapLibraryName(const u4* args,$/;"	f	file:
Dalvik_java_lang_System_nanoTime	native/java_lang_System.cpp	/^static void Dalvik_java_lang_System_nanoTime(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_Throwable_nativeFillInStackTrace	native/java_lang_Throwable.cpp	/^static void Dalvik_java_lang_Throwable_nativeFillInStackTrace(const u4* args,$/;"	f	file:
Dalvik_java_lang_Throwable_nativeGetStackTrace	native/java_lang_Throwable.cpp	/^static void Dalvik_java_lang_Throwable_nativeGetStackTrace(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMClassLoader_defineClass	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_defineClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMClassLoader_defineClass2	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_defineClass2(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMClassLoader_findLoadedClass	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_findLoadedClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMClassLoader_getBootClassPathResource	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_getBootClassPathResource($/;"	f	file:
Dalvik_java_lang_VMClassLoader_getBootClassPathSize	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_getBootClassPathSize(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMClassLoader_getPrimitiveClass	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_getPrimitiveClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMClassLoader_loadClass	native/java_lang_VMClassLoader.cpp	/^static void Dalvik_java_lang_VMClassLoader_loadClass(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMThread_create	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_create(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_VMThread_currentThread	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_currentThread(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMThread_getStatus	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_getStatus(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_VMThread_holdsLock	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_holdsLock(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_VMThread_interrupt	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_interrupt(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_VMThread_interrupted	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_interrupted(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMThread_isInterrupted	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_isInterrupted(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMThread_nameChanged	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_nameChanged(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMThread_setPriority	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_setPriority(const u4* args,$/;"	f	file:
Dalvik_java_lang_VMThread_sleep	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_sleep(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_VMThread_yield	native/java_lang_VMThread.cpp	/^static void Dalvik_java_lang_VMThread_yield(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_java_lang_reflect_AccessibleObject_getClassSignatureAnnotation	native/java_lang_reflect_AccessibleObject.cpp	/^static void Dalvik_java_lang_reflect_AccessibleObject_getClassSignatureAnnotation($/;"	f	file:
Dalvik_java_lang_reflect_Array_createMultiArray	native/java_lang_reflect_Array.cpp	/^static void Dalvik_java_lang_reflect_Array_createMultiArray(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Array_createObjectArray	native/java_lang_reflect_Array.cpp	/^static void Dalvik_java_lang_reflect_Array_createObjectArray(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Constructor_constructNative	native/java_lang_reflect_Constructor.cpp	/^static void Dalvik_java_lang_reflect_Constructor_constructNative($/;"	f	file:
Dalvik_java_lang_reflect_Field_getAnnotation	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_getAnnotation(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_getDeclaredAnnotations	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_getDeclaredAnnotations($/;"	f	file:
Dalvik_java_lang_reflect_Field_getField	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_getField(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_getFieldModifiers	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_getFieldModifiers(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_getPrimitiveField	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_getPrimitiveField(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_getSignatureAnnotation	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_getSignatureAnnotation(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_isAnnotationPresent	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_isAnnotationPresent(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_setField	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_setField(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Field_setPrimitiveField	native/java_lang_reflect_Field.cpp	/^static void Dalvik_java_lang_reflect_Field_setPrimitiveField(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Method_getAnnotation	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_getAnnotation(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Method_getDeclaredAnnotations	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_getDeclaredAnnotations($/;"	f	file:
Dalvik_java_lang_reflect_Method_getDefaultValue	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_getDefaultValue(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Method_getMethodModifiers	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_getMethodModifiers(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Method_getParameterAnnotations	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_getParameterAnnotations($/;"	f	file:
Dalvik_java_lang_reflect_Method_getSignatureAnnotation	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_getSignatureAnnotation($/;"	f	file:
Dalvik_java_lang_reflect_Method_invokeNative	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_invokeNative(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Method_isAnnotationPresent	native/java_lang_reflect_Method.cpp	/^static void Dalvik_java_lang_reflect_Method_isAnnotationPresent(const u4* args,$/;"	f	file:
Dalvik_java_lang_reflect_Proxy_generateProxy	native/java_lang_reflect_Proxy.cpp	/^static void Dalvik_java_lang_reflect_Proxy_generateProxy(const u4* args,$/;"	f	file:
Dalvik_java_util_concurrent_atomic_AtomicLong_VMSupportsCS8	native/java_util_concurrent_atomic_AtomicLong.cpp	/^static void Dalvik_java_util_concurrent_atomic_AtomicLong_VMSupportsCS8($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_NativeTestTarget_emptyInternalMethod	native/org_apache_harmony_dalvik_NativeTestTarget.cpp	/^static void Dalvik_org_apache_harmony_dalvik_NativeTestTarget_emptyInternalMethod($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmServer_nativeSendChunk	native/org_apache_harmony_dalvik_ddmc_DdmServer.cpp	/^static void Dalvik_org_apache_harmony_dalvik_ddmc_DdmServer_nativeSendChunk($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_enableRecentAllocations	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^    Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_enableRecentAllocations($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getRecentAllocationStatus	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^    Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getRecentAllocationStatus($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getRecentAllocations	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^    Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getRecentAllocations($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getStackTraceById	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^    Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getStackTraceById($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getThreadStats	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^static void Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_getThreadStats($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_heapInfoNotify	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^static void Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_heapInfoNotify($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_heapSegmentNotify	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^    Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_heapSegmentNotify($/;"	f	file:
Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_threadNotify	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^static void Dalvik_org_apache_harmony_dalvik_ddmc_DdmVmInternal_threadNotify($/;"	f	file:
Dalvik_sun_misc_Unsafe_arrayBaseOffset0	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_arrayBaseOffset0(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_arrayIndexScale0	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_arrayIndexScale0(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_compareAndSwapInt	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_compareAndSwapInt(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_compareAndSwapLong	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_compareAndSwapLong(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_compareAndSwapObject	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_compareAndSwapObject(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_getInt	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_getInt(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_sun_misc_Unsafe_getIntVolatile	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_getIntVolatile(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_getLong	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_getLong(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_sun_misc_Unsafe_getLongVolatile	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_getLongVolatile(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_getObject	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_getObject(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_sun_misc_Unsafe_getObjectVolatile	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_getObjectVolatile(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_objectFieldOffset0	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_objectFieldOffset0(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_putInt	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putInt(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_sun_misc_Unsafe_putIntVolatile	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putIntVolatile(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_putLong	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putLong(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_sun_misc_Unsafe_putLongVolatile	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putLongVolatile(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_putObject	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putObject(const u4* args, JValue* pResult)$/;"	f	file:
Dalvik_sun_misc_Unsafe_putObjectVolatile	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putObjectVolatile(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_putOrderedInt	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putOrderedInt(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_putOrderedLong	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putOrderedLong(const u4* args,$/;"	f	file:
Dalvik_sun_misc_Unsafe_putOrderedObject	native/sun_misc_Unsafe.cpp	/^static void Dalvik_sun_misc_Unsafe_putOrderedObject(const u4* args,$/;"	f	file:
DataFlowAnalysisMode	compiler/Compiler.h	/^typedef enum DataFlowAnalysisMode {$/;"	g
DataFlowAnalysisMode	compiler/Compiler.h	/^} DataFlowAnalysisMode;$/;"	t	typeref:enum:DataFlowAnalysisMode
DataFlowAttributePos	compiler/Dataflow.h	/^typedef enum DataFlowAttributePos {$/;"	g
DataFlowAttributes	compiler/Dataflow.h	/^} DataFlowAttributes;$/;"	t	typeref:enum:DataFlowAttributePos
DataObject	oo/Object.h	/^struct DataObject : Object {$/;"	s
DataParseError	compiler/template/gen-template.py	/^class DataParseError(SyntaxError):$/;"	c
DataParseError	mterp/gen-mterp.py	/^class DataParseError(SyntaxError):$/;"	c
DebugCallbackContext	Debugger.cpp	/^struct DebugCallbackContext {$/;"	s	file:
DebugFunction	shadowlib/ReAgent.cpp	/^void DebugFunction(JNIEnv* env){$/;"	f
DebugInvokeReq	Debugger.h	/^struct DebugInvokeReq {$/;"	s
DebugOutputTarget	Misc.h	/^struct DebugOutputTarget {$/;"	s
DebugTargetKind	Misc.h	/^enum DebugTargetKind {$/;"	g
DefineClass	Jni.cpp	/^static jclass DefineClass(JNIEnv* env, const char *name, jobject loader,$/;"	f	file:
DeleteGlobalRef	Jni.cpp	/^static void DeleteGlobalRef(JNIEnv* env, jobject jglobalRef) {$/;"	f	file:
DeleteLocalRef	Jni.cpp	/^static void DeleteLocalRef(JNIEnv* env, jobject jlocalRef) {$/;"	f	file:
DeleteWeakGlobalRef	Jni.cpp	/^static void DeleteWeakGlobalRef(JNIEnv* env, jweak wref) {$/;"	f	file:
DestroyJavaVM	Jni.cpp	/^static jint DestroyJavaVM(JavaVM* vm) {$/;"	f	file:
DetachCurrentThread	Jni.cpp	/^static jint DetachCurrentThread(JavaVM* vm) {$/;"	f	file:
DexCacheStatus	JarFile.h	/^enum DexCacheStatus {$/;"	g
DexClassVerifyMode	analysis/DexVerify.h	/^enum DexClassVerifyMode {$/;"	g
DexOptimizerMode	analysis/DexPrepare.h	/^enum DexOptimizerMode {$/;"	g
DexOrJar	native/dalvik_system_DexFile.cpp	/^struct DexOrJar {$/;"	s	file:
DexoptFlags	analysis/DexPrepare.h	/^enum DexoptFlags {$/;"	g
DoubleCapacity	shadowlib/Buffer.h	/^		void DoubleCapacity(){$/;"	f	class:Buffer
DoubleCapacity	shadowlib/ReQueue.h	/^		void DoubleCapacity(){$/;"	f	class:Buffer
Double_doubleToLongBits	native/java_lang_Double.cpp	/^static void Double_doubleToLongBits(const u4* args, JValue* pResult)$/;"	f	file:
Double_doubleToRawLongBits	native/java_lang_Double.cpp	/^static void Double_doubleToRawLongBits(const u4* args, JValue* pResult)$/;"	f	file:
Double_longBitsToDouble	native/java_lang_Double.cpp	/^static void Double_longBitsToDouble(const u4* args, JValue* pResult)$/;"	f	file:
Duplicate	shadowlib/ReQueue.h	/^		Buffer* Duplicate(){$/;"	f	class:Buffer
DvmDex	DvmDex.h	/^struct DvmDex {$/;"	s
DvmGlobals	Globals.h	/^struct DvmGlobals {$/;"	s
DvmJitGlobals	Globals.h	/^struct DvmJitGlobals {$/;"	s
DvmJniGlobals	Globals.h	/^struct DvmJniGlobals {$/;"	s
EBX_SPILL	mterp/out/InterpAsm-x86.S	/^#define EBX_SPILL      (-12)$/;"	d
EBX_SPILL	mterp/x86/header.S	/^#define EBX_SPILL      (-12)$/;"	d
EDI_SPILL	mterp/out/InterpAsm-x86.S	/^#define EDI_SPILL      ( -4)$/;"	d
EDI_SPILL	mterp/x86/header.S	/^#define EDI_SPILL      ( -4)$/;"	d
EK_BREAKPOINT	jdwp/JdwpConstants.h	/^    EK_BREAKPOINT           = 2,$/;"	e	enum:JdwpEventKind
EK_CLASS_LOAD	jdwp/JdwpConstants.h	/^    EK_CLASS_LOAD           = 10,$/;"	e	enum:JdwpEventKind
EK_CLASS_PREPARE	jdwp/JdwpConstants.h	/^    EK_CLASS_PREPARE        = 8,$/;"	e	enum:JdwpEventKind
EK_CLASS_UNLOAD	jdwp/JdwpConstants.h	/^    EK_CLASS_UNLOAD         = 9,$/;"	e	enum:JdwpEventKind
EK_EXCEPTION	jdwp/JdwpConstants.h	/^    EK_EXCEPTION            = 4,$/;"	e	enum:JdwpEventKind
EK_EXCEPTION_CATCH	jdwp/JdwpConstants.h	/^    EK_EXCEPTION_CATCH      = 30,$/;"	e	enum:JdwpEventKind
EK_FIELD_ACCESS	jdwp/JdwpConstants.h	/^    EK_FIELD_ACCESS         = 20,$/;"	e	enum:JdwpEventKind
EK_FIELD_MODIFICATION	jdwp/JdwpConstants.h	/^    EK_FIELD_MODIFICATION   = 21,$/;"	e	enum:JdwpEventKind
EK_FRAME_POP	jdwp/JdwpConstants.h	/^    EK_FRAME_POP            = 3,$/;"	e	enum:JdwpEventKind
EK_METHOD_ENTRY	jdwp/JdwpConstants.h	/^    EK_METHOD_ENTRY         = 40,$/;"	e	enum:JdwpEventKind
EK_METHOD_EXIT	jdwp/JdwpConstants.h	/^    EK_METHOD_EXIT          = 41,$/;"	e	enum:JdwpEventKind
EK_SINGLE_STEP	jdwp/JdwpConstants.h	/^    EK_SINGLE_STEP          = 1,$/;"	e	enum:JdwpEventKind
EK_THREAD_DEATH	jdwp/JdwpConstants.h	/^    EK_THREAD_DEATH         = EK_THREAD_END,$/;"	e	enum:JdwpEventKind
EK_THREAD_END	jdwp/JdwpConstants.h	/^    EK_THREAD_END           = 7,$/;"	e	enum:JdwpEventKind
EK_THREAD_START	jdwp/JdwpConstants.h	/^    EK_THREAD_START         = 6,$/;"	e	enum:JdwpEventKind
EK_USER_DEFINED	jdwp/JdwpConstants.h	/^    EK_USER_DEFINED         = 5,$/;"	e	enum:JdwpEventKind
EK_VM_DEATH	jdwp/JdwpConstants.h	/^    EK_VM_DEATH             = 99,$/;"	e	enum:JdwpEventKind
EK_VM_DISCONNECTED	jdwp/JdwpConstants.h	/^    EK_VM_DISCONNECTED      = 100,  \/* "Never sent across JDWP *\/$/;"	e	enum:JdwpEventKind
EK_VM_INIT	jdwp/JdwpConstants.h	/^    EK_VM_INIT              = 90,$/;"	e	enum:JdwpEventKind
EK_VM_START	jdwp/JdwpConstants.h	/^    EK_VM_START             = EK_VM_INIT,$/;"	e	enum:JdwpEventKind
ENABLE_CGROUP_ERR_LOGGING	Thread.cpp	59;"	d	file:
ENCODE_ALL	compiler/codegen/arm/ArmLIR.h	153;"	d
ENCODE_CCODE	compiler/codegen/arm/ArmLIR.h	144;"	d
ENCODE_DALVIK_REG	compiler/codegen/arm/ArmLIR.h	148;"	d
ENCODE_FP_STATUS	compiler/codegen/arm/ArmLIR.h	145;"	d
ENCODE_HEAP_REF	compiler/codegen/arm/ArmLIR.h	150;"	d
ENCODE_LITERAL	compiler/codegen/arm/ArmLIR.h	149;"	d
ENCODE_MEM	compiler/codegen/arm/ArmLIR.h	154;"	d
ENCODE_MUST_NOT_ALIAS	compiler/codegen/arm/ArmLIR.h	151;"	d
ENCODE_REG_LIST	compiler/codegen/arm/ArmLIR.h	140;"	d
ENCODE_REG_LR	compiler/codegen/arm/ArmLIR.h	142;"	d
ENCODE_REG_PC	compiler/codegen/arm/ArmLIR.h	143;"	d
ENCODE_REG_SP	compiler/codegen/arm/ArmLIR.h	141;"	d
ENCODE_REG_SUB	compiler/Dataflow.h	124;"	d
ENCODING_MAP	compiler/codegen/arm/Assemble.cpp	43;"	d	file:
ENFORCE_READ_ONLY	LinearAlloc.h	26;"	d
ENQUEUE_MAX_RETRIES	compiler/Compiler.cpp	61;"	d	file:
ERR_ABSENT_INFORMATION	jdwp/JdwpConstants.h	/^    ERR_ABSENT_INFORMATION                          = 101,$/;"	e	enum:JdwpError
ERR_ACCESS_DENIED	jdwp/JdwpConstants.h	/^    ERR_ACCESS_DENIED                               = 111,$/;"	e	enum:JdwpError
ERR_ADD_METHOD_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_ADD_METHOD_NOT_IMPLEMENTED                  = 63,$/;"	e	enum:JdwpError
ERR_ALREADY_INVOKING	jdwp/JdwpConstants.h	/^    ERR_ALREADY_INVOKING                            = 502,$/;"	e	enum:JdwpError
ERR_CIRCULAR_CLASS_DEFINITION	jdwp/JdwpConstants.h	/^    ERR_CIRCULAR_CLASS_DEFINITION                   = 61,$/;"	e	enum:JdwpError
ERR_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED      = 70,$/;"	e	enum:JdwpError
ERR_CLASS_NOT_PREPARED	jdwp/JdwpConstants.h	/^    ERR_CLASS_NOT_PREPARED                          = 22,$/;"	e	enum:JdwpError
ERR_DELETE_METHOD_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_DELETE_METHOD_NOT_IMPLEMENTED               = 67,$/;"	e	enum:JdwpError
ERR_DUPLICATE	jdwp/JdwpConstants.h	/^    ERR_DUPLICATE                                   = 40,$/;"	e	enum:JdwpError
ERR_FAILS_VERIFICATION	jdwp/JdwpConstants.h	/^    ERR_FAILS_VERIFICATION                          = 62,$/;"	e	enum:JdwpError
ERR_HIERARCHY_CHANGE_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_HIERARCHY_CHANGE_NOT_IMPLEMENTED            = 66,$/;"	e	enum:JdwpError
ERR_ILLEGAL_ARGUMENT	jdwp/JdwpConstants.h	/^    ERR_ILLEGAL_ARGUMENT                            = 103,$/;"	e	enum:JdwpError
ERR_INTERNAL	jdwp/JdwpConstants.h	/^    ERR_INTERNAL                                    = 113,$/;"	e	enum:JdwpError
ERR_INTERRUPT	jdwp/JdwpConstants.h	/^    ERR_INTERRUPT                                   = 52,$/;"	e	enum:JdwpError
ERR_INVALID_ARRAY	jdwp/JdwpConstants.h	/^    ERR_INVALID_ARRAY                               = 508,$/;"	e	enum:JdwpError
ERR_INVALID_CLASS	jdwp/JdwpConstants.h	/^    ERR_INVALID_CLASS                               = 21,$/;"	e	enum:JdwpError
ERR_INVALID_CLASS_FORMAT	jdwp/JdwpConstants.h	/^    ERR_INVALID_CLASS_FORMAT                        = 60,$/;"	e	enum:JdwpError
ERR_INVALID_CLASS_LOADER	jdwp/JdwpConstants.h	/^    ERR_INVALID_CLASS_LOADER                        = 507,$/;"	e	enum:JdwpError
ERR_INVALID_COUNT	jdwp/JdwpConstants.h	/^    ERR_INVALID_COUNT                               = 512,$/;"	e	enum:JdwpError
ERR_INVALID_EVENT_TYPE	jdwp/JdwpConstants.h	/^    ERR_INVALID_EVENT_TYPE                          = 102,$/;"	e	enum:JdwpError
ERR_INVALID_FIELDID	jdwp/JdwpConstants.h	/^    ERR_INVALID_FIELDID                             = 25,$/;"	e	enum:JdwpError
ERR_INVALID_FRAMEID	jdwp/JdwpConstants.h	/^    ERR_INVALID_FRAMEID                             = 30,$/;"	e	enum:JdwpError
ERR_INVALID_INDEX	jdwp/JdwpConstants.h	/^    ERR_INVALID_INDEX                               = 503,$/;"	e	enum:JdwpError
ERR_INVALID_LENGTH	jdwp/JdwpConstants.h	/^    ERR_INVALID_LENGTH                              = 504,$/;"	e	enum:JdwpError
ERR_INVALID_LOCATION	jdwp/JdwpConstants.h	/^    ERR_INVALID_LOCATION                            = 24,$/;"	e	enum:JdwpError
ERR_INVALID_METHODID	jdwp/JdwpConstants.h	/^    ERR_INVALID_METHODID                            = 23,$/;"	e	enum:JdwpError
ERR_INVALID_MONITOR	jdwp/JdwpConstants.h	/^    ERR_INVALID_MONITOR                             = 50,$/;"	e	enum:JdwpError
ERR_INVALID_OBJECT	jdwp/JdwpConstants.h	/^    ERR_INVALID_OBJECT                              = 20,$/;"	e	enum:JdwpError
ERR_INVALID_PRIORITY	jdwp/JdwpConstants.h	/^    ERR_INVALID_PRIORITY                            = 12,$/;"	e	enum:JdwpError
ERR_INVALID_SLOT	jdwp/JdwpConstants.h	/^    ERR_INVALID_SLOT                                = 35,$/;"	e	enum:JdwpError
ERR_INVALID_STRING	jdwp/JdwpConstants.h	/^    ERR_INVALID_STRING                              = 506,$/;"	e	enum:JdwpError
ERR_INVALID_TAG	jdwp/JdwpConstants.h	/^    ERR_INVALID_TAG                                 = 500,$/;"	e	enum:JdwpError
ERR_INVALID_THREAD	jdwp/JdwpConstants.h	/^    ERR_INVALID_THREAD                              = 10,$/;"	e	enum:JdwpError
ERR_INVALID_THREAD_GROUP	jdwp/JdwpConstants.h	/^    ERR_INVALID_THREAD_GROUP                        = 11,$/;"	e	enum:JdwpError
ERR_INVALID_TYPESTATE	jdwp/JdwpConstants.h	/^    ERR_INVALID_TYPESTATE                           = 65,$/;"	e	enum:JdwpError
ERR_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED     = 71,$/;"	e	enum:JdwpError
ERR_NAMES_DONT_MATCH	jdwp/JdwpConstants.h	/^    ERR_NAMES_DONT_MATCH                            = 69,$/;"	e	enum:JdwpError
ERR_NATIVE_METHOD	jdwp/JdwpConstants.h	/^    ERR_NATIVE_METHOD                               = 511,$/;"	e	enum:JdwpError
ERR_NONE	jdwp/JdwpConstants.h	/^    ERR_NONE                                        = 0,$/;"	e	enum:JdwpError
ERR_NOT_CURRENT_FRAME	jdwp/JdwpConstants.h	/^    ERR_NOT_CURRENT_FRAME                           = 33,$/;"	e	enum:JdwpError
ERR_NOT_FOUND	jdwp/JdwpConstants.h	/^    ERR_NOT_FOUND                                   = 41,$/;"	e	enum:JdwpError
ERR_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_NOT_IMPLEMENTED                             = 99,$/;"	e	enum:JdwpError
ERR_NOT_MONITOR_OWNER	jdwp/JdwpConstants.h	/^    ERR_NOT_MONITOR_OWNER                           = 51,$/;"	e	enum:JdwpError
ERR_NO_MORE_FRAMES	jdwp/JdwpConstants.h	/^    ERR_NO_MORE_FRAMES                              = 31,$/;"	e	enum:JdwpError
ERR_NULL_POINTER	jdwp/JdwpConstants.h	/^    ERR_NULL_POINTER                                = 100,$/;"	e	enum:JdwpError
ERR_OPAQUE_FRAME	jdwp/JdwpConstants.h	/^    ERR_OPAQUE_FRAME                                = 32,$/;"	e	enum:JdwpError
ERR_OUT_OF_MEMORY	jdwp/JdwpConstants.h	/^    ERR_OUT_OF_MEMORY                               = 110,$/;"	e	enum:JdwpError
ERR_SCHEMA_CHANGE_NOT_IMPLEMENTED	jdwp/JdwpConstants.h	/^    ERR_SCHEMA_CHANGE_NOT_IMPLEMENTED               = 64,$/;"	e	enum:JdwpError
ERR_THREAD_NOT_SUSPENDED	jdwp/JdwpConstants.h	/^    ERR_THREAD_NOT_SUSPENDED                        = 13,$/;"	e	enum:JdwpError
ERR_THREAD_SUSPENDED	jdwp/JdwpConstants.h	/^    ERR_THREAD_SUSPENDED                            = 14,$/;"	e	enum:JdwpError
ERR_TRANSPORT_INIT	jdwp/JdwpConstants.h	/^    ERR_TRANSPORT_INIT                              = 510,$/;"	e	enum:JdwpError
ERR_TRANSPORT_LOAD	jdwp/JdwpConstants.h	/^    ERR_TRANSPORT_LOAD                              = 509,$/;"	e	enum:JdwpError
ERR_TYPE_MISMATCH	jdwp/JdwpConstants.h	/^    ERR_TYPE_MISMATCH                               = 34,$/;"	e	enum:JdwpError
ERR_UNATTACHED_THREAD	jdwp/JdwpConstants.h	/^    ERR_UNATTACHED_THREAD                           = 115,$/;"	e	enum:JdwpError
ERR_UNSUPPORTED_VERSION	jdwp/JdwpConstants.h	/^    ERR_UNSUPPORTED_VERSION                         = 68,$/;"	e	enum:JdwpError
ERR_VM_DEAD	jdwp/JdwpConstants.h	/^    ERR_VM_DEAD                                     = 112,$/;"	e	enum:JdwpError
ESI_SPILL	mterp/out/InterpAsm-x86.S	/^#define ESI_SPILL      ( -8)$/;"	d
ESI_SPILL	mterp/x86/header.S	/^#define ESI_SPILL      ( -8)$/;"	d
EVENT_LOG_TAG_dvm_lock_sample	Sync.cpp	264;"	d	file:
EXPECTED_FILE_FLAGS	oo/Object.h	86;"	d
EXPORT_EXTRA_PC	mterp/c/header.cpp	76;"	d	file:
EXPORT_EXTRA_PC	mterp/c/header.cpp	78;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-allstubs.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-allstubs.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv5te-vfp.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv5te-vfp.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv5te.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv5te.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv7-a-neon.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv7-a-neon.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv7-a.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-armv7-a.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-portable.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-portable.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-x86-atom.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-x86-atom.cpp	85;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-x86.cpp	83;"	d	file:
EXPORT_EXTRA_PC	mterp/out/InterpC-x86.cpp	85;"	d	file:
EXPORT_PC	compiler/template/armv5te/header.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	mterp/armv5te/header.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	mterp/c/header.cpp	297;"	d	file:
EXPORT_PC	mterp/out/InterpAsm-armv5te-vfp.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	mterp/out/InterpAsm-armv5te.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	mterp/out/InterpAsm-armv7-a-neon.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	mterp/out/InterpAsm-armv7-a.S	/^#define EXPORT_PC() \\$/;"	d
EXPORT_PC	mterp/out/InterpC-allstubs.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-armv5te-vfp.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-armv5te.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-armv7-a-neon.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-armv7-a.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-portable.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-x86-atom.cpp	304;"	d	file:
EXPORT_PC	mterp/out/InterpC-x86.cpp	304;"	d	file:
EncodedArrayIterator	reflect/Reflect.h	/^struct EncodedArrayIterator {$/;"	s
EncodingMap	compiler/codegen/arm/Assemble.cpp	/^ArmEncodingMap EncodingMap[kArmLast] = {$/;"	v
Enqueue	shadowlib/ReQueue.h	/^		virtual int Enqueue(const char* data, int length){$/;"	f	class:BaseQueue
Enqueue	shadowlib/ReQueue.h	/^		virtual int Enqueue(const char* data, int length){$/;"	f	class:Buffer
Enqueue	shadowlib/ReQueue.h	/^		virtual int Enqueue(const char* data, int length){$/;"	f	class:ReQueue
EnqueueJboolean	shadowlib/ReQueue.h	/^		int EnqueueJboolean(jboolean data){$/;"	f	class:BaseQueue
EnqueueJbyte	shadowlib/ReQueue.h	/^		int EnqueueJbyte(jbyte data){$/;"	f	class:BaseQueue
EnqueueJchar	shadowlib/ReQueue.h	/^		int EnqueueJchar(jchar data){$/;"	f	class:BaseQueue
EnqueueJdouble	shadowlib/ReQueue.h	/^		int EnqueueJdouble(jdouble data){$/;"	f	class:BaseQueue
EnqueueJfloat	shadowlib/ReQueue.h	/^		int EnqueueJfloat(jfloat data){$/;"	f	class:BaseQueue
EnqueueJint	shadowlib/ReQueue.h	/^		int EnqueueJint(jint data){$/;"	f	class:BaseQueue
EnqueueJlong	shadowlib/ReQueue.h	/^		int EnqueueJlong(jlong data){$/;"	f	class:BaseQueue
EnqueueJshort	shadowlib/ReQueue.h	/^		int EnqueueJshort(jshort data){$/;"	f	class:BaseQueue
EnqueueStringUtf8	shadowlib/ReQueue.h	/^		int EnqueueStringUtf8(const char* string_utf8, uint16_t size_in_bytes){$/;"	f	class:BaseQueue
EnsureLocalCapacity	Jni.cpp	/^static jint EnsureLocalCapacity(JNIEnv* env, jint capacity) {$/;"	f	file:
ExceptionCheck	Jni.cpp	/^static jboolean ExceptionCheck(JNIEnv* env) {$/;"	f	file:
ExceptionClear	Jni.cpp	/^static void ExceptionClear(JNIEnv* env) {$/;"	f	file:
ExceptionDescribe	Jni.cpp	/^static void ExceptionDescribe(JNIEnv* env) {$/;"	f	file:
ExceptionOccurred	Jni.cpp	/^static jthrowable ExceptionOccurred(JNIEnv* env) {$/;"	f	file:
ExecutionMode	interp/InterpState.h	/^enum ExecutionMode {$/;"	g
ExecutionSubModes	interp/InterpState.h	/^enum ExecutionSubModes {$/;"	g
Exist	shadowlib/Map.h	/^		bool Exist(const K &key){$/;"	f	class:Map
ExpandBuf	jdwp/ExpandBuf.cpp	/^struct ExpandBuf {$/;"	s	file:
ExtendedMIROpcode	compiler/CompilerIR.h	/^enum ExtendedMIROpcode {$/;"	g
FETCH	mterp/armv5te/header.S	/^#define FETCH(_reg, _count)     ldrh    _reg, [rPC, #((_count)*2)]$/;"	d
FETCH	mterp/c/header.cpp	262;"	d	file:
FETCH	mterp/out/InterpAsm-armv5te-vfp.S	/^#define FETCH(_reg, _count)     ldrh    _reg, [rPC, #((_count)*2)]$/;"	d
FETCH	mterp/out/InterpAsm-armv5te.S	/^#define FETCH(_reg, _count)     ldrh    _reg, [rPC, #((_count)*2)]$/;"	d
FETCH	mterp/out/InterpAsm-armv7-a-neon.S	/^#define FETCH(_reg, _count)     ldrh    _reg, [rPC, #((_count)*2)]$/;"	d
FETCH	mterp/out/InterpAsm-armv7-a.S	/^#define FETCH(_reg, _count)     ldrh    _reg, [rPC, #((_count)*2)]$/;"	d
FETCH	mterp/out/InterpC-allstubs.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-armv5te-vfp.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-armv5te.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-armv7-a-neon.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-armv7-a.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-portable.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-x86-atom.cpp	269;"	d	file:
FETCH	mterp/out/InterpC-x86.cpp	269;"	d	file:
FETCH_ADVANCE_INST	mterp/armv5te/header.S	/^#define FETCH_ADVANCE_INST(_count) ldrh    rINST, [rPC, #((_count)*2)]!$/;"	d
FETCH_ADVANCE_INST	mterp/out/InterpAsm-armv5te-vfp.S	/^#define FETCH_ADVANCE_INST(_count) ldrh    rINST, [rPC, #((_count)*2)]!$/;"	d
FETCH_ADVANCE_INST	mterp/out/InterpAsm-armv5te.S	/^#define FETCH_ADVANCE_INST(_count) ldrh    rINST, [rPC, #((_count)*2)]!$/;"	d
FETCH_ADVANCE_INST	mterp/out/InterpAsm-armv7-a-neon.S	/^#define FETCH_ADVANCE_INST(_count) ldrh    rINST, [rPC, #((_count)*2)]!$/;"	d
FETCH_ADVANCE_INST	mterp/out/InterpAsm-armv7-a.S	/^#define FETCH_ADVANCE_INST(_count) ldrh    rINST, [rPC, #((_count)*2)]!$/;"	d
FETCH_ADVANCE_INST_RB	mterp/armv5te/header.S	/^#define FETCH_ADVANCE_INST_RB(_reg) ldrh    rINST, [rPC, _reg]!$/;"	d
FETCH_ADVANCE_INST_RB	mterp/out/InterpAsm-armv5te-vfp.S	/^#define FETCH_ADVANCE_INST_RB(_reg) ldrh    rINST, [rPC, _reg]!$/;"	d
FETCH_ADVANCE_INST_RB	mterp/out/InterpAsm-armv5te.S	/^#define FETCH_ADVANCE_INST_RB(_reg) ldrh    rINST, [rPC, _reg]!$/;"	d
FETCH_ADVANCE_INST_RB	mterp/out/InterpAsm-armv7-a-neon.S	/^#define FETCH_ADVANCE_INST_RB(_reg) ldrh    rINST, [rPC, _reg]!$/;"	d
FETCH_ADVANCE_INST_RB	mterp/out/InterpAsm-armv7-a.S	/^#define FETCH_ADVANCE_INST_RB(_reg) ldrh    rINST, [rPC, _reg]!$/;"	d
FETCH_B	mterp/armv5te/header.S	/^#define FETCH_B(_reg, _count, _byte) ldrb     _reg, [rPC, #((_count)*2+(_byte))]$/;"	d
FETCH_B	mterp/out/InterpAsm-armv5te-vfp.S	/^#define FETCH_B(_reg, _count, _byte) ldrb     _reg, [rPC, #((_count)*2+(_byte))]$/;"	d
FETCH_B	mterp/out/InterpAsm-armv5te.S	/^#define FETCH_B(_reg, _count, _byte) ldrb     _reg, [rPC, #((_count)*2+(_byte))]$/;"	d
FETCH_B	mterp/out/InterpAsm-armv7-a-neon.S	/^#define FETCH_B(_reg, _count, _byte) ldrb     _reg, [rPC, #((_count)*2+(_byte))]$/;"	d
FETCH_B	mterp/out/InterpAsm-armv7-a.S	/^#define FETCH_B(_reg, _count, _byte) ldrb     _reg, [rPC, #((_count)*2+(_byte))]$/;"	d
FETCH_INST	mterp/armv5te/header.S	/^#define FETCH_INST()            ldrh    rINST, [rPC]$/;"	d
FETCH_INST	mterp/out/InterpAsm-armv5te-vfp.S	/^#define FETCH_INST()            ldrh    rINST, [rPC]$/;"	d
FETCH_INST	mterp/out/InterpAsm-armv5te.S	/^#define FETCH_INST()            ldrh    rINST, [rPC]$/;"	d
FETCH_INST	mterp/out/InterpAsm-armv7-a-neon.S	/^#define FETCH_INST()            ldrh    rINST, [rPC]$/;"	d
FETCH_INST	mterp/out/InterpAsm-armv7-a.S	/^#define FETCH_INST()            ldrh    rINST, [rPC]$/;"	d
FETCH_S	mterp/armv5te/header.S	/^#define FETCH_S(_reg, _count)   ldrsh   _reg, [rPC, #((_count)*2)]$/;"	d
FETCH_S	mterp/out/InterpAsm-armv5te-vfp.S	/^#define FETCH_S(_reg, _count)   ldrsh   _reg, [rPC, #((_count)*2)]$/;"	d
FETCH_S	mterp/out/InterpAsm-armv5te.S	/^#define FETCH_S(_reg, _count)   ldrsh   _reg, [rPC, #((_count)*2)]$/;"	d
FETCH_S	mterp/out/InterpAsm-armv7-a-neon.S	/^#define FETCH_S(_reg, _count)   ldrsh   _reg, [rPC, #((_count)*2)]$/;"	d
FETCH_S	mterp/out/InterpAsm-armv7-a.S	/^#define FETCH_S(_reg, _count)   ldrsh   _reg, [rPC, #((_count)*2)]$/;"	d
FIELD_ACCESSORS	CheckJni.cpp	1523;"	d	file:
FILL_PATTERN	Profile.cpp	79;"	d	file:
FINISH	mterp/cstubs/stubdefs.cpp	71;"	d	file:
FINISH	mterp/cstubs/stubdefs.cpp	79;"	d	file:
FINISH	mterp/out/InterpC-allstubs.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-allstubs.cpp	449;"	d	file:
FINISH	mterp/out/InterpC-armv5te-vfp.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-armv5te-vfp.cpp	449;"	d	file:
FINISH	mterp/out/InterpC-armv5te.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-armv5te.cpp	449;"	d	file:
FINISH	mterp/out/InterpC-armv7-a-neon.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-armv7-a-neon.cpp	449;"	d	file:
FINISH	mterp/out/InterpC-armv7-a.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-armv7-a.cpp	449;"	d	file:
FINISH	mterp/out/InterpC-portable.cpp	407;"	d	file:
FINISH	mterp/out/InterpC-x86-atom.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-x86-atom.cpp	449;"	d	file:
FINISH	mterp/out/InterpC-x86.cpp	441;"	d	file:
FINISH	mterp/out/InterpC-x86.cpp	449;"	d	file:
FINISH	mterp/portable/stubdefs.cpp	37;"	d	file:
FINISH_BKPT	mterp/out/InterpC-portable.cpp	415;"	d	file:
FINISH_BKPT	mterp/portable/stubdefs.cpp	45;"	d	file:
FIRST_SLEEP	Thread.cpp	2421;"	d	file:
FPREG	compiler/codegen/arm/ArmLIR.h	70;"	d
FPTemps	compiler/codegen/arm/ArmLIR.h	/^    RegisterInfo *FPTemps;$/;"	m	struct:RegisterPool
FPTemps	compiler/codegen/x86/X86LIR.h	/^    RegisterInfo *FPTemps;$/;"	m	struct:RegisterPool
FP_ADJ	arch/arm/CallEABI.S	/^FP_ADJ = 4                              @ fp is initial sp +4$/;"	d
FP_DOUBLE	compiler/codegen/arm/ArmLIR.h	67;"	d
FP_FROM_SAVEAREA	interp/Stack.h	157;"	d
FP_REG_MASK	compiler/codegen/arm/ArmLIR.h	83;"	d
FP_REG_OFFSET	compiler/codegen/arm/ArmLIR.h	65;"	d
FP_REG_OFFSET	compiler/codegen/x86/X86LIR.h	126;"	d
FP_STACK_OFFSET	arch/arm/CallEABI.S	/^FP_STACK_OFFSET = (SAVED_REG_COUNT-1) * 4 @ offset between fp and post-save sp$/;"	d
FRACTIONAL_MB	alloc/HeapInternal.h	92;"	d
FRACTIONAL_PCT	alloc/HeapInternal.h	94;"	d
FRAME_SIZE	mterp/out/InterpAsm-x86.S	/^#define FRAME_SIZE     76$/;"	d
FRAME_SIZE	mterp/x86/header.S	/^#define FRAME_SIZE     76$/;"	d
FatalError	Jni.cpp	/^static void FatalError(JNIEnv* env, const char* msg) {$/;"	f	file:
Field	oo/Object.h	/^struct Field {$/;"	s
FieldId	jdwp/Jdwp.h	/^typedef u4 FieldId;     \/* static or instance field *\/$/;"	t
FindClass	Jni.cpp	/^static jclass FindClass(JNIEnv* env, const char* name) {$/;"	f	file:
Float_floatToIntBits	native/java_lang_Float.cpp	/^static void Float_floatToIntBits(const u4* args, JValue* pResult)$/;"	f	file:
Float_floatToRawIntBits	native/java_lang_Float.cpp	/^static void Float_floatToRawIntBits(const u4* args, JValue* pResult)$/;"	f	file:
Float_intBitsToFloat	native/java_lang_Float.cpp	/^static void Float_intBitsToFloat(const u4* args, JValue* pResult)$/;"	f	file:
FrameId	jdwp/Jdwp.h	/^typedef u8 FrameId;     \/* short-lived stack frame ID *\/$/;"	t
FromReflectedField	Jni.cpp	/^static jfieldID FromReflectedField(JNIEnv* env, jobject jfield) {$/;"	f	file:
FromReflectedMethod	Jni.cpp	/^static jmethodID FromReflectedMethod(JNIEnv* env, jobject jmethod) {$/;"	f	file:
GAV_FAILED	reflect/Annotation.cpp	1128;"	d	file:
GC_BEFORE_OOM	alloc/Heap.cpp	/^const GcSpec *GC_BEFORE_OOM = &kGcBeforeOomSpec;$/;"	v
GC_CARD_CLEAN	alloc/CardTable.h	28;"	d
GC_CARD_DIRTY	alloc/CardTable.h	29;"	d
GC_CARD_SHIFT	alloc/CardTable.h	26;"	d
GC_CARD_SIZE	alloc/CardTable.h	27;"	d
GC_CONCURRENT	alloc/Heap.cpp	/^const GcSpec *GC_CONCURRENT = &kGcConcurrentSpec;$/;"	v
GC_EXPLICIT	alloc/Heap.cpp	/^const GcSpec *GC_EXPLICIT = &kGcExplicitSpec;$/;"	v
GC_FOR_MALLOC	alloc/Heap.cpp	/^const GcSpec *GC_FOR_MALLOC = &kGcForMallocSpec;$/;"	v
GEN	analysis/Liveness.cpp	/^static inline void GEN(BitVector* workBits, u4 regIndex)$/;"	f	file:
GENW	analysis/Liveness.cpp	/^static inline void GENW(BitVector* workBits, u4 regIndex)$/;"	f	file:
GET_ARG_LONG	Native.h	86;"	d
GET_CLASS_FLAG_GROUP	oo/Object.h	101;"	d
GET_ELEM_N	compiler/CompilerUtility.h	51;"	d
GET_INST_OPCODE	mterp/armv5te/header.S	/^#define GET_INST_OPCODE(_reg)   and     _reg, rINST, #255$/;"	d
GET_INST_OPCODE	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GET_INST_OPCODE(_reg)   and     _reg, rINST, #255$/;"	d
GET_INST_OPCODE	mterp/out/InterpAsm-armv5te.S	/^#define GET_INST_OPCODE(_reg)   and     _reg, rINST, #255$/;"	d
GET_INST_OPCODE	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GET_INST_OPCODE(_reg)   and     _reg, rINST, #255$/;"	d
GET_INST_OPCODE	mterp/out/InterpAsm-armv7-a.S	/^#define GET_INST_OPCODE(_reg)   and     _reg, rINST, #255$/;"	d
GET_METHOD_FLAG_GROUP	oo/Object.h	124;"	d
GET_OPCODE	interp/Interp.h	34;"	d
GET_PREFETCHED_OPCODE	mterp/armv5te/header.S	/^#define GET_PREFETCHED_OPCODE(_oreg, _ireg)   and     _oreg, _ireg, #255$/;"	d
GET_PREFETCHED_OPCODE	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GET_PREFETCHED_OPCODE(_oreg, _ireg)   and     _oreg, _ireg, #255$/;"	d
GET_PREFETCHED_OPCODE	mterp/out/InterpAsm-armv5te.S	/^#define GET_PREFETCHED_OPCODE(_oreg, _ireg)   and     _oreg, _ireg, #255$/;"	d
GET_PREFETCHED_OPCODE	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GET_PREFETCHED_OPCODE(_oreg, _ireg)   and     _oreg, _ireg, #255$/;"	d
GET_PREFETCHED_OPCODE	mterp/out/InterpAsm-armv7-a.S	/^#define GET_PREFETCHED_OPCODE(_oreg, _ireg)   and     _oreg, _ireg, #255$/;"	d
GET_PRIMITIVE_ARRAY_ELEMENTS	CheckJni.cpp	1804;"	d	file:
GET_PRIMITIVE_ARRAY_ELEMENTS	Jni.cpp	2351;"	d	file:
GET_PRIMITIVE_ARRAY_REGION	CheckJni.cpp	1843;"	d	file:
GET_PRIMITIVE_ARRAY_REGION	Jni.cpp	2396;"	d	file:
GET_REGISTER	mterp/c/header.cpp	212;"	d	file:
GET_REGISTER	mterp/c/header.cpp	241;"	d	file:
GET_REGISTER	mterp/out/InterpC-allstubs.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-allstubs.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv5te-vfp.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv5te-vfp.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv5te.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv5te.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv7-a-neon.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv7-a-neon.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv7-a.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-armv7-a.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-portable.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-portable.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-x86-atom.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-x86-atom.cpp	248;"	d	file:
GET_REGISTER	mterp/out/InterpC-x86.cpp	219;"	d	file:
GET_REGISTER	mterp/out/InterpC-x86.cpp	248;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/c/header.cpp	218;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/c/header.cpp	243;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-allstubs.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-allstubs.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te-vfp.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te-vfp.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a-neon.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a-neon.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-portable.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-portable.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86-atom.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86-atom.cpp	250;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86.cpp	225;"	d	file:
GET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86.cpp	250;"	d	file:
GET_REGISTER_DOUBLE	mterp/c/header.cpp	234;"	d	file:
GET_REGISTER_DOUBLE	mterp/c/header.cpp	251;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-allstubs.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-allstubs.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te-vfp.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te-vfp.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a-neon.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a-neon.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-portable.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-portable.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-x86-atom.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-x86-atom.cpp	258;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-x86.cpp	241;"	d	file:
GET_REGISTER_DOUBLE	mterp/out/InterpC-x86.cpp	258;"	d	file:
GET_REGISTER_FLOAT	mterp/c/header.cpp	228;"	d	file:
GET_REGISTER_FLOAT	mterp/c/header.cpp	249;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-allstubs.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-allstubs.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv5te-vfp.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv5te-vfp.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv5te.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv5te.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a-neon.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a-neon.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-portable.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-portable.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-x86-atom.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-x86-atom.cpp	256;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-x86.cpp	235;"	d	file:
GET_REGISTER_FLOAT	mterp/out/InterpC-x86.cpp	256;"	d	file:
GET_REGISTER_INT	mterp/c/header.cpp	220;"	d	file:
GET_REGISTER_INT	mterp/c/header.cpp	245;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-allstubs.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-allstubs.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv5te-vfp.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv5te-vfp.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv5te.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv5te.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv7-a-neon.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv7-a-neon.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv7-a.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-armv7-a.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-portable.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-portable.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-x86-atom.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-x86-atom.cpp	252;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-x86.cpp	227;"	d	file:
GET_REGISTER_INT	mterp/out/InterpC-x86.cpp	252;"	d	file:
GET_REGISTER_WIDE	mterp/c/header.cpp	222;"	d	file:
GET_REGISTER_WIDE	mterp/c/header.cpp	247;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-allstubs.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-allstubs.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv5te-vfp.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv5te-vfp.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv5te.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv5te.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv7-a-neon.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv7-a-neon.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv7-a.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-armv7-a.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-portable.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-portable.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-x86-atom.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-x86-atom.cpp	254;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-x86.cpp	229;"	d	file:
GET_REGISTER_WIDE	mterp/out/InterpC-x86.cpp	254;"	d	file:
GET_STATIC_TYPE_FIELD	Jni.cpp	1749;"	d	file:
GET_TYPE_FIELD	Jni.cpp	1825;"	d	file:
GET_VREG	mterp/armv5te/header.S	/^#define GET_VREG(_reg, _vreg)   ldr     _reg, [rFP, _vreg, lsl #2]$/;"	d
GET_VREG	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GET_VREG(_reg, _vreg)   ldr     _reg, [rFP, _vreg, lsl #2]$/;"	d
GET_VREG	mterp/out/InterpAsm-armv5te.S	/^#define GET_VREG(_reg, _vreg)   ldr     _reg, [rFP, _vreg, lsl #2]$/;"	d
GET_VREG	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GET_VREG(_reg, _vreg)   ldr     _reg, [rFP, _vreg, lsl #2]$/;"	d
GET_VREG	mterp/out/InterpAsm-armv7-a.S	/^#define GET_VREG(_reg, _vreg)   ldr     _reg, [rFP, _vreg, lsl #2]$/;"	d
GOTO_OPCODE	mterp/armv5te/header.S	/^#define GOTO_OPCODE(_reg)       add     pc, rIBASE, _reg, lsl #${handler_size_bits}$/;"	d
GOTO_OPCODE	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GOTO_OPCODE(_reg)       add     pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE	mterp/out/InterpAsm-armv5te.S	/^#define GOTO_OPCODE(_reg)       add     pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GOTO_OPCODE(_reg)       add     pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE	mterp/out/InterpAsm-armv7-a.S	/^#define GOTO_OPCODE(_reg)       add     pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_BASE	mterp/armv5te/header.S	/^#define GOTO_OPCODE_BASE(_base,_reg)  add     pc, _base, _reg, lsl #${handler_size_bits}$/;"	d
GOTO_OPCODE_BASE	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GOTO_OPCODE_BASE(_base,_reg)  add     pc, _base, _reg, lsl #6$/;"	d
GOTO_OPCODE_BASE	mterp/out/InterpAsm-armv5te.S	/^#define GOTO_OPCODE_BASE(_base,_reg)  add     pc, _base, _reg, lsl #6$/;"	d
GOTO_OPCODE_BASE	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GOTO_OPCODE_BASE(_base,_reg)  add     pc, _base, _reg, lsl #6$/;"	d
GOTO_OPCODE_BASE	mterp/out/InterpAsm-armv7-a.S	/^#define GOTO_OPCODE_BASE(_base,_reg)  add     pc, _base, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFEQ	mterp/armv5te/header.S	/^#define GOTO_OPCODE_IFEQ(_reg)  addeq   pc, rIBASE, _reg, lsl #${handler_size_bits}$/;"	d
GOTO_OPCODE_IFEQ	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GOTO_OPCODE_IFEQ(_reg)  addeq   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFEQ	mterp/out/InterpAsm-armv5te.S	/^#define GOTO_OPCODE_IFEQ(_reg)  addeq   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFEQ	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GOTO_OPCODE_IFEQ(_reg)  addeq   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFEQ	mterp/out/InterpAsm-armv7-a.S	/^#define GOTO_OPCODE_IFEQ(_reg)  addeq   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFNE	mterp/armv5te/header.S	/^#define GOTO_OPCODE_IFNE(_reg)  addne   pc, rIBASE, _reg, lsl #${handler_size_bits}$/;"	d
GOTO_OPCODE_IFNE	mterp/out/InterpAsm-armv5te-vfp.S	/^#define GOTO_OPCODE_IFNE(_reg)  addne   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFNE	mterp/out/InterpAsm-armv5te.S	/^#define GOTO_OPCODE_IFNE(_reg)  addne   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFNE	mterp/out/InterpAsm-armv7-a-neon.S	/^#define GOTO_OPCODE_IFNE(_reg)  addne   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_OPCODE_IFNE	mterp/out/InterpAsm-armv7-a.S	/^#define GOTO_OPCODE_IFNE(_reg)  addne   pc, rIBASE, _reg, lsl #6$/;"	d
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(exceptionThrown)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(filledNewArray, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeDirect, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeInterface, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeMethod, bool methodCallRange, const Method* _methodToCall,$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeSuper, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeSuperQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeVirtual, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(invokeVirtualQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/c/gotoTargets.cpp	/^GOTO_TARGET(returnFromMethod)$/;"	f
GOTO_TARGET	mterp/cstubs/stubdefs.cpp	10;"	d	file:
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(exceptionThrown)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(filledNewArray, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeDirect, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeInterface, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeMethod, bool methodCallRange, const Method* _methodToCall,$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeSuper, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeSuperQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeVirtual, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(invokeVirtualQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET(returnFromMethod)$/;"	f
GOTO_TARGET	mterp/out/InterpC-allstubs.cpp	380;"	d	file:
GOTO_TARGET	mterp/out/InterpC-armv5te-vfp.cpp	380;"	d	file:
GOTO_TARGET	mterp/out/InterpC-armv5te.cpp	380;"	d	file:
GOTO_TARGET	mterp/out/InterpC-armv7-a-neon.cpp	380;"	d	file:
GOTO_TARGET	mterp/out/InterpC-armv7-a.cpp	380;"	d	file:
GOTO_TARGET	mterp/out/InterpC-portable.cpp	378;"	d	file:
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(exceptionThrown)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(filledNewArray, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeDirect, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeInterface, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeMethod, bool methodCallRange, const Method* _methodToCall,$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeSuper, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeSuperQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeVirtual, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(invokeVirtualQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET(returnFromMethod)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86-atom.cpp	380;"	d	file:
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(exceptionThrown)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(filledNewArray, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeDirect, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeInterface, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeMethod, bool methodCallRange, const Method* _methodToCall,$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeSuper, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeSuperQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeVirtual, bool methodCallRange, bool)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(invokeVirtualQuick, bool methodCallRange)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET(returnFromMethod)$/;"	f
GOTO_TARGET	mterp/out/InterpC-x86.cpp	380;"	d	file:
GOTO_TARGET	mterp/portable/stubdefs.cpp	8;"	d	file:
GOTO_TARGET_DECL	mterp/cstubs/stubdefs.cpp	6;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-allstubs.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-armv5te-vfp.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-armv5te.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-armv7-a-neon.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-armv7-a.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-portable.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-x86-atom.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/out/InterpC-x86.cpp	376;"	d	file:
GOTO_TARGET_DECL	mterp/portable/stubdefs.cpp	6;"	d	file:
GOTO_TARGET_END	mterp/cstubs/stubdefs.cpp	19;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-allstubs.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-armv5te-vfp.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-armv5te.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-armv7-a-neon.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-armv7-a.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-portable.cpp	380;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-x86-atom.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/out/InterpC-x86.cpp	389;"	d	file:
GOTO_TARGET_END	mterp/portable/stubdefs.cpp	10;"	d	file:
GOTO_bail	mterp/cstubs/stubdefs.cpp	120;"	d	file:
GOTO_bail	mterp/out/InterpC-allstubs.cpp	490;"	d	file:
GOTO_bail	mterp/out/InterpC-armv5te-vfp.cpp	490;"	d	file:
GOTO_bail	mterp/out/InterpC-armv5te.cpp	490;"	d	file:
GOTO_bail	mterp/out/InterpC-armv7-a-neon.cpp	490;"	d	file:
GOTO_bail	mterp/out/InterpC-armv7-a.cpp	490;"	d	file:
GOTO_bail	mterp/out/InterpC-portable.cpp	439;"	d	file:
GOTO_bail	mterp/out/InterpC-x86-atom.cpp	490;"	d	file:
GOTO_bail	mterp/out/InterpC-x86.cpp	490;"	d	file:
GOTO_bail	mterp/portable/stubdefs.cpp	69;"	d	file:
GOTO_exceptionThrown	mterp/cstubs/stubdefs.cpp	92;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-allstubs.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-armv5te-vfp.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-armv5te.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-armv7-a-neon.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-armv7-a.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-portable.cpp	426;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-x86-atom.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/out/InterpC-x86.cpp	462;"	d	file:
GOTO_exceptionThrown	mterp/portable/stubdefs.cpp	56;"	d	file:
GOTO_invoke	mterp/cstubs/stubdefs.cpp	104;"	d	file:
GOTO_invoke	mterp/out/InterpC-allstubs.cpp	474;"	d	file:
GOTO_invoke	mterp/out/InterpC-armv5te-vfp.cpp	474;"	d	file:
GOTO_invoke	mterp/out/InterpC-armv5te.cpp	474;"	d	file:
GOTO_invoke	mterp/out/InterpC-armv7-a-neon.cpp	474;"	d	file:
GOTO_invoke	mterp/out/InterpC-armv7-a.cpp	474;"	d	file:
GOTO_invoke	mterp/out/InterpC-portable.cpp	430;"	d	file:
GOTO_invoke	mterp/out/InterpC-x86-atom.cpp	474;"	d	file:
GOTO_invoke	mterp/out/InterpC-x86.cpp	474;"	d	file:
GOTO_invoke	mterp/portable/stubdefs.cpp	60;"	d	file:
GOTO_invokeMethod	mterp/cstubs/stubdefs.cpp	110;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-allstubs.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-armv5te-vfp.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-armv5te.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-armv7-a-neon.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-armv7-a.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-portable.cpp	437;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-x86-atom.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/out/InterpC-x86.cpp	480;"	d	file:
GOTO_invokeMethod	mterp/portable/stubdefs.cpp	67;"	d	file:
GOTO_returnFromMethod	mterp/cstubs/stubdefs.cpp	98;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-allstubs.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-armv5te-vfp.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-armv5te.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-armv7-a-neon.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-armv7-a.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-portable.cpp	428;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-x86-atom.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/out/InterpC-x86.cpp	468;"	d	file:
GOTO_returnFromMethod	mterp/portable/stubdefs.cpp	58;"	d	file:
GcHeap	alloc/HeapInternal.h	/^struct GcHeap {$/;"	s
GcMarkContext	alloc/MarkSweep.h	/^struct GcMarkContext {$/;"	s
GcMarkStack	alloc/MarkSweep.h	/^struct GcMarkStack {$/;"	s
GcSpec	alloc/Heap.h	/^struct GcSpec {$/;"	s
Get	shadowlib/Map.h	/^		V& Get(const K &key){$/;"	f	class:Map
GetArrayLength	Jni.cpp	/^static jsize GetArrayLength(JNIEnv* env, jarray jarr) {$/;"	f	file:
GetCurrentSize	shadowlib/ReProtocol.h	/^		int GetCurrentSize(){$/;"	f	class:ReProtocol
GetData	shadowlib/ReQueue.h	/^		virtual void GetData(char* &data, int &length){$/;"	f	class:BaseQueue
GetDirectBufferAddress	Jni.cpp	/^static void* GetDirectBufferAddress(JNIEnv* env, jobject jbuf) {$/;"	f	file:
GetDirectBufferCapacity	Jni.cpp	/^static jlong GetDirectBufferCapacity(JNIEnv* env, jobject jbuf) {$/;"	f	file:
GetEnv	Jni.cpp	/^static jint GetEnv(JavaVM* vm, void** env, jint version) {$/;"	f	file:
GetFieldID	Jni.cpp	/^static jfieldID GetFieldID(JNIEnv* env, jclass jclazz, const char* name, const char* sig) {$/;"	f	file:
GetJavaVM	Jni.cpp	/^static jint GetJavaVM(JNIEnv* env, JavaVM** vm) {$/;"	f	file:
GetLock	shadowlib/Lock.h	/^		pthread_mutex_t* GetLock(lock_id_type lockid){$/;"	f	class:LockBuffer
GetMethodID	Jni.cpp	/^static jmethodID GetMethodID(JNIEnv* env, jclass jclazz, const char* name, const char* sig) {$/;"	f	file:
GetObjectArrayElement	Jni.cpp	/^static jobject GetObjectArrayElement(JNIEnv* env, jobjectArray jarr, jsize index) {$/;"	f	file:
GetObjectClass	Jni.cpp	/^static jclass GetObjectClass(JNIEnv* env, jobject jobj) {$/;"	f	file:
GetObjectId	ShadowAPI.cpp	/^long GetObjectId(Thread* self, jobject jo){$/;"	f
GetObjectRefType	Jni.cpp	/^static jobjectRefType GetObjectRefType(JNIEnv* env, jobject jobj) {$/;"	f	file:
GetOrderingId	shadowlib/ReProtocol.h	/^		ordering_id_type GetOrderingId(thread_id_type tid){$/;"	f	class:ReProtocol
GetPrimitiveArrayCritical	Jni.cpp	/^static void* GetPrimitiveArrayCritical(JNIEnv* env, jarray jarr, jboolean* isCopy) {$/;"	f	file:
GetStaticFieldID	Jni.cpp	/^static jfieldID GetStaticFieldID(JNIEnv* env, jclass jclazz, const char* name, const char* sig) {$/;"	f	file:
GetStaticMethodID	Jni.cpp	/^static jmethodID GetStaticMethodID(JNIEnv* env, jclass jclazz, const char* name, const char* sig) {$/;"	f	file:
GetStringChars	Jni.cpp	/^static const jchar* GetStringChars(JNIEnv* env, jstring jstr, jboolean* isCopy) {$/;"	f	file:
GetStringCritical	Jni.cpp	/^static const jchar* GetStringCritical(JNIEnv* env, jstring jstr, jboolean* isCopy) {$/;"	f	file:
GetStringLength	Jni.cpp	/^static jsize GetStringLength(JNIEnv* env, jstring jstr) {$/;"	f	file:
GetStringRegion	Jni.cpp	/^static void GetStringRegion(JNIEnv* env, jstring jstr, jsize start, jsize len, jchar* buf) {$/;"	f	file:
GetStringUTFChars	Jni.cpp	/^static const char* GetStringUTFChars(JNIEnv* env, jstring jstr, jboolean* isCopy) {$/;"	f	file:
GetStringUTFLength	Jni.cpp	/^static jsize GetStringUTFLength(JNIEnv* env, jstring jstr) {$/;"	f	file:
GetStringUTFRegion	Jni.cpp	/^static void GetStringUTFRegion(JNIEnv* env, jstring jstr, jsize start, jsize len, char* buf) {$/;"	f	file:
GetSuperclass	Jni.cpp	/^static jclass GetSuperclass(JNIEnv* env, jclass jclazz) {$/;"	f	file:
GetVersion	Jni.cpp	/^static jint GetVersion(JNIEnv* env) {$/;"	f	file:
GrowableList	compiler/CompilerUtility.h	/^typedef struct GrowableList {$/;"	s
GrowableList	compiler/CompilerUtility.h	/^} GrowableList;$/;"	t	typeref:struct:GrowableList
GrowableListIterator	compiler/CompilerUtility.h	/^typedef struct GrowableListIterator {$/;"	s
GrowableListIterator	compiler/CompilerUtility.h	/^} GrowableListIterator;$/;"	t	typeref:struct:GrowableListIterator
GuardedCopy	CheckJni.cpp	/^struct GuardedCopy {$/;"	s	file:
H	mterp/cstubs/entry.cpp	4;"	d	file:
H	mterp/cstubs/entry.cpp	5;"	d	file:
H	mterp/cstubs/entry.cpp	8;"	d	file:
H	mterp/cstubs/entry.cpp	9;"	d	file:
H	mterp/out/InterpC-allstubs.cpp	3017;"	d	file:
H	mterp/out/InterpC-allstubs.cpp	3018;"	d	file:
H	mterp/out/InterpC-allstubs.cpp	3021;"	d	file:
H	mterp/out/InterpC-allstubs.cpp	3022;"	d	file:
H	mterp/out/InterpC-portable.cpp	405;"	d	file:
H	mterp/portable/stubdefs.cpp	35;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/c/opcommon.cpp	36;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-allstubs.cpp	542;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-armv5te-vfp.cpp	542;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-armv5te.cpp	542;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-armv7-a-neon.cpp	542;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-armv7-a.cpp	542;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-portable.cpp	490;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-x86-atom.cpp	542;"	d	file:
HANDLE_FLOAT_TO_INT	mterp/out/InterpC-x86.cpp	542;"	d	file:
HANDLE_IGET_X	mterp/c/opcommon.cpp	507;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-allstubs.cpp	1013;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-armv5te-vfp.cpp	1013;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-armv5te.cpp	1013;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-armv7-a-neon.cpp	1013;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-armv7-a.cpp	1013;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-portable.cpp	961;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-x86-atom.cpp	1013;"	d	file:
HANDLE_IGET_X	mterp/out/InterpC-x86.cpp	1013;"	d	file:
HANDLE_IGET_X_QUICK	mterp/c/opcommon.cpp	533;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-allstubs.cpp	1039;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-armv5te-vfp.cpp	1039;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-armv5te.cpp	1039;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-armv7-a-neon.cpp	1039;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-armv7-a.cpp	1039;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-portable.cpp	987;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-x86-atom.cpp	1039;"	d	file:
HANDLE_IGET_X_QUICK	mterp/out/InterpC-x86.cpp	1039;"	d	file:
HANDLE_INT_TO_SMALL	mterp/c/opcommon.cpp	62;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-allstubs.cpp	568;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-armv5te-vfp.cpp	568;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-armv5te.cpp	568;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-armv7-a-neon.cpp	568;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-armv7-a.cpp	568;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-portable.cpp	516;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-x86-atom.cpp	568;"	d	file:
HANDLE_INT_TO_SMALL	mterp/out/InterpC-x86.cpp	568;"	d	file:
HANDLE_IPUT_X	mterp/c/opcommon.cpp	551;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-allstubs.cpp	1057;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-armv5te-vfp.cpp	1057;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-armv5te.cpp	1057;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-armv7-a-neon.cpp	1057;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-armv7-a.cpp	1057;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-portable.cpp	1005;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-x86-atom.cpp	1057;"	d	file:
HANDLE_IPUT_X	mterp/out/InterpC-x86.cpp	1057;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/c/opcommon.cpp	577;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-allstubs.cpp	1083;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-armv5te-vfp.cpp	1083;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-armv5te.cpp	1083;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-armv7-a-neon.cpp	1083;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-armv7-a.cpp	1083;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-portable.cpp	1031;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-x86-atom.cpp	1083;"	d	file:
HANDLE_IPUT_X_QUICK	mterp/out/InterpC-x86.cpp	1083;"	d	file:
HANDLE_NUMCONV	mterp/c/opcommon.cpp	27;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-allstubs.cpp	533;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-armv5te-vfp.cpp	533;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-armv5te.cpp	533;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-armv7-a-neon.cpp	533;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-armv7-a.cpp	533;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-portable.cpp	481;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-x86-atom.cpp	533;"	d	file:
HANDLE_NUMCONV	mterp/out/InterpC-x86.cpp	533;"	d	file:
HANDLE_OPCODE	mterp/c/OP_APUT_OBJECT.cpp	/^HANDLE_OPCODE(OP_APUT_OBJECT \/*vAA, vBB, vCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_ARRAY_LENGTH.cpp	/^HANDLE_OPCODE(OP_ARRAY_LENGTH \/*vA, vB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_BREAKPOINT.cpp	/^HANDLE_OPCODE(OP_BREAKPOINT)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CHECK_CAST.cpp	/^HANDLE_OPCODE(OP_CHECK_CAST \/*vAA, class@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST.cpp	/^HANDLE_OPCODE(OP_CONST \/*vAA, #+BBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST_4.cpp	/^HANDLE_OPCODE(OP_CONST_4 \/*vA, #+B*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST_CLASS.cpp	/^HANDLE_OPCODE(OP_CONST_CLASS \/*vAA, class@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST_STRING.cpp	/^HANDLE_OPCODE(OP_CONST_STRING \/*vAA, string@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST_STRING_JUMBO.cpp	/^HANDLE_OPCODE(OP_CONST_STRING_JUMBO \/*vAA, string@BBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST_WIDE.cpp	/^HANDLE_OPCODE(OP_CONST_WIDE \/*vAA, #+BBBBBBBBBBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_CONST_WIDE_32.cpp	/^HANDLE_OPCODE(OP_CONST_WIDE_32 \/*vAA, #+BBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_EXECUTE_INLINE.cpp	/^HANDLE_OPCODE(OP_EXECUTE_INLINE \/*vB, {vD, vE, vF, vG}, inline@CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_EXECUTE_INLINE_RANGE.cpp	/^HANDLE_OPCODE(OP_EXECUTE_INLINE_RANGE \/*{vCCCC..v(CCCC+AA-1)}, inline@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_FILL_ARRAY_DATA.cpp	/^HANDLE_OPCODE(OP_FILL_ARRAY_DATA)   \/*vAA, +BBBBBBBB*\/$/;"	f
HANDLE_OPCODE	mterp/c/OP_GOTO_16.cpp	/^HANDLE_OPCODE(OP_GOTO_16 \/*+AAAA*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_GOTO_32.cpp	/^HANDLE_OPCODE(OP_GOTO_32 \/*+AAAAAAAA*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_INSTANCE_OF.cpp	/^HANDLE_OPCODE(OP_INSTANCE_OF \/*vA, vB, class@CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_INVOKE_OBJECT_INIT_RANGE.cpp	/^HANDLE_OPCODE(OP_INVOKE_OBJECT_INIT_RANGE \/*{vCCCC..v(CCCC+AA-1)}, meth@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_MONITOR_ENTER.cpp	/^HANDLE_OPCODE(OP_MONITOR_ENTER \/*vAA*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_MONITOR_EXIT.cpp	/^HANDLE_OPCODE(OP_MONITOR_EXIT \/*vAA*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_NEW_ARRAY.cpp	/^HANDLE_OPCODE(OP_NEW_ARRAY \/*vA, vB, class@CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_NEW_INSTANCE.cpp	/^HANDLE_OPCODE(OP_NEW_INSTANCE \/*vAA, class@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_PACKED_SWITCH.cpp	/^HANDLE_OPCODE(OP_PACKED_SWITCH \/*vAA, +BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_REM_DOUBLE.cpp	/^HANDLE_OPCODE(OP_REM_DOUBLE \/*vAA, vBB, vCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_REM_FLOAT.cpp	/^HANDLE_OPCODE(OP_REM_FLOAT \/*vAA, vBB, vCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_RSUB_INT.cpp	/^HANDLE_OPCODE(OP_RSUB_INT \/*vA, vB, #+CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_RSUB_INT_LIT8.cpp	/^HANDLE_OPCODE(OP_RSUB_INT_LIT8 \/*vAA, vBB, #+CC*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_SPARSE_SWITCH.cpp	/^HANDLE_OPCODE(OP_SPARSE_SWITCH \/*vAA, +BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/c/OP_THROW.cpp	/^HANDLE_OPCODE(OP_THROW \/*vAA*\/)$/;"	f
HANDLE_OPCODE	mterp/cstubs/stubdefs.cpp	55;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_APUT_OBJECT \/*vAA, vBB, vCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_ARRAY_LENGTH \/*vA, vB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_BREAKPOINT)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CHECK_CAST \/*vAA, class@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST \/*vAA, #+BBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST_4 \/*vA, #+B*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST_CLASS \/*vAA, class@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST_STRING \/*vAA, string@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST_STRING_JUMBO \/*vAA, string@BBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST_WIDE \/*vAA, #+BBBBBBBBBBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_CONST_WIDE_32 \/*vAA, #+BBBBBBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_EXECUTE_INLINE \/*vB, {vD, vE, vF, vG}, inline@CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_EXECUTE_INLINE_RANGE \/*{vCCCC..v(CCCC+AA-1)}, inline@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_FILL_ARRAY_DATA)   \/*vAA, +BBBBBBBB*\/$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_GOTO_16 \/*+AAAA*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_GOTO_32 \/*+AAAAAAAA*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_INSTANCE_OF \/*vA, vB, class@CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_INVOKE_OBJECT_INIT_RANGE \/*{vCCCC..v(CCCC+AA-1)}, meth@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_MONITOR_ENTER \/*vAA*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_MONITOR_EXIT \/*vAA*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_NEW_ARRAY \/*vA, vB, class@CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_NEW_INSTANCE \/*vAA, class@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_PACKED_SWITCH \/*vAA, +BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_REM_DOUBLE \/*vAA, vBB, vCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_REM_FLOAT \/*vAA, vBB, vCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_RSUB_INT \/*vA, vB, #+CCCC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_RSUB_INT_LIT8 \/*vAA, vBB, #+CC*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_SPARSE_SWITCH \/*vAA, +BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	/^HANDLE_OPCODE(OP_THROW \/*vAA*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-allstubs.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-armv5te-vfp.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-armv5te.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-armv7-a-neon.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-armv7-a.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-portable.cpp	406;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-x86-atom.cpp	/^HANDLE_OPCODE(OP_BREAKPOINT)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-x86-atom.cpp	/^HANDLE_OPCODE(OP_EXECUTE_INLINE_RANGE \/*{vCCCC..v(CCCC+AA-1)}, inline@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-x86-atom.cpp	/^HANDLE_OPCODE(OP_INVOKE_OBJECT_INIT_RANGE \/*{vCCCC..v(CCCC+AA-1)}, meth@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-x86-atom.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/out/InterpC-x86.cpp	/^HANDLE_OPCODE(OP_EXECUTE_INLINE_RANGE \/*{vCCCC..v(CCCC+AA-1)}, inline@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-x86.cpp	/^HANDLE_OPCODE(OP_INVOKE_OBJECT_INIT_RANGE \/*{vCCCC..v(CCCC+AA-1)}, meth@BBBB*\/)$/;"	f
HANDLE_OPCODE	mterp/out/InterpC-x86.cpp	425;"	d	file:
HANDLE_OPCODE	mterp/portable/stubdefs.cpp	36;"	d	file:
HANDLE_OP_AGET	mterp/c/opcommon.cpp	440;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-allstubs.cpp	946;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-armv5te-vfp.cpp	946;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-armv5te.cpp	946;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-armv7-a-neon.cpp	946;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-armv7-a.cpp	946;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-portable.cpp	894;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-x86-atom.cpp	946;"	d	file:
HANDLE_OP_AGET	mterp/out/InterpC-x86.cpp	946;"	d	file:
HANDLE_OP_APUT	mterp/c/opcommon.cpp	465;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-allstubs.cpp	971;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-armv5te-vfp.cpp	971;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-armv5te.cpp	971;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-armv7-a-neon.cpp	971;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-armv7-a.cpp	971;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-portable.cpp	919;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-x86-atom.cpp	971;"	d	file:
HANDLE_OP_APUT	mterp/out/InterpC-x86.cpp	971;"	d	file:
HANDLE_OP_CMPX	mterp/c/opcommon.cpp	71;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-allstubs.cpp	577;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-armv5te-vfp.cpp	577;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-armv5te.cpp	577;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-armv7-a-neon.cpp	577;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-armv7-a.cpp	577;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-portable.cpp	525;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-x86-atom.cpp	577;"	d	file:
HANDLE_OP_CMPX	mterp/out/InterpC-x86.cpp	577;"	d	file:
HANDLE_OP_IF_XX	mterp/c/opcommon.cpp	97;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-allstubs.cpp	603;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-armv5te-vfp.cpp	603;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-armv5te.cpp	603;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-armv7-a-neon.cpp	603;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-armv7-a.cpp	603;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-portable.cpp	551;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-x86-atom.cpp	603;"	d	file:
HANDLE_OP_IF_XX	mterp/out/InterpC-x86.cpp	603;"	d	file:
HANDLE_OP_IF_XXZ	mterp/c/opcommon.cpp	114;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-allstubs.cpp	620;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-armv5te-vfp.cpp	620;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-armv5te.cpp	620;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-armv7-a-neon.cpp	620;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-armv7-a.cpp	620;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-portable.cpp	568;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-x86-atom.cpp	620;"	d	file:
HANDLE_OP_IF_XXZ	mterp/out/InterpC-x86.cpp	620;"	d	file:
HANDLE_OP_SHX_INT	mterp/c/opcommon.cpp	172;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-allstubs.cpp	678;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-armv5te-vfp.cpp	678;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-armv5te.cpp	678;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-armv7-a-neon.cpp	678;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-armv7-a.cpp	678;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-portable.cpp	626;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-x86-atom.cpp	678;"	d	file:
HANDLE_OP_SHX_INT	mterp/out/InterpC-x86.cpp	678;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/c/opcommon.cpp	295;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-allstubs.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-armv5te-vfp.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-armv5te.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-armv7-a-neon.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-armv7-a.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-portable.cpp	749;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-x86-atom.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_2ADDR	mterp/out/InterpC-x86.cpp	801;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/c/opcommon.cpp	251;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-allstubs.cpp	757;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-armv5te-vfp.cpp	757;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-armv5te.cpp	757;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-armv7-a-neon.cpp	757;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-armv7-a.cpp	757;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-portable.cpp	705;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-x86-atom.cpp	757;"	d	file:
HANDLE_OP_SHX_INT_LIT8	mterp/out/InterpC-x86.cpp	757;"	d	file:
HANDLE_OP_SHX_LONG	mterp/c/opcommon.cpp	340;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-allstubs.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-armv5te-vfp.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-armv5te.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-armv7-a-neon.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-armv7-a.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-portable.cpp	794;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-x86-atom.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG	mterp/out/InterpC-x86.cpp	846;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/c/opcommon.cpp	385;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-allstubs.cpp	891;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-armv5te-vfp.cpp	891;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-armv5te.cpp	891;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-armv7-a-neon.cpp	891;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-armv7-a.cpp	891;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-portable.cpp	839;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-x86-atom.cpp	891;"	d	file:
HANDLE_OP_SHX_LONG_2ADDR	mterp/out/InterpC-x86.cpp	891;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/c/opcommon.cpp	408;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-allstubs.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-armv5te-vfp.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-armv5te.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-armv7-a-neon.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-armv7-a.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-portable.cpp	862;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-x86-atom.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE	mterp/out/InterpC-x86.cpp	914;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/c/opcommon.cpp	431;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-allstubs.cpp	937;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-armv5te-vfp.cpp	937;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-armv5te.cpp	937;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-armv7-a-neon.cpp	937;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-armv7-a.cpp	937;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-portable.cpp	885;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-x86-atom.cpp	937;"	d	file:
HANDLE_OP_X_DOUBLE_2ADDR	mterp/out/InterpC-x86.cpp	937;"	d	file:
HANDLE_OP_X_FLOAT	mterp/c/opcommon.cpp	394;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-allstubs.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-armv5te-vfp.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-armv5te.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-armv7-a-neon.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-armv7-a.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-portable.cpp	848;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-x86-atom.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT	mterp/out/InterpC-x86.cpp	900;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/c/opcommon.cpp	422;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-allstubs.cpp	928;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-armv5te-vfp.cpp	928;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-armv5te.cpp	928;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-armv7-a-neon.cpp	928;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-armv7-a.cpp	928;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-portable.cpp	876;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-x86-atom.cpp	928;"	d	file:
HANDLE_OP_X_FLOAT_2ADDR	mterp/out/InterpC-x86.cpp	928;"	d	file:
HANDLE_OP_X_INT	mterp/c/opcommon.cpp	137;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-allstubs.cpp	643;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-armv5te-vfp.cpp	643;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-armv5te.cpp	643;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-armv7-a-neon.cpp	643;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-armv7-a.cpp	643;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-portable.cpp	591;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-x86-atom.cpp	643;"	d	file:
HANDLE_OP_X_INT	mterp/out/InterpC-x86.cpp	643;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/c/opcommon.cpp	266;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-allstubs.cpp	772;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-armv5te-vfp.cpp	772;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-armv5te.cpp	772;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-armv7-a-neon.cpp	772;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-armv7-a.cpp	772;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-portable.cpp	720;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-x86-atom.cpp	772;"	d	file:
HANDLE_OP_X_INT_2ADDR	mterp/out/InterpC-x86.cpp	772;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/c/opcommon.cpp	186;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-allstubs.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-armv5te-vfp.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-armv5te.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-armv7-a-neon.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-armv7-a.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-portable.cpp	640;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-x86-atom.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT16	mterp/out/InterpC-x86.cpp	692;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/c/opcommon.cpp	217;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-allstubs.cpp	723;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-armv5te-vfp.cpp	723;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-armv5te.cpp	723;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-armv7-a-neon.cpp	723;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-armv7-a.cpp	723;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-portable.cpp	671;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-x86-atom.cpp	723;"	d	file:
HANDLE_OP_X_INT_LIT8	mterp/out/InterpC-x86.cpp	723;"	d	file:
HANDLE_OP_X_LONG	mterp/c/opcommon.cpp	304;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-allstubs.cpp	810;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-armv5te-vfp.cpp	810;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-armv5te.cpp	810;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-armv7-a-neon.cpp	810;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-armv7-a.cpp	810;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-portable.cpp	758;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-x86-atom.cpp	810;"	d	file:
HANDLE_OP_X_LONG	mterp/out/InterpC-x86.cpp	810;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/c/opcommon.cpp	354;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-allstubs.cpp	860;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-armv5te-vfp.cpp	860;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-armv5te.cpp	860;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-armv7-a-neon.cpp	860;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-armv7-a.cpp	860;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-portable.cpp	808;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-x86-atom.cpp	860;"	d	file:
HANDLE_OP_X_LONG_2ADDR	mterp/out/InterpC-x86.cpp	860;"	d	file:
HANDLE_SGET_X	mterp/c/opcommon.cpp	603;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-allstubs.cpp	1109;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-armv5te-vfp.cpp	1109;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-armv5te.cpp	1109;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-armv7-a-neon.cpp	1109;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-armv7-a.cpp	1109;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-portable.cpp	1057;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-x86-atom.cpp	1109;"	d	file:
HANDLE_SGET_X	mterp/out/InterpC-x86.cpp	1109;"	d	file:
HANDLE_SPUT_X	mterp/c/opcommon.cpp	626;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-allstubs.cpp	1132;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-armv5te-vfp.cpp	1132;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-armv5te.cpp	1132;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-armv7-a-neon.cpp	1132;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-armv7-a.cpp	1132;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-portable.cpp	1080;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-x86-atom.cpp	1132;"	d	file:
HANDLE_SPUT_X	mterp/out/InterpC-x86.cpp	1132;"	d	file:
HANDLE_UNOP	mterp/c/opcommon.cpp	129;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-allstubs.cpp	635;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-armv5te-vfp.cpp	635;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-armv5te.cpp	635;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-armv7-a-neon.cpp	635;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-armv7-a.cpp	635;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-portable.cpp	583;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-x86-atom.cpp	635;"	d	file:
HANDLE_UNOP	mterp/out/InterpC-x86.cpp	635;"	d	file:
HASH_TOMBSTONE	Hash.h	66;"	d
HAVE_MEMMOVE_WORDS	native/java_lang_System.cpp	50;"	d	file:
HAVE_POSIX_CLOCKS	test/AtomicTest.cpp	71;"	d	file:
HB_BITS_PER_WORD	alloc/HeapBitmap.h	23;"	d
HB_INDEX_TO_OFFSET	alloc/HeapBitmap.h	31;"	d
HB_OBJECT_ALIGNMENT	alloc/HeapBitmap.h	22;"	d
HB_OFFSET_TO_BYTE_INDEX	alloc/HeapBitmap.h	34;"	d
HB_OFFSET_TO_INDEX	alloc/HeapBitmap.h	29;"	d
HB_OFFSET_TO_MASK	alloc/HeapBitmap.h	40;"	d
HEADER_EXTRA	LinearAlloc.cpp	75;"	d	file:
HEAP_ACCESS_SHADOW	compiler/CompilerIR.h	278;"	d
HEAP_ACCESS_SHADOW	compiler/CompilerIR.h	280;"	d
HEAP_BASE	alloc/TEST/HeapBitmapTest/main.c	12;"	d	file:
HEAP_IDEAL_FREE	alloc/HeapSource.cpp	42;"	d	file:
HEAP_LOG_TAG	alloc/HeapInternal.h	75;"	d
HEAP_MIN_FREE	alloc/HeapSource.cpp	43;"	d	file:
HEAP_SIZE	alloc/TEST/HeapBitmapTest/main.c	13;"	d	file:
HEAP_SOURCE_CHUNK_OVERHEAD	alloc/HeapSource.h	24;"	d
HEAP_SOURCE_MAX_HEAP_COUNT	alloc/HeapSource.h	29;"	d
HEAP_SOURCE_WORST_CHUNK_OVERHEAD	alloc/HeapSource.h	25;"	d
HEAP_SPACE	interp/Jit.h	30;"	d
HEAP_TRIM_IDLE_TIME_MS	alloc/HeapSource.cpp	48;"	d	file:
HEAP_UTILIZATION_MAX	alloc/HeapSource.cpp	40;"	d	file:
HPIF_SIZE	alloc/DdmHeap.cpp	54;"	d	file:
HPIF_WHEN_EVERY_GC	alloc/DdmHeap.cpp	/^    HPIF_WHEN_EVERY_GC = 3$/;"	e	enum:HpifWhen	file:
HPIF_WHEN_NEVER	alloc/DdmHeap.cpp	/^    HPIF_WHEN_NEVER = 0,$/;"	e	enum:HpifWhen	file:
HPIF_WHEN_NEXT_GC	alloc/DdmHeap.cpp	/^    HPIF_WHEN_NEXT_GC = 2,$/;"	e	enum:HpifWhen	file:
HPIF_WHEN_NOW	alloc/DdmHeap.cpp	/^    HPIF_WHEN_NOW = 1,$/;"	e	enum:HpifWhen	file:
HPROF_CLASS_DUMP	hprof/Hprof.h	/^    HPROF_CLASS_DUMP = 0x20,$/;"	e	enum:hprof_heap_tag_t
HPROF_HEAP_APP	hprof/Hprof.h	/^    HPROF_HEAP_APP = 'A'$/;"	e	enum:HprofHeapId
HPROF_HEAP_DEFAULT	hprof/Hprof.h	/^    HPROF_HEAP_DEFAULT = 0,$/;"	e	enum:HprofHeapId
HPROF_HEAP_DUMP_INFO	hprof/Hprof.h	/^    HPROF_HEAP_DUMP_INFO = 0xfe,$/;"	e	enum:hprof_heap_tag_t
HPROF_HEAP_ZYGOTE	hprof/Hprof.h	/^    HPROF_HEAP_ZYGOTE = 'Z',$/;"	e	enum:HprofHeapId
HPROF_ID_SIZE	hprof/Hprof.h	21;"	d
HPROF_INSTANCE_DUMP	hprof/Hprof.h	/^    HPROF_INSTANCE_DUMP = 0x21,$/;"	e	enum:hprof_heap_tag_t
HPROF_MAGIC_STRING	hprof/HprofOutput.cpp	22;"	d	file:
HPROF_NULL_STACK_TRACE	hprof/Hprof.h	27;"	d
HPROF_NULL_THREAD	hprof/Hprof.h	28;"	d
HPROF_OBJECT_ARRAY_DUMP	hprof/Hprof.h	/^    HPROF_OBJECT_ARRAY_DUMP = 0x22,$/;"	e	enum:hprof_heap_tag_t
HPROF_PRIMITIVE_ARRAY_DUMP	hprof/Hprof.h	/^    HPROF_PRIMITIVE_ARRAY_DUMP = 0x23,$/;"	e	enum:hprof_heap_tag_t
HPROF_PRIMITIVE_ARRAY_NODATA_DUMP	hprof/Hprof.h	/^    HPROF_PRIMITIVE_ARRAY_NODATA_DUMP = 0xc3,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_DEBUGGER	hprof/Hprof.h	/^    HPROF_ROOT_DEBUGGER = 0x8b,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_FINALIZING	hprof/Hprof.h	/^    HPROF_ROOT_FINALIZING = 0x8a,  \/* obsolete *\/$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_INTERNED_STRING	hprof/Hprof.h	/^    HPROF_ROOT_INTERNED_STRING = 0x89,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_JAVA_FRAME	hprof/Hprof.h	/^    HPROF_ROOT_JAVA_FRAME = 0x03,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_JNI_GLOBAL	hprof/Hprof.h	/^    HPROF_ROOT_JNI_GLOBAL = 0x01,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_JNI_LOCAL	hprof/Hprof.h	/^    HPROF_ROOT_JNI_LOCAL = 0x02,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_JNI_MONITOR	hprof/Hprof.h	/^    HPROF_ROOT_JNI_MONITOR = 0x8e,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_MONITOR_USED	hprof/Hprof.h	/^    HPROF_ROOT_MONITOR_USED = 0x07,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_NATIVE_STACK	hprof/Hprof.h	/^    HPROF_ROOT_NATIVE_STACK = 0x04,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_REFERENCE_CLEANUP	hprof/Hprof.h	/^    HPROF_ROOT_REFERENCE_CLEANUP = 0x8c,  \/* obsolete *\/$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_STICKY_CLASS	hprof/Hprof.h	/^    HPROF_ROOT_STICKY_CLASS = 0x05,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_THREAD_BLOCK	hprof/Hprof.h	/^    HPROF_ROOT_THREAD_BLOCK = 0x06,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_THREAD_OBJECT	hprof/Hprof.h	/^    HPROF_ROOT_THREAD_OBJECT = 0x08,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_UNKNOWN	hprof/Hprof.h	/^    HPROF_ROOT_UNKNOWN = 0xFF,$/;"	e	enum:hprof_heap_tag_t
HPROF_ROOT_VM_INTERNAL	hprof/Hprof.h	/^    HPROF_ROOT_VM_INTERNAL = 0x8d,$/;"	e	enum:hprof_heap_tag_t
HPROF_TAG_ALLOC_SITES	hprof/Hprof.h	/^    HPROF_TAG_ALLOC_SITES = 0x06,$/;"	e	enum:hprof_tag_t
HPROF_TAG_CONTROL_SETTINGS	hprof/Hprof.h	/^    HPROF_TAG_CONTROL_SETTINGS = 0x0E,$/;"	e	enum:hprof_tag_t
HPROF_TAG_CPU_SAMPLES	hprof/Hprof.h	/^    HPROF_TAG_CPU_SAMPLES = 0x0D,$/;"	e	enum:hprof_tag_t
HPROF_TAG_END_THREAD	hprof/Hprof.h	/^    HPROF_TAG_END_THREAD = 0x0B,$/;"	e	enum:hprof_tag_t
HPROF_TAG_HEAP_DUMP	hprof/Hprof.h	/^    HPROF_TAG_HEAP_DUMP = 0x0C,$/;"	e	enum:hprof_tag_t
HPROF_TAG_HEAP_DUMP_END	hprof/Hprof.h	/^    HPROF_TAG_HEAP_DUMP_END = 0x2C,$/;"	e	enum:hprof_tag_t
HPROF_TAG_HEAP_DUMP_SEGMENT	hprof/Hprof.h	/^    HPROF_TAG_HEAP_DUMP_SEGMENT = 0x1C,$/;"	e	enum:hprof_tag_t
HPROF_TAG_HEAP_SUMMARY	hprof/Hprof.h	/^    HPROF_TAG_HEAP_SUMMARY = 0x07,$/;"	e	enum:hprof_tag_t
HPROF_TAG_LOAD_CLASS	hprof/Hprof.h	/^    HPROF_TAG_LOAD_CLASS = 0x02,$/;"	e	enum:hprof_tag_t
HPROF_TAG_STACK_FRAME	hprof/Hprof.h	/^    HPROF_TAG_STACK_FRAME = 0x04,$/;"	e	enum:hprof_tag_t
HPROF_TAG_STACK_TRACE	hprof/Hprof.h	/^    HPROF_TAG_STACK_TRACE = 0x05,$/;"	e	enum:hprof_tag_t
HPROF_TAG_START_THREAD	hprof/Hprof.h	/^    HPROF_TAG_START_THREAD = 0x0A,$/;"	e	enum:hprof_tag_t
HPROF_TAG_STRING	hprof/Hprof.h	/^    HPROF_TAG_STRING = 0x01,$/;"	e	enum:hprof_tag_t
HPROF_TAG_UNLOAD_CLASS	hprof/Hprof.h	/^    HPROF_TAG_UNLOAD_CLASS = 0x03,$/;"	e	enum:hprof_tag_t
HPROF_TIME	hprof/Hprof.h	26;"	d
HPROF_UNREACHABLE	hprof/Hprof.h	/^    HPROF_UNREACHABLE = 0x90,  \/* obsolete *\/$/;"	e	enum:hprof_heap_tag_t
HPSG_PARTIAL	alloc/DdmHeap.cpp	171;"	d	file:
HPSG_STATE	alloc/DdmHeap.cpp	172;"	d	file:
HPSG_WHAT_DISTINCT_OBJECTS	alloc/DdmHeap.cpp	/^    HPSG_WHAT_DISTINCT_OBJECTS = 1,$/;"	e	enum:HpsgWhat	file:
HPSG_WHAT_MERGED_OBJECTS	alloc/DdmHeap.cpp	/^    HPSG_WHAT_MERGED_OBJECTS = 0,$/;"	e	enum:HpsgWhat	file:
HPSG_WHEN_EVERY_GC	alloc/DdmHeap.cpp	/^    HPSG_WHEN_EVERY_GC = 1,$/;"	e	enum:HpsgWhen	file:
HPSG_WHEN_NEVER	alloc/DdmHeap.cpp	/^    HPSG_WHEN_NEVER = 0,$/;"	e	enum:HpsgWhen	file:
HPSx_CHUNK_SIZE	alloc/DdmHeap.cpp	354;"	d	file:
HS_ALLOWED_FOOTPRINT	alloc/HeapSource.h	/^    HS_ALLOWED_FOOTPRINT,$/;"	e	enum:HeapSourceValueSpec
HS_BOILERPLATE	alloc/HeapSource.cpp	60;"	d	file:
HS_BYTES_ALLOCATED	alloc/HeapSource.h	/^    HS_BYTES_ALLOCATED,$/;"	e	enum:HeapSourceValueSpec
HS_FOOTPRINT	alloc/HeapSource.h	/^    HS_FOOTPRINT,$/;"	e	enum:HeapSourceValueSpec
HS_OBJECTS_ALLOCATED	alloc/HeapSource.h	/^    HS_OBJECTS_ALLOCATED$/;"	e	enum:HeapSourceValueSpec
HandleVM_DisposeObjects	jdwp/JdwpHandler.cpp	/^static JdwpError HandleVM_DisposeObjects(JdwpState* state,$/;"	f	file:
HashCalcFunc	Hash.h	/^typedef u4 (*HashCalcFunc)(const void* item);$/;"	t
HashCompareFunc	Hash.h	/^typedef int (*HashCompareFunc)(const void* tableItem, const void* looseItem);$/;"	t
HashCompute	Hash.h	/^typedef u4 (*HashCompute)(const void* item);$/;"	t
HashEntry	Hash.h	/^struct HashEntry {$/;"	s
HashForeachFunc	Hash.h	/^typedef int (*HashForeachFunc)(void* data, void* arg);$/;"	t
HashForeachRemoveFunc	Hash.h	/^typedef int (*HashForeachRemoveFunc)(void* data);$/;"	t
HashFreeFunc	Hash.h	/^typedef void (*HashFreeFunc)(void* ptr);$/;"	t
HashIter	Hash.h	/^struct HashIter {$/;"	s
HashTable	Hash.h	/^struct HashTable {$/;"	s
Heap	alloc/HeapSource.cpp	/^struct Heap {$/;"	s	file:
HeapBitmap	alloc/HeapBitmap.h	/^struct HeapBitmap {$/;"	s
HeapChunkContext	alloc/DdmHeap.cpp	/^struct HeapChunkContext {$/;"	s	file:
HeapDebugInfoType	alloc/HeapDebug.h	/^enum HeapDebugInfoType {$/;"	g
HeapSource	alloc/Copying.cpp	/^struct HeapSource {$/;"	s	file:
HeapSource	alloc/HeapSource.cpp	/^struct HeapSource {$/;"	s	file:
HeapSourceValueSpec	alloc/HeapSource.h	/^enum HeapSourceValueSpec {$/;"	g
HexDumpMode	Misc.h	/^enum HexDumpMode { kHexDumpLocal, kHexDumpMem };$/;"	g
HpifWhen	alloc/DdmHeap.cpp	/^enum HpifWhen {$/;"	g	file:
HprofHeapId	hprof/Hprof.h	/^enum HprofHeapId {$/;"	g
HpsgKind	alloc/DdmHeap.cpp	/^enum HpsgKind {$/;"	g	file:
HpsgSolidity	alloc/DdmHeap.cpp	/^enum HpsgSolidity {$/;"	g	file:
HpsgWhat	alloc/DdmHeap.cpp	/^enum HpsgWhat {$/;"	g	file:
HpsgWhen	alloc/DdmHeap.cpp	/^enum HpsgWhen {$/;"	g	file:
ICPatchWorkOrder	compiler/Compiler.h	/^typedef struct ICPatchWorkOrder {$/;"	s
ICPatchWorkOrder	compiler/Compiler.h	/^} ICPatchWorkOrder;$/;"	t	typeref:struct:ICPatchWorkOrder
IF_LOGVV	Common.h	75;"	d
IF_LOGVV	Common.h	78;"	d
ILOG	mterp/c/header.cpp	120;"	d	file:
ILOG	mterp/out/InterpC-allstubs.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-armv5te-vfp.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-armv5te.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-armv7-a-neon.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-armv7-a.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-portable.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-x86-atom.cpp	127;"	d	file:
ILOG	mterp/out/InterpC-x86.cpp	127;"	d	file:
ILOGD	mterp/c/header.cpp	118;"	d	file:
ILOGD	mterp/c/header.cpp	134;"	d	file:
ILOGD	mterp/out/InterpC-allstubs.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-allstubs.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-armv5te-vfp.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-armv5te-vfp.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-armv5te.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-armv5te.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-armv7-a-neon.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-armv7-a-neon.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-armv7-a.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-armv7-a.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-portable.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-portable.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-x86-atom.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-x86-atom.cpp	141;"	d	file:
ILOGD	mterp/out/InterpC-x86.cpp	125;"	d	file:
ILOGD	mterp/out/InterpC-x86.cpp	141;"	d	file:
ILOGV	mterp/c/header.cpp	119;"	d	file:
ILOGV	mterp/c/header.cpp	135;"	d	file:
ILOGV	mterp/out/InterpC-allstubs.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-allstubs.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-armv5te-vfp.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-armv5te-vfp.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-armv5te.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-armv5te.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-armv7-a-neon.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-armv7-a-neon.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-armv7-a.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-armv7-a.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-portable.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-portable.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-x86-atom.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-x86-atom.cpp	142;"	d	file:
ILOGV	mterp/out/InterpC-x86.cpp	126;"	d	file:
ILOGV	mterp/out/InterpC-x86.cpp	142;"	d	file:
INITIAL_CLASS_SERIAL_NUMBER	oo/Class.cpp	159;"	d	file:
INLINE	Inlines.h	29;"	d
INLINE	Inlines.h	31;"	d
INLINE_DOUBLE_TO_LONG_BITS	InlineNative.h	/^    INLINE_DOUBLE_TO_LONG_BITS = 19,$/;"	e	enum:NativeInlineOps
INLINE_DOUBLE_TO_RAW_LONG_BITS	InlineNative.h	/^    INLINE_DOUBLE_TO_RAW_LONG_BITS = 20,$/;"	e	enum:NativeInlineOps
INLINE_EMPTYINLINEMETHOD	InlineNative.h	/^    INLINE_EMPTYINLINEMETHOD = 0,$/;"	e	enum:NativeInlineOps
INLINE_FLOAT_TO_INT_BITS	InlineNative.h	/^    INLINE_FLOAT_TO_INT_BITS = 16,$/;"	e	enum:NativeInlineOps
INLINE_FLOAT_TO_RAW_INT_BITS	InlineNative.h	/^    INLINE_FLOAT_TO_RAW_INT_BITS = 17,$/;"	e	enum:NativeInlineOps
INLINE_INT_BITS_TO_FLOAT	InlineNative.h	/^    INLINE_INT_BITS_TO_FLOAT = 18,$/;"	e	enum:NativeInlineOps
INLINE_LONG_BITS_TO_DOUBLE	InlineNative.h	/^    INLINE_LONG_BITS_TO_DOUBLE = 21,$/;"	e	enum:NativeInlineOps
INLINE_MATH_ABS_DOUBLE	InlineNative.h	/^    INLINE_MATH_ABS_DOUBLE = 10,$/;"	e	enum:NativeInlineOps
INLINE_MATH_ABS_FLOAT	InlineNative.h	/^    INLINE_MATH_ABS_FLOAT = 9,$/;"	e	enum:NativeInlineOps
INLINE_MATH_ABS_INT	InlineNative.h	/^    INLINE_MATH_ABS_INT = 7,$/;"	e	enum:NativeInlineOps
INLINE_MATH_ABS_LONG	InlineNative.h	/^    INLINE_MATH_ABS_LONG = 8,$/;"	e	enum:NativeInlineOps
INLINE_MATH_COS	InlineNative.h	/^    INLINE_MATH_COS = 14,$/;"	e	enum:NativeInlineOps
INLINE_MATH_MAX_INT	InlineNative.h	/^    INLINE_MATH_MAX_INT = 12,$/;"	e	enum:NativeInlineOps
INLINE_MATH_MIN_INT	InlineNative.h	/^    INLINE_MATH_MIN_INT = 11,$/;"	e	enum:NativeInlineOps
INLINE_MATH_SIN	InlineNative.h	/^    INLINE_MATH_SIN = 15,$/;"	e	enum:NativeInlineOps
INLINE_MATH_SQRT	InlineNative.h	/^    INLINE_MATH_SQRT = 13,$/;"	e	enum:NativeInlineOps
INLINE_STRING_CHARAT	InlineNative.h	/^    INLINE_STRING_CHARAT = 1,$/;"	e	enum:NativeInlineOps
INLINE_STRING_COMPARETO	InlineNative.h	/^    INLINE_STRING_COMPARETO = 2,$/;"	e	enum:NativeInlineOps
INLINE_STRING_EQUALS	InlineNative.h	/^    INLINE_STRING_EQUALS = 3,$/;"	e	enum:NativeInlineOps
INLINE_STRING_FASTINDEXOF_II	InlineNative.h	/^    INLINE_STRING_FASTINDEXOF_II = 4,$/;"	e	enum:NativeInlineOps
INLINE_STRING_IS_EMPTY	InlineNative.h	/^    INLINE_STRING_IS_EMPTY = 5,$/;"	e	enum:NativeInlineOps
INLINE_STRING_LENGTH	InlineNative.h	/^    INLINE_STRING_LENGTH = 6,$/;"	e	enum:NativeInlineOps
INSTANCEOF_CACHE_SIZE	oo/TypeCheck.cpp	33;"	d	file:
INST_A	mterp/c/header.cpp	277;"	d	file:
INST_A	mterp/out/InterpC-allstubs.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-armv5te-vfp.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-armv5te.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-armv7-a-neon.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-armv7-a.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-portable.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-x86-atom.cpp	284;"	d	file:
INST_A	mterp/out/InterpC-x86.cpp	284;"	d	file:
INST_AA	mterp/c/header.cpp	284;"	d	file:
INST_AA	mterp/out/InterpC-allstubs.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-armv5te-vfp.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-armv5te.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-armv7-a-neon.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-armv7-a.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-portable.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-x86-atom.cpp	291;"	d	file:
INST_AA	mterp/out/InterpC-x86.cpp	291;"	d	file:
INST_B	mterp/c/header.cpp	278;"	d	file:
INST_B	mterp/out/InterpC-allstubs.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-armv5te-vfp.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-armv5te.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-armv7-a-neon.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-armv7-a.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-portable.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-x86-atom.cpp	285;"	d	file:
INST_B	mterp/out/InterpC-x86.cpp	285;"	d	file:
INST_INST	mterp/c/header.cpp	267;"	d	file:
INST_INST	mterp/out/InterpC-allstubs.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-armv5te-vfp.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-armv5te.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-armv7-a-neon.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-armv7-a.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-portable.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-x86-atom.cpp	274;"	d	file:
INST_INST	mterp/out/InterpC-x86.cpp	274;"	d	file:
INST_REPLACE_OP	mterp/c/header.cpp	272;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-allstubs.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-armv5te-vfp.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-armv5te.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-armv7-a-neon.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-armv7-a.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-portable.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-x86-atom.cpp	279;"	d	file:
INST_REPLACE_OP	mterp/out/InterpC-x86.cpp	279;"	d	file:
INVALID_ORDERING_ID	shadowlib/ReProtocol.h	10;"	d
INVALID_REG	compiler/CompilerIR.h	45;"	d
INVALID_SREG	compiler/CompilerIR.h	44;"	d
INVALID_THREAD_ID	shadowlib/ReProtocol.h	11;"	d
INVOCATION_SIZE	shadowlib/ReProtocol.h	14;"	d
INVOKE_NONVIRTUAL	jdwp/JdwpConstants.h	/^    INVOKE_NONVIRTUAL       = 0x02,$/;"	e	enum:JdwpInvokeOptions
INVOKE_SINGLE_THREADED	jdwp/JdwpConstants.h	/^    INVOKE_SINGLE_THREADED  = 0x01,$/;"	e	enum:JdwpInvokeOptions
IN_ARG0	mterp/out/InterpAsm-x86.S	/^#define IN_ARG0        (  8)$/;"	d
IN_ARG0	mterp/x86/header.S	/^#define IN_ARG0        (  8)$/;"	d
IRTSegmentState	IndirectRefTable.h	/^union IRTSegmentState {$/;"	u
IRT_FIRST_SEGMENT	IndirectRefTable.h	125;"	d
IS_BINARY_OP	compiler/codegen/arm/ArmLIR.h	692;"	d
IS_BRANCH	compiler/codegen/arm/ArmLIR.h	675;"	d
IS_CLASS_FLAG_SET	oo/Object.h	98;"	d
IS_IT	compiler/codegen/arm/ArmLIR.h	695;"	d
IS_LOAD	compiler/codegen/arm/ArmLIR.h	673;"	d
IS_LOCK_FAT	Sync.h	73;"	d
IS_METHOD_FLAG_SET	oo/Object.h	121;"	d
IS_QUAD_OP	compiler/codegen/arm/ArmLIR.h	694;"	d
IS_STORE	compiler/codegen/arm/ArmLIR.h	674;"	d
IS_TERTIARY_OP	compiler/codegen/arm/ArmLIR.h	693;"	d
IS_UNARY_OP	compiler/codegen/arm/ArmLIR.h	691;"	d
ITERATION_COUNT	test/AtomicTest.cpp	37;"	d	file:
IndirectRef	IndirectRefTable.h	/^typedef void* IndirectRef;$/;"	t
IndirectRefKind	IndirectRefTable.h	/^enum IndirectRefKind {$/;"	g
IndirectRefSlot	IndirectRefTable.h	/^struct IndirectRefSlot {$/;"	s
IndirectRefTable	IndirectRefTable.h	/^struct IndirectRefTable {$/;"	s
InductionVariableInfo	compiler/Dataflow.h	/^typedef struct InductionVariableInfo {$/;"	s
InductionVariableInfo	compiler/Dataflow.h	/^} InductionVariableInfo;$/;"	t	typeref:struct:InductionVariableInfo
InitiatingLoaderList	oo/Object.h	/^struct InitiatingLoaderList {$/;"	s
InlineOp4Func	InlineNative.h	/^typedef bool (*InlineOp4Func)(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	t
InlineOperation	InlineNative.h	/^struct InlineOperation {$/;"	s
InlineSub	analysis/Optimize.cpp	/^struct InlineSub {$/;"	s	file:
InsnFlags	analysis/VerifySubs.h	/^typedef u4 InsnFlags;$/;"	t
InstField	oo/Object.h	/^struct InstField : Field {$/;"	s
InstructionTrace	interp/Jit.h	/^struct InstructionTrace {$/;"	s
InterfaceEntry	oo/Object.h	/^struct InterfaceEntry {$/;"	s
InternalStartArgs	Thread.h	/^struct InternalStartArgs {$/;"	s
InternalThreadStart	Thread.h	/^typedef void* (*InternalThreadStart)(void* arg);$/;"	t
InterpBreak	Thread.h	/^union InterpBreak {$/;"	u
InterpBreakFlags	interp/InterpState.h	/^enum InterpBreakFlags {$/;"	g
InterpSaveState	interp/InterpState.h	/^struct InterpSaveState {$/;"	s
IsAssignableFrom	Jni.cpp	/^static jboolean IsAssignableFrom(JNIEnv* env, jclass jclazz1, jclass jclazz2) {$/;"	f	file:
IsClosed	shadowlib/ReProtocol.h	/^		bool IsClosed(){$/;"	f	class:ReProtocol
IsEmpty	shadowlib/ReQueue.h	/^		bool IsEmpty(){$/;"	f	class:BaseQueue
IsInstanceOf	Jni.cpp	/^static jboolean IsInstanceOf(JNIEnv* env, jobject jobj, jclass jclazz) {$/;"	f	file:
IsSameObject	Jni.cpp	/^static jboolean IsSameObject(JNIEnv* env, jobject jref1, jobject jref2) {$/;"	f	file:
JAVA_FLAGS_MASK	oo/Object.h	/^    JAVA_FLAGS_MASK     = 0xffff,       \/\/ bits set from Java sources (low 16)$/;"	e	enum:AccessFlags
JIT_CALLEE_SAVE_DOUBLE_COUNT	interp/InterpDefs.h	34;"	d
JIT_ENTRY_CHAIN_WIDTH	interp/Jit.h	104;"	d
JIT_MAX_ENTRIES	interp/Jit.h	105;"	d
JIT_MAX_TRACE_LEN	interp/Jit.h	25;"	d
JIT_OPT_NO_LOOP	compiler/Compiler.h	160;"	d
JIT_PROF_BLOCK_BUCKETS	interp/Jit.h	112;"	d
JIT_PROF_BLOCK_ENTRIES	interp/Jit.h	111;"	d
JIT_PROF_SIZE	mterp/common/jit-config.h	23;"	d
JIT_PROF_SIZE_LOG_2	mterp/common/jit-config.h	18;"	d
JIT_PROF_SIZE_LOG_2	mterp/common/jit-config.h	20;"	d
JIT_STUB_HACK	mterp/cstubs/stubdefs.cpp	35;"	d	file:
JIT_STUB_HACK	mterp/cstubs/stubdefs.cpp	37;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-allstubs.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-allstubs.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv5te-vfp.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv5te-vfp.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv5te.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv5te.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv7-a-neon.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv7-a-neon.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv7-a.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-armv7-a.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-portable.cpp	384;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-x86-atom.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-x86-atom.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-x86.cpp	405;"	d	file:
JIT_STUB_HACK	mterp/out/InterpC-x86.cpp	407;"	d	file:
JIT_STUB_HACK	mterp/portable/stubdefs.cpp	14;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	34;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	36;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	47;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	50;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te-vfp/ArchVariant.h	21;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv5te-vfp/ArchVariant.h	32;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv5te/ArchVariant.cpp	34;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te/ArchVariant.cpp	36;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te/ArchVariant.cpp	47;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te/ArchVariant.cpp	50;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv5te/ArchVariant.h	21;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv5te/ArchVariant.h	32;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	29;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	31;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	42;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	45;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a-neon/ArchVariant.h	21;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv7-a-neon/ArchVariant.h	32;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv7-a/ArchVariant.cpp	29;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a/ArchVariant.cpp	31;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a/ArchVariant.cpp	42;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a/ArchVariant.cpp	45;"	d	file:
JIT_TEMPLATE	compiler/codegen/arm/armv7-a/ArchVariant.h	21;"	d
JIT_TEMPLATE	compiler/codegen/arm/armv7-a/ArchVariant.h	32;"	d
JIT_TEMPLATE	compiler/codegen/x86/ia32/ArchVariant.cpp	34;"	d	file:
JIT_TEMPLATE	compiler/codegen/x86/ia32/ArchVariant.cpp	36;"	d	file:
JIT_TEMPLATE	compiler/codegen/x86/ia32/ArchVariant.cpp	47;"	d	file:
JIT_TEMPLATE	compiler/codegen/x86/ia32/ArchVariant.cpp	50;"	d	file:
JIT_TEMPLATE	compiler/codegen/x86/ia32/ArchVariant.h	21;"	d
JIT_TEMPLATE	compiler/codegen/x86/ia32/ArchVariant.h	32;"	d
JIT_TEMPLATE	compiler/template/armv5te-vfp/TemplateOpList.h	21;"	d
JIT_TEMPLATE	compiler/template/armv5te/TemplateOpList.h	21;"	d
JIT_TEMPLATE	compiler/template/armv7-a-neon/TemplateOpList.h	21;"	d
JIT_TEMPLATE	compiler/template/armv7-a/TemplateOpList.h	21;"	d
JIT_TEMPLATE	compiler/template/ia32/TemplateOpList.h	21;"	d
JIT_TRACE_CLASS_DESC	interp/Jit.h	82;"	d
JIT_TRACE_CLASS_LOADER	interp/Jit.h	83;"	d
JIT_TRACE_CUR_METHOD	interp/Jit.h	84;"	d
JIT_TRACE_THRESH_FILTER_PC_BITS	interp/InterpState.h	183;"	d
JIT_TRACE_THRESH_FILTER_SIZE	interp/InterpState.h	181;"	d
JNIEnvExt	JniInternal.h	/^struct JNIEnvExt {$/;"	s
JNI_CreateJavaVM	Jni.cpp	/^jint JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) {$/;"	f
JNI_GetCreatedJavaVMs	Jni.cpp	/^jint JNI_GetCreatedJavaVMs(JavaVM** vmBuf, jsize bufLen, jsize* nVMs) {$/;"	f
JNI_GetDefaultJavaVMInitArgs	Jni.cpp	/^jint JNI_GetDefaultJavaVMInitArgs(void* vm_args) {$/;"	f
JT_ARRAY	jdwp/JdwpConstants.h	/^    JT_ARRAY                 = '[',$/;"	e	enum:JdwpType
JT_BOOLEAN	jdwp/JdwpConstants.h	/^    JT_BOOLEAN               = 'Z',$/;"	e	enum:JdwpType
JT_BYTE	jdwp/JdwpConstants.h	/^    JT_BYTE                  = 'B',$/;"	e	enum:JdwpType
JT_CHAR	jdwp/JdwpConstants.h	/^    JT_CHAR                  = 'C',$/;"	e	enum:JdwpType
JT_CLASS_LOADER	jdwp/JdwpConstants.h	/^    JT_CLASS_LOADER          = 'l',$/;"	e	enum:JdwpType
JT_CLASS_OBJECT	jdwp/JdwpConstants.h	/^    JT_CLASS_OBJECT          = 'c',$/;"	e	enum:JdwpType
JT_DOUBLE	jdwp/JdwpConstants.h	/^    JT_DOUBLE                = 'D',$/;"	e	enum:JdwpType
JT_FLOAT	jdwp/JdwpConstants.h	/^    JT_FLOAT                 = 'F',$/;"	e	enum:JdwpType
JT_INT	jdwp/JdwpConstants.h	/^    JT_INT                   = 'I',$/;"	e	enum:JdwpType
JT_LONG	jdwp/JdwpConstants.h	/^    JT_LONG                  = 'J',$/;"	e	enum:JdwpType
JT_OBJECT	jdwp/JdwpConstants.h	/^    JT_OBJECT                = 'L',$/;"	e	enum:JdwpType
JT_SHORT	jdwp/JdwpConstants.h	/^    JT_SHORT                 = 'S',$/;"	e	enum:JdwpType
JT_STRING	jdwp/JdwpConstants.h	/^    JT_STRING                = 's',$/;"	e	enum:JdwpType
JT_THREAD	jdwp/JdwpConstants.h	/^    JT_THREAD                = 't',$/;"	e	enum:JdwpType
JT_THREAD_GROUP	jdwp/JdwpConstants.h	/^    JT_THREAD_GROUP          = 'g',$/;"	e	enum:JdwpType
JT_VOID	jdwp/JdwpConstants.h	/^    JT_VOID                  = 'V',$/;"	e	enum:JdwpType
JValue	Common.h	/^union JValue {$/;"	u
JarFile	JarFile.h	/^struct JarFile {$/;"	s
JavaVMExt	JniInternal.h	/^struct JavaVMExt {$/;"	s
JdwpClassStatus	jdwp/JdwpConstants.h	/^enum JdwpClassStatus {$/;"	g
JdwpError	jdwp/JdwpConstants.h	/^enum JdwpError {$/;"	g
JdwpEvent	jdwp/JdwpEvent.h	/^struct JdwpEvent {$/;"	s
JdwpEventKind	jdwp/JdwpConstants.h	/^enum JdwpEventKind {$/;"	g
JdwpEventMod	jdwp/JdwpEvent.h	/^union JdwpEventMod {$/;"	u
JdwpHandlerMap	jdwp/JdwpHandler.cpp	/^struct JdwpHandlerMap {$/;"	s	file:
JdwpInvokeOptions	jdwp/JdwpConstants.h	/^enum JdwpInvokeOptions {$/;"	g
JdwpLocation	jdwp/Jdwp.h	/^struct JdwpLocation {$/;"	s
JdwpModKind	jdwp/JdwpConstants.h	/^enum JdwpModKind {$/;"	g
JdwpNetState	jdwp/JdwpAdb.cpp	/^    JdwpNetState()$/;"	f	struct:JdwpNetState
JdwpNetState	jdwp/JdwpAdb.cpp	/^struct JdwpNetState : public JdwpNetStateBase {$/;"	s	file:
JdwpNetState	jdwp/JdwpSocket.cpp	/^    JdwpNetState()$/;"	f	struct:JdwpNetState
JdwpNetState	jdwp/JdwpSocket.cpp	/^struct JdwpNetState : public JdwpNetStateBase {$/;"	s	file:
JdwpNetStateBase	jdwp/JdwpMain.cpp	/^JdwpNetStateBase::JdwpNetStateBase()$/;"	f	class:JdwpNetStateBase
JdwpNetStateBase	jdwp/JdwpPriv.h	/^class JdwpNetStateBase {$/;"	c
JdwpReqHeader	jdwp/JdwpHandler.h	/^struct JdwpReqHeader {$/;"	s
JdwpRequestHandler	jdwp/JdwpHandler.cpp	/^typedef JdwpError (*JdwpRequestHandler)(JdwpState* state,$/;"	t	file:
JdwpStartupParams	jdwp/Jdwp.h	/^struct JdwpStartupParams {$/;"	s
JdwpState	jdwp/JdwpPriv.h	/^struct JdwpState {$/;"	s
JdwpStepDepth	jdwp/JdwpConstants.h	/^enum JdwpStepDepth {$/;"	g
JdwpStepSize	jdwp/JdwpConstants.h	/^enum JdwpStepSize {$/;"	g
JdwpSuspendPolicy	jdwp/JdwpConstants.h	/^enum JdwpSuspendPolicy {$/;"	g
JdwpSuspendStatus	jdwp/JdwpConstants.h	/^enum JdwpSuspendStatus {$/;"	g
JdwpThreadStatus	jdwp/JdwpConstants.h	/^enum JdwpThreadStatus {$/;"	g
JdwpTransport	jdwp/JdwpPriv.h	/^struct JdwpTransport {$/;"	s
JdwpTransportType	jdwp/Jdwp.h	/^enum JdwpTransportType {$/;"	g
JdwpType	jdwp/JdwpConstants.h	/^enum JdwpType {$/;"	g
JdwpTypeTag	jdwp/JdwpConstants.h	/^enum JdwpTypeTag {$/;"	g
JitCodeDesc	interp/InterpState.h	/^struct JitCodeDesc {$/;"	s
JitEntry	interp/Jit.h	/^struct JitEntry {$/;"	s
JitEntryInfo	interp/Jit.h	/^struct JitEntryInfo {$/;"	s
JitEntryInfoUnion	interp/Jit.h	/^union JitEntryInfoUnion {$/;"	u
JitHint	interp/InterpState.h	/^enum JitHint {$/;"	g
JitInstructionSetType	compiler/Compiler.h	/^typedef enum JitInstructionSetType {$/;"	g
JitInstructionSetType	compiler/Compiler.h	/^} JitInstructionSetType;$/;"	t	typeref:enum:JitInstructionSetType
JitMethodAttributes	compiler/Compiler.h	/^typedef enum JitMethodAttributes {$/;"	g
JitMethodAttributes	compiler/Compiler.h	/^} JitMethodAttributes;$/;"	t	typeref:enum:JitMethodAttributes
JitMode	compiler/CompilerIR.h	/^typedef enum JitMode {$/;"	g
JitMode	compiler/CompilerIR.h	/^} JitMode;$/;"	t	typeref:enum:JitMode
JitOptimizationHints	compiler/Compiler.h	/^typedef enum JitOptimizationHints {$/;"	g
JitOptimizationHints	compiler/Compiler.h	/^} JitOptimizationHints;$/;"	t	typeref:enum:JitOptimizationHints
JitState	interp/InterpState.h	/^enum JitState {$/;"	g
JitToInterpEntries	interp/InterpState.h	/^struct JitToInterpEntries {$/;"	s
JitTraceCounter_t	interp/Jit.h	/^typedef s4 JitTraceCounter_t;$/;"	t
JitTraceDescription	compiler/Compiler.h	/^} JitTraceDescription;$/;"	t	typeref:struct:__anon37
JitTraceProfCounters	interp/Jit.h	/^struct JitTraceProfCounters {$/;"	s
JitTraceRun	interp/InterpState.h	/^struct JitTraceRun {$/;"	s
JitTranslationInfo	compiler/Compiler.h	/^typedef struct JitTranslationInfo {$/;"	s
JitTranslationInfo	compiler/Compiler.h	/^} JitTranslationInfo;$/;"	t	typeref:struct:JitTranslationInfo
KILL	analysis/Liveness.cpp	/^static inline void KILL(BitVector* workBits, u4 regIndex)$/;"	f	file:
KILLW	analysis/Liveness.cpp	/^static inline void KILLW(BitVector* workBits, u4 regIndex)$/;"	f	file:
KIND_ALLOCATED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_ALLOCATED_BYTES        = 1<<1,$/;"	e	enum:__anon20	file:
KIND_ALLOCATED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_ALLOCATED_OBJECTS      = 1<<0,$/;"	e	enum:__anon20	file:
KIND_ALL_COUNTS	native/dalvik_system_VMDebug.cpp	101;"	d	file:
KIND_ARRAY_1	alloc/DdmHeap.cpp	/^    KIND_ARRAY_1 = 2,$/;"	e	enum:HpsgKind	file:
KIND_ARRAY_2	alloc/DdmHeap.cpp	/^    KIND_ARRAY_2 = 3,$/;"	e	enum:HpsgKind	file:
KIND_ARRAY_4	alloc/DdmHeap.cpp	/^    KIND_ARRAY_4 = 4,$/;"	e	enum:HpsgKind	file:
KIND_ARRAY_8	alloc/DdmHeap.cpp	/^    KIND_ARRAY_8 = 5,$/;"	e	enum:HpsgKind	file:
KIND_CLASS_INIT_COUNT	native/dalvik_system_VMDebug.cpp	/^    KIND_CLASS_INIT_COUNT       = 1<<5,$/;"	e	enum:__anon20	file:
KIND_CLASS_INIT_TIME	native/dalvik_system_VMDebug.cpp	/^    KIND_CLASS_INIT_TIME        = 1<<6,$/;"	e	enum:__anon20	file:
KIND_CLASS_OBJECT	alloc/DdmHeap.cpp	/^    KIND_CLASS_OBJECT = 1,$/;"	e	enum:HpsgKind	file:
KIND_EXT_ALLOCATED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_EXT_ALLOCATED_BYTES   = 1<<13,$/;"	e	enum:__anon20	file:
KIND_EXT_ALLOCATED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_EXT_ALLOCATED_OBJECTS = 1<<12,$/;"	e	enum:__anon20	file:
KIND_EXT_FREED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_EXT_FREED_BYTES       = 1<<15,$/;"	e	enum:__anon20	file:
KIND_EXT_FREED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_EXT_FREED_OBJECTS     = 1<<14,$/;"	e	enum:__anon20	file:
KIND_FREED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_FREED_BYTES            = 1<<3,$/;"	e	enum:__anon20	file:
KIND_FREED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_FREED_OBJECTS          = 1<<2,$/;"	e	enum:__anon20	file:
KIND_GC_INVOCATIONS	native/dalvik_system_VMDebug.cpp	/^    KIND_GC_INVOCATIONS         = 1<<4,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_ALLOCATED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_ALLOCATED_BYTES     = KIND_ALLOCATED_BYTES,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_ALLOCATED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_ALLOCATED_OBJECTS   = KIND_ALLOCATED_OBJECTS,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_CLASS_INIT_COUNT	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_CLASS_INIT_COUNT    = KIND_CLASS_INIT_COUNT,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_CLASS_INIT_TIME	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_CLASS_INIT_TIME     = KIND_CLASS_INIT_TIME,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_FREED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_FREED_BYTES         = KIND_FREED_BYTES,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_FREED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_FREED_OBJECTS       = KIND_FREED_OBJECTS,$/;"	e	enum:__anon20	file:
KIND_GLOBAL_GC_INVOCATIONS	native/dalvik_system_VMDebug.cpp	/^    KIND_GLOBAL_GC_INVOCATIONS      = KIND_GC_INVOCATIONS,$/;"	e	enum:__anon20	file:
KIND_NATIVE	alloc/DdmHeap.cpp	/^    KIND_NATIVE = 7,$/;"	e	enum:HpsgKind	file:
KIND_OBJECT	alloc/DdmHeap.cpp	/^    KIND_OBJECT = 0,$/;"	e	enum:HpsgKind	file:
KIND_THREAD_ALLOCATED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_THREAD_ALLOCATED_BYTES     = KIND_ALLOCATED_BYTES << 16,$/;"	e	enum:__anon20	file:
KIND_THREAD_ALLOCATED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_THREAD_ALLOCATED_OBJECTS   = KIND_ALLOCATED_OBJECTS << 16,$/;"	e	enum:__anon20	file:
KIND_THREAD_FREED_BYTES	native/dalvik_system_VMDebug.cpp	/^    KIND_THREAD_FREED_BYTES         = KIND_FREED_BYTES << 16,$/;"	e	enum:__anon20	file:
KIND_THREAD_FREED_OBJECTS	native/dalvik_system_VMDebug.cpp	/^    KIND_THREAD_FREED_OBJECTS       = KIND_FREED_OBJECTS << 16,$/;"	e	enum:__anon20	file:
KIND_THREAD_GC_INVOCATIONS	native/dalvik_system_VMDebug.cpp	/^    KIND_THREAD_GC_INVOCATIONS      = KIND_GC_INVOCATIONS << 16,$/;"	e	enum:__anon20	file:
KIND_UNKNOWN	alloc/DdmHeap.cpp	/^    KIND_UNKNOWN = 6,$/;"	e	enum:HpsgKind	file:
LDLD_DISTANCE	compiler/codegen/arm/LocalOptimizations.cpp	30;"	d	file:
LD_LATENCY	compiler/codegen/arm/LocalOptimizations.cpp	31;"	d	file:
LENGTHFLAG_FREE	LinearAlloc.cpp	78;"	d	file:
LENGTHFLAG_MASK	LinearAlloc.cpp	80;"	d	file:
LENGTHFLAG_RW	LinearAlloc.cpp	79;"	d	file:
LIKELY	Common.h	55;"	d
LIR	compiler/CompilerIR.h	/^typedef struct LIR {$/;"	s
LIR	compiler/CompilerIR.h	/^} LIR;$/;"	t	typeref:struct:LIR
LOAD_DENOM	Hash.cpp	29;"	d	file:
LOAD_FP_FROM_SELF	mterp/armv5te/header.S	/^#define LOAD_FP_FROM_SELF()     ldr     rFP, [rSELF, #offThread_curFrame]$/;"	d
LOAD_FP_FROM_SELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define LOAD_FP_FROM_SELF()     ldr     rFP, [rSELF, #offThread_curFrame]$/;"	d
LOAD_FP_FROM_SELF	mterp/out/InterpAsm-armv5te.S	/^#define LOAD_FP_FROM_SELF()     ldr     rFP, [rSELF, #offThread_curFrame]$/;"	d
LOAD_FP_FROM_SELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define LOAD_FP_FROM_SELF()     ldr     rFP, [rSELF, #offThread_curFrame]$/;"	d
LOAD_FP_FROM_SELF	mterp/out/InterpAsm-armv7-a.S	/^#define LOAD_FP_FROM_SELF()     ldr     rFP, [rSELF, #offThread_curFrame]$/;"	d
LOAD_FUNC_ADDR	compiler/codegen/arm/CalloutHelper.h	31;"	d
LOAD_FUNC_ADDR	compiler/codegen/x86/CalloutHelper.h	31;"	d
LOAD_NUMER	Hash.cpp	28;"	d	file:
LOAD_PC_FP_FROM_SELF	mterp/armv5te/header.S	/^#define LOAD_PC_FP_FROM_SELF()  ldmia   rSELF, {rPC, rFP}$/;"	d
LOAD_PC_FP_FROM_SELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define LOAD_PC_FP_FROM_SELF()  ldmia   rSELF, {rPC, rFP}$/;"	d
LOAD_PC_FP_FROM_SELF	mterp/out/InterpAsm-armv5te.S	/^#define LOAD_PC_FP_FROM_SELF()  ldmia   rSELF, {rPC, rFP}$/;"	d
LOAD_PC_FP_FROM_SELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define LOAD_PC_FP_FROM_SELF()  ldmia   rSELF, {rPC, rFP}$/;"	d
LOAD_PC_FP_FROM_SELF	mterp/out/InterpAsm-armv7-a.S	/^#define LOAD_PC_FP_FROM_SELF()  ldmia   rSELF, {rPC, rFP}$/;"	d
LOAD_PC_FROM_SELF	mterp/armv5te/header.S	/^#define LOAD_PC_FROM_SELF()     ldr     rPC, [rSELF, #offThread_pc]$/;"	d
LOAD_PC_FROM_SELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define LOAD_PC_FROM_SELF()     ldr     rPC, [rSELF, #offThread_pc]$/;"	d
LOAD_PC_FROM_SELF	mterp/out/InterpAsm-armv5te.S	/^#define LOAD_PC_FROM_SELF()     ldr     rPC, [rSELF, #offThread_pc]$/;"	d
LOAD_PC_FROM_SELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define LOAD_PC_FROM_SELF()     ldr     rPC, [rSELF, #offThread_pc]$/;"	d
LOAD_PC_FROM_SELF	mterp/out/InterpAsm-armv7-a.S	/^#define LOAD_PC_FROM_SELF()     ldr     rPC, [rSELF, #offThread_pc]$/;"	d
LOCAL0_OFFSET	mterp/out/InterpAsm-x86.S	/^#define LOCAL0_OFFSET  (-44)$/;"	d
LOCAL0_OFFSET	mterp/x86/header.S	/^#define LOCAL0_OFFSET  (-44)$/;"	d
LOCAL1_OFFSET	mterp/out/InterpAsm-x86.S	/^#define LOCAL1_OFFSET  (-48)$/;"	d
LOCAL1_OFFSET	mterp/x86/header.S	/^#define LOCAL1_OFFSET  (-48)$/;"	d
LOCAL2_OFFSET	mterp/out/InterpAsm-x86.S	/^#define LOCAL2_OFFSET  (-52)$/;"	d
LOCAL2_OFFSET	mterp/x86/header.S	/^#define LOCAL2_OFFSET  (-52)$/;"	d
LOCAL_ADDRESS_SANITIZER	Android.mk	/^    LOCAL_ADDRESS_SANITIZER := true$/;"	m
LOCAL_CFLAGS	Android.mk	/^    LOCAL_CFLAGS := $(filter-out $(CLANG_CONFIG_UNKNOWN_CFLAGS),$(LOCAL_CFLAGS))$/;"	m
LOCAL_IS_HOST_MODULE	Android.mk	/^    LOCAL_IS_HOST_MODULE := true$/;"	m
LOCAL_LDLIBS	Android.mk	/^    LOCAL_LDLIBS := -lpthread -ldl$/;"	m
LOCAL_MODULE	Android.mk	/^    LOCAL_MODULE := dalvik_ori$/;"	m
LOCAL_MODULE	Android.mk	/^    LOCAL_MODULE := libdvm_assert_ori$/;"	m
LOCAL_MODULE	Android.mk	/^    LOCAL_MODULE := libdvm_interp_ori$/;"	m
LOCAL_MODULE	Android.mk	/^    LOCAL_MODULE := libdvm_ori$/;"	m
LOCAL_MODULE	Android.mk	/^    LOCAL_MODULE := libdvm_sv_ori$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := libdvm_ori$/;"	m
LOCAL_MODULE_CLASS	Android.mk	/^    LOCAL_MODULE_CLASS := EXECUTABLES$/;"	m
LOCAL_MODULE_PATH	Android.mk	/^    LOCAL_MODULE_PATH := $(TARGET_OUT_SHARED_LIBRARIES)\/asan$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^    LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_MODULE_TAGS	ReconfigureDvm.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	Android.mk	/^        LOCAL_SHARED_LIBRARIES := \\$/;"	m
LOCAL_SRC_FILES	Dvm.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SUBMODE	interp/InterpState.h	95;"	d
LOC_C_RETURN	compiler/codegen/arm/ArmLIR.h	90;"	d
LOC_C_RETURN_WIDE	compiler/codegen/arm/ArmLIR.h	91;"	d
LOC_DALVIK_RETURN_VAL	compiler/codegen/arm/ArmLIR.h	93;"	d
LOC_DALVIK_RETURN_VAL_WIDE	compiler/codegen/arm/ArmLIR.h	94;"	d
LOGASSERT	shadowlib/DalvikHeader.h	9;"	d
LOGDEBUG	shadowlib/DalvikHeader.h	13;"	d
LOGD_HEAP	alloc/HeapInternal.h	79;"	d
LOGD_HEAP	alloc/HeapInternal.h	82;"	d
LOGERROR	shadowlib/DalvikHeader.h	11;"	d
LOGE_HEAP	alloc/HeapInternal.h	90;"	d
LOGI_HEAP	alloc/HeapInternal.h	84;"	d
LOGVV	Common.h	74;"	d
LOGVV	Common.h	77;"	d
LOGV_HEAP	alloc/HeapInternal.h	78;"	d
LOGV_HEAP	alloc/HeapInternal.h	81;"	d
LOGW_HEAP	alloc/HeapInternal.h	89;"	d
LOG_ALLOC	alloc/Copying.cpp	134;"	d	file:
LOG_CLASS_LOADING	oo/Class.cpp	22;"	d	file:
LOG_PIN	alloc/Copying.cpp	135;"	d	file:
LOG_PROM	alloc/Copying.cpp	136;"	d	file:
LOG_REF	alloc/Copying.cpp	137;"	d	file:
LOG_SCAV	alloc/Copying.cpp	138;"	d	file:
LOG_TAG	Common.h	24;"	d
LOG_TAG	Inlines.cpp	27;"	d	file:
LOG_TAG	jdwp/JdwpPriv.h	22;"	d
LOG_THREAD	Thread.cpp	62;"	d	file:
LOG_TRAN	alloc/Copying.cpp	139;"	d	file:
LOG_VER	alloc/Copying.cpp	140;"	d	file:
LOG_VFY	analysis/VerifySubs.h	50;"	d
LOG_VFY_METH	analysis/VerifySubs.h	51;"	d
LOWREG	compiler/codegen/arm/ArmLIR.h	71;"	d
LW_HASH_STATE	Sync.h	40;"	d
LW_HASH_STATE_HASHED	Sync.h	36;"	d
LW_HASH_STATE_HASHED_AND_MOVED	Sync.h	37;"	d
LW_HASH_STATE_MASK	Sync.h	38;"	d
LW_HASH_STATE_SHIFT	Sync.h	39;"	d
LW_HASH_STATE_UNHASHED	Sync.h	35;"	d
LW_LOCK_COUNT	Sync.h	64;"	d
LW_LOCK_COUNT_MASK	Sync.h	62;"	d
LW_LOCK_COUNT_SHIFT	Sync.h	63;"	d
LW_LOCK_OWNER	Sync.h	56;"	d
LW_LOCK_OWNER_MASK	Sync.h	54;"	d
LW_LOCK_OWNER_SHIFT	Sync.h	55;"	d
LW_MONITOR	Sync.h	46;"	d
LW_SHAPE	Sync.h	29;"	d
LW_SHAPE_FAT	Sync.h	27;"	d
LW_SHAPE_MASK	Sync.h	28;"	d
LW_SHAPE_THIN	Sync.h	26;"	d
LineNumFromPcContext	interp/Stack.cpp	/^struct LineNumFromPcContext {$/;"	s	file:
LinearAllocHdr	LinearAlloc.h	/^struct LinearAllocHdr {$/;"	s
Lock	shadowlib/Lock.h	/^		void Lock(lock_id_type lockid){$/;"	f	class:LockBuffer
LockBuffer	shadowlib/Lock.h	/^		LockBuffer(int capacity=DEFAULT_LOCK_BUFFER):b_capacity(capacity),b_occupied(0){$/;"	f	class:LockBuffer
LockBuffer	shadowlib/Lock.h	/^class LockBuffer{$/;"	c
LoopAnalysis	compiler/Loop.h	/^typedef struct LoopAnalysis {$/;"	s
LoopAnalysis	compiler/Loop.h	/^} LoopAnalysis;$/;"	t	typeref:struct:LoopAnalysis
MAKE_INTRINSIC_TRAMPOLINE	native/InternalNativePriv.h	47;"	d
MAX	Common.h	53;"	d
MAXCONNECTIONS	shadowlib/Socket.h	/^const int MAXCONNECTIONS = 5;$/;"	v
MAXHOSTNAME	shadowlib/Socket.h	/^const int MAXHOSTNAME = 200;$/;"	v
MAXRECV	shadowlib/Socket.h	/^const int MAXRECV = 500;$/;"	v
MAX_ASSEMBLER_RETRIES	compiler/codegen/arm/Assemble.cpp	25;"	d	file:
MAX_ASSEMBLER_RETRIES	compiler/codegen/x86/Assemble.cpp	25;"	d	file:
MAX_BUFFER	shadowlib/ReAgent.cpp	25;"	d	file:
MAX_CHAINED_SWITCH_CASES	compiler/codegen/CompilerCodegen.h	23;"	d
MAX_HOIST_DISTANCE	compiler/codegen/arm/LocalOptimizations.cpp	29;"	d	file:
MAX_JIT_RUN_LEN	interp/InterpState.h	184;"	d
METHOD_ACTION	Profile.h	173;"	d
METHOD_ACTION_MASK	Profile.h	171;"	d
METHOD_CANNOT_COMPILE	compiler/Compiler.h	153;"	d
METHOD_COMBINE	Profile.h	174;"	d
METHOD_DIRECT	oo/Resolve.h	/^    METHOD_DIRECT,      \/\/ <init>, private$/;"	e	enum:MethodType
METHOD_ID	Profile.h	172;"	d
METHOD_INTERFACE	oo/Resolve.h	/^    METHOD_INTERFACE    \/\/ interface$/;"	e	enum:MethodType
METHOD_ISWRITABLE	oo/Object.h	/^    METHOD_ISWRITABLE       = (1<<31),  \/\/ the method's code is writable$/;"	e	enum:MethodFlags
METHOD_IS_CALLEE	compiler/Compiler.h	146;"	d
METHOD_IS_EMPTY	compiler/Compiler.h	149;"	d
METHOD_IS_GETTER	compiler/Compiler.h	151;"	d
METHOD_IS_HOT	compiler/Compiler.h	147;"	d
METHOD_IS_LEAF	compiler/Compiler.h	148;"	d
METHOD_IS_SETTER	compiler/Compiler.h	152;"	d
METHOD_IS_THROW_FREE	compiler/Compiler.h	150;"	d
METHOD_STATIC	oo/Resolve.h	/^    METHOD_STATIC,      \/\/ static$/;"	e	enum:MethodType
METHOD_TRACE_ENTER	Profile.h	/^    METHOD_TRACE_ENTER = 0x00,      \/\/ method entry$/;"	e	enum:__anon2
METHOD_TRACE_EXIT	Profile.h	/^    METHOD_TRACE_EXIT = 0x01,       \/\/ method exit$/;"	e	enum:__anon2
METHOD_TRACE_UNROLL	Profile.h	/^    METHOD_TRACE_UNROLL = 0x02,     \/\/ method exited by exception unrolling$/;"	e	enum:__anon2
METHOD_UNKNOWN	oo/Resolve.h	/^    METHOD_UNKNOWN  = 0,$/;"	e	enum:MethodType
METHOD_VIRTUAL	oo/Resolve.h	/^    METHOD_VIRTUAL,     \/\/ virtual, super$/;"	e	enum:MethodType
MIN	Common.h	52;"	d
MIR	compiler/CompilerIR.h	/^typedef struct MIR {$/;"	s
MIR	compiler/CompilerIR.h	/^} MIR;$/;"	t	typeref:struct:MIR
MIROptimizationFlagPositons	compiler/CompilerIR.h	/^} MIROptimizationFlagPositons;$/;"	t	typeref:enum:__anon43
MIR_CALLEE	compiler/CompilerIR.h	115;"	d
MIR_IGNORE_NULL_CHECK	compiler/CompilerIR.h	109;"	d
MIR_IGNORE_RANGE_CHECK	compiler/CompilerIR.h	111;"	d
MIR_INLINED	compiler/CompilerIR.h	113;"	d
MIR_INLINED_PRED	compiler/CompilerIR.h	114;"	d
MIR_INVOKE_METHOD_JIT	compiler/CompilerIR.h	116;"	d
MIR_NULL_CHECK_ONLY	compiler/CompilerIR.h	110;"	d
MIR_RANGE_CHECK_ONLY	compiler/CompilerIR.h	112;"	d
MK_CLASS_EXCLUDE	jdwp/JdwpConstants.h	/^    MK_CLASS_EXCLUDE        = 6,$/;"	e	enum:JdwpModKind
MK_CLASS_MATCH	jdwp/JdwpConstants.h	/^    MK_CLASS_MATCH          = 5,$/;"	e	enum:JdwpModKind
MK_CLASS_ONLY	jdwp/JdwpConstants.h	/^    MK_CLASS_ONLY           = 4,$/;"	e	enum:JdwpModKind
MK_CONDITIONAL	jdwp/JdwpConstants.h	/^    MK_CONDITIONAL          = 2,$/;"	e	enum:JdwpModKind
MK_COUNT	jdwp/JdwpConstants.h	/^    MK_COUNT                = 1,$/;"	e	enum:JdwpModKind
MK_EXCEPTION_ONLY	jdwp/JdwpConstants.h	/^    MK_EXCEPTION_ONLY       = 8,$/;"	e	enum:JdwpModKind
MK_FIELD_ONLY	jdwp/JdwpConstants.h	/^    MK_FIELD_ONLY           = 9,$/;"	e	enum:JdwpModKind
MK_INSTANCE_ONLY	jdwp/JdwpConstants.h	/^    MK_INSTANCE_ONLY        = 11,$/;"	e	enum:JdwpModKind
MK_LOCATION_ONLY	jdwp/JdwpConstants.h	/^    MK_LOCATION_ONLY        = 7,$/;"	e	enum:JdwpModKind
MK_STEP	jdwp/JdwpConstants.h	/^    MK_STEP                 = 10,$/;"	e	enum:JdwpModKind
MK_THREAD_ONLY	jdwp/JdwpConstants.h	/^    MK_THREAD_ONLY          = 3,$/;"	e	enum:JdwpModKind
MORE_SLEEP	Thread.cpp	2422;"	d	file:
MSG_ANALYZE	shadowlib/ReProtocol.h	/^	MSG_ANALYZE,$/;"	e	enum:MsgType
MSG_CLASS_INFO	shadowlib/ReProtocol.h	/^	MSG_CLASS_INFO,$/;"	e	enum:MsgType
MSG_CLOSE	shadowlib/ReProtocol.h	/^	MSG_CLOSE,$/;"	e	enum:MsgType
MSG_FORK	shadowlib/ReProtocol.h	/^	MSG_FORK,$/;"	e	enum:MsgType
MSG_MAPPID	shadowlib/ReProtocol.h	/^	MSG_MAPPID$/;"	e	enum:MsgType
MSG_NEW_CLASS	shadowlib/ReProtocol.h	/^	MSG_NEW_CLASS,$/;"	e	enum:MsgType
MSG_OBJ_FREE	shadowlib/ReProtocol.h	/^	MSG_OBJ_FREE,$/;"	e	enum:MsgType
MSG_REG_ANALYSIS	shadowlib/ReProtocol.h	/^	MSG_REG_ANALYSIS,$/;"	e	enum:MsgType
MSG_STRING_INFO	shadowlib/ReProtocol.h	/^	MSG_STRING_INFO,$/;"	e	enum:MsgType
MSG_THREAD_END	shadowlib/ReProtocol.h	/^	MSG_THREAD_END,$/;"	e	enum:MsgType
MSG_THREAD_INFO	shadowlib/ReProtocol.h	/^	MSG_THREAD_INFO,$/;"	e	enum:MsgType
MTERP_ARCH_KNOWN	Dvm.mk	/^    MTERP_ARCH_KNOWN := true$/;"	m
MTERP_ARCH_KNOWN	Dvm.mk	/^  MTERP_ARCH_KNOWN := true$/;"	m
MTERP_ARCH_KNOWN	Dvm.mk	/^MTERP_ARCH_KNOWN := false$/;"	m
MTERP_CONSTANT	mterp/common/asm-constants.h	25;"	d
MTERP_CONSTANT	mterp/common/asm-constants.h	35;"	d
MTERP_ENTRY1	mterp/armv5te/entry.S	/^#define MTERP_ENTRY1 \\$/;"	d
MTERP_ENTRY1	mterp/out/InterpAsm-armv5te-vfp.S	/^#define MTERP_ENTRY1 \\$/;"	d
MTERP_ENTRY1	mterp/out/InterpAsm-armv5te.S	/^#define MTERP_ENTRY1 \\$/;"	d
MTERP_ENTRY1	mterp/out/InterpAsm-armv7-a-neon.S	/^#define MTERP_ENTRY1 \\$/;"	d
MTERP_ENTRY1	mterp/out/InterpAsm-armv7-a.S	/^#define MTERP_ENTRY1 \\$/;"	d
MTERP_ENTRY2	mterp/armv5te/entry.S	/^#define MTERP_ENTRY2 \\$/;"	d
MTERP_ENTRY2	mterp/out/InterpAsm-armv5te-vfp.S	/^#define MTERP_ENTRY2 \\$/;"	d
MTERP_ENTRY2	mterp/out/InterpAsm-armv5te.S	/^#define MTERP_ENTRY2 \\$/;"	d
MTERP_ENTRY2	mterp/out/InterpAsm-armv7-a-neon.S	/^#define MTERP_ENTRY2 \\$/;"	d
MTERP_ENTRY2	mterp/out/InterpAsm-armv7-a.S	/^#define MTERP_ENTRY2 \\$/;"	d
MTERP_NO_UNALIGN_64	mterp/common/asm-constants.h	44;"	d
MTERP_OFFSET	mterp/common/asm-constants.h	13;"	d
MTERP_OFFSET	mterp/common/asm-constants.h	33;"	d
MTERP_SIZEOF	mterp/common/asm-constants.h	19;"	d
MTERP_SIZEOF	mterp/common/asm-constants.h	34;"	d
MTERP_SMALL_ENUM	mterp/common/asm-constants.h	47;"	d
MTERP_SMALL_ENUM	mterp/common/asm-constants.h	49;"	d
MY_LOG_TAG	shadowlib/DalvikHeader.h	7;"	d
Map	shadowlib/Map.h	/^		Map(int capacity=DEFAULT_MAP_SIZE):b_capacity(capacity),b_occupied(0){$/;"	f	class:Map
Map	shadowlib/Map.h	/^class Map{$/;"	c
MapPidPname	shadowlib/ReProtocol.h	/^		bool MapPidPname(jint pid, const char* pname){$/;"	f	class:ReProtocol
MapStats	analysis/RegisterMap.cpp	/^struct MapStats {$/;"	s	file:
Math_absD	native/java_lang_Math.cpp	/^static void Math_absD(const u4* args, JValue* pResult)$/;"	f	file:
Math_absF	native/java_lang_Math.cpp	/^static void Math_absF(const u4* args, JValue* pResult)$/;"	f	file:
Math_absI	native/java_lang_Math.cpp	/^static void Math_absI(const u4* args, JValue* pResult)$/;"	f	file:
Math_absJ	native/java_lang_Math.cpp	/^static void Math_absJ(const u4* args, JValue* pResult)$/;"	f	file:
Math_cos	native/java_lang_Math.cpp	/^static void Math_cos(const u4* args, JValue* pResult)$/;"	f	file:
Math_maxI	native/java_lang_Math.cpp	/^static void Math_maxI(const u4* args, JValue* pResult)$/;"	f	file:
Math_minI	native/java_lang_Math.cpp	/^static void Math_minI(const u4* args, JValue* pResult)$/;"	f	file:
Math_sin	native/java_lang_Math.cpp	/^static void Math_sin(const u4* args, JValue* pResult)$/;"	f	file:
Math_sqrt	native/java_lang_Math.cpp	/^static void Math_sqrt(const u4* args, JValue* pResult)$/;"	f	file:
Method	oo/Object.h	/^struct Method {$/;"	s
MethodFlags	oo/Object.h	/^enum MethodFlags {$/;"	g
MethodId	jdwp/Jdwp.h	/^typedef u4 MethodId;    \/* any kind of method, including constructors *\/$/;"	t
MethodRegisterEvent	shadowlib/ReProtocol.h	/^		bool MethodRegisterEvent(int threadId, jshort methodId, const char* name, int length){$/;"	f	class:ReProtocol
MethodTraceState	Profile.h	/^struct MethodTraceState {$/;"	s
MethodType	oo/Resolve.h	/^enum MethodType {$/;"	g
ModBasket	jdwp/JdwpEvent.cpp	/^struct ModBasket {$/;"	s	file:
Monitor	Sync.cpp	/^struct Monitor {$/;"	s	file:
MonitorEnter	Jni.cpp	/^static jint MonitorEnter(JNIEnv* env, jobject jobj) {$/;"	f	file:
MonitorEntries	analysis/CodeVerify.h	/^typedef u4 MonitorEntries;$/;"	t
MonitorExit	Jni.cpp	/^static jint MonitorExit(JNIEnv* env, jobject jobj) {$/;"	f	file:
MsgType	shadowlib/ReProtocol.h	/^enum MsgType{$/;"	g
NEED_QUASIATOMICS	Atomic.cpp	228;"	d	file:
NEED_QUASIATOMICS	Atomic.cpp	40;"	d	file:
NEED_QUASIATOMICS	Atomic.cpp	83;"	d	file:
NELEM	Common.h	121;"	d
NEW_PRIMITIVE_ARRAY	CheckJni.cpp	1781;"	d	file:
NEW_PRIMITIVE_ARRAY	Jni.cpp	2322;"	d	file:
NEXT_LIR	compiler/codegen/arm/ArmLIR.h	784;"	d
NEXT_LIR	compiler/codegen/x86/X86LIR.h	171;"	d
NEXT_LIR_LVALUE	compiler/codegen/arm/ArmLIR.h	787;"	d
NEXT_LIR_LVALUE	compiler/codegen/x86/X86LIR.h	174;"	d
NON_VOID_RETURN	CheckJni.cpp	1667;"	d	file:
NO_OPERAND	compiler/codegen/arm/ArmLIR.h	690;"	d
NO_UNALIGN_64__UNION	mterp/c/header.cpp	62;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-allstubs.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-armv5te-vfp.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-armv5te.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-armv7-a-neon.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-armv7-a.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-portable.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-x86-atom.cpp	69;"	d	file:
NO_UNALIGN_64__UNION	mterp/out/InterpC-x86.cpp	69;"	d	file:
NULL_AND_FREE	oo/Class.cpp	2018;"	d	file:
NULL_AND_FREE	oo/Class.cpp	2092;"	d	file:
NULL_AND_LINEAR_FREE	oo/Class.cpp	2026;"	d	file:
NULL_AND_LINEAR_FREE	oo/Class.cpp	2093;"	d	file:
NUM_XOR_PTRS	alloc/TEST/HeapBitmapTest/main.c	310;"	d	file:
NativeInlineOps	InlineNative.h	/^enum NativeInlineOps {$/;"	g
NativeLog	shadowlib/ReAgent.cpp	/^void NativeLog(JNIEnv * jni_env, jclass this_class, jstring text){$/;"	f
NativeRegisterPool	compiler/codegen/arm/ArmLIR.h	/^typedef enum NativeRegisterPool {$/;"	g
NativeRegisterPool	compiler/codegen/arm/ArmLIR.h	/^} NativeRegisterPool;$/;"	t	typeref:enum:NativeRegisterPool
NativeRegisterPool	compiler/codegen/x86/X86LIR.h	/^typedef enum NativeRegisterPool {$/;"	g
NativeRegisterPool	compiler/codegen/x86/X86LIR.h	/^} NativeRegisterPool;$/;"	t	typeref:enum:NativeRegisterPool
NewClassEvent	shadowlib/ReProtocol.h	/^		bool NewClassEvent(const char* name, uint16_t nameLength, jlong classLoaderId, jint codeLength, const char *bytes){$/;"	f	class:ReProtocol
NewClassInfo	shadowlib/ReProtocol.h	/^		bool NewClassInfo(jlong netref, const char* className, int namelen, const char* generic, int glen, jlong netrefClassLoader, jlong netrefSuperClass){$/;"	f	class:ReProtocol
NewDirectByteBuffer	Jni.cpp	/^static jobject NewDirectByteBuffer(JNIEnv* env, void* address, jlong capacity) {$/;"	f	file:
NewGlobalRef	Jni.cpp	/^static jobject NewGlobalRef(JNIEnv* env, jobject jobj) {$/;"	f	file:
NewLocalRef	Jni.cpp	/^static jobject NewLocalRef(JNIEnv* env, jobject jobj) {$/;"	f	file:
NewObject	Jni.cpp	/^static jobject NewObject(JNIEnv* env, jclass jclazz, jmethodID methodID, ...) {$/;"	f	file:
NewObjectA	Jni.cpp	/^static jobject NewObjectA(JNIEnv* env, jclass jclazz, jmethodID methodID, jvalue* args) {$/;"	f	file:
NewObjectArray	Jni.cpp	/^static jobjectArray NewObjectArray(JNIEnv* env, jsize length,$/;"	f	file:
NewObjectV	Jni.cpp	/^static jobject NewObjectV(JNIEnv* env, jclass jclazz, jmethodID methodID, va_list args) {$/;"	f	file:
NewString	Jni.cpp	/^static jstring NewString(JNIEnv* env, const jchar* unicodeChars, jsize len) {$/;"	f	file:
NewStringUTF	Jni.cpp	/^static jstring NewStringUTF(JNIEnv* env, const char* bytes) {$/;"	f	file:
NewWeakGlobalRef	Jni.cpp	/^static jweak NewWeakGlobalRef(JNIEnv* env, jobject jobj) {$/;"	f	file:
NoChainExits	Globals.h	/^enum NoChainExits {$/;"	g
OBJECTS_PER_SEGMENT	hprof/HprofHeap.cpp	27;"	d	file:
OBJECT_ID_MASK	shadowlib/Netref.h	/^static const uint64_t OBJECT_ID_MASK = 0xFFFFFFFFFFL;$/;"	v
OBJECT_ID_POS	shadowlib/Netref.h	/^static const uint8_t OBJECT_ID_POS = 0;$/;"	v
OFFSETOF_MEMBER	Common.h	116;"	d
OPTIMIZE_MODE_ALL	analysis/DexPrepare.h	/^    OPTIMIZE_MODE_ALL,          \/* optimize verified & unverified (risky) *\/$/;"	e	enum:DexOptimizerMode
OPTIMIZE_MODE_FULL	analysis/DexPrepare.h	/^    OPTIMIZE_MODE_FULL          \/* fully opt verified classes at load time *\/$/;"	e	enum:DexOptimizerMode
OPTIMIZE_MODE_NONE	analysis/DexPrepare.h	/^    OPTIMIZE_MODE_NONE,         \/* never optimize (except "essential") *\/$/;"	e	enum:DexOptimizerMode
OPTIMIZE_MODE_UNKNOWN	analysis/DexPrepare.h	/^    OPTIMIZE_MODE_UNKNOWN = 0,$/;"	e	enum:DexOptimizerMode
OPTIMIZE_MODE_VERIFIED	analysis/DexPrepare.h	/^    OPTIMIZE_MODE_VERIFIED,     \/* only optimize verified classes (default) *\/$/;"	e	enum:DexOptimizerMode
OP_CMPG_FLOAT_continue	mterp/out/InterpAsm-armv5te.S	/^OP_CMPG_FLOAT_continue:$/;"	l
OP_CMPG_FLOAT_finish	mterp/out/InterpAsm-armv5te.S	/^OP_CMPG_FLOAT_finish:$/;"	l
OP_CMPG_FLOAT_nan	mterp/out/InterpAsm-armv5te.S	/^OP_CMPG_FLOAT_nan:$/;"	l
OP_CMPL_FLOAT_continue	mterp/out/InterpAsm-armv5te.S	/^OP_CMPL_FLOAT_continue:$/;"	l
OP_CMPL_FLOAT_finish	mterp/out/InterpAsm-armv5te.S	/^OP_CMPL_FLOAT_finish:$/;"	l
OP_CMPL_FLOAT_nan	mterp/out/InterpAsm-armv5te.S	/^OP_CMPL_FLOAT_nan:$/;"	l
OP_END	mterp/cstubs/stubdefs.cpp	63;"	d	file:
OP_END	mterp/out/InterpC-allstubs.cpp	433;"	d	file:
OP_END	mterp/out/InterpC-armv5te-vfp.cpp	433;"	d	file:
OP_END	mterp/out/InterpC-armv5te.cpp	433;"	d	file:
OP_END	mterp/out/InterpC-armv7-a-neon.cpp	433;"	d	file:
OP_END	mterp/out/InterpC-armv7-a.cpp	433;"	d	file:
OP_END	mterp/out/InterpC-portable.cpp	419;"	d	file:
OP_END	mterp/out/InterpC-x86-atom.cpp	433;"	d	file:
OP_END	mterp/out/InterpC-x86.cpp	433;"	d	file:
OP_END	mterp/portable/stubdefs.cpp	49;"	d	file:
OP_IF_EQZ_2f	mterp/out/InterpAsm-x86-atom.S	/^OP_IF_EQZ_2f:$/;"	l
OP_IF_GEZ_2f	mterp/out/InterpAsm-x86-atom.S	/^OP_IF_GEZ_2f:$/;"	l
OP_IF_GTZ_2f	mterp/out/InterpAsm-x86-atom.S	/^OP_IF_GTZ_2f:$/;"	l
OP_IF_LEZ_2f	mterp/out/InterpAsm-x86-atom.S	/^OP_IF_LEZ_2f:$/;"	l
OP_IF_LTZ_2f	mterp/out/InterpAsm-x86-atom.S	/^OP_IF_LTZ_2f:$/;"	l
OP_IF_NEZ_2f	mterp/out/InterpAsm-x86-atom.S	/^OP_IF_NEZ_2f:$/;"	l
OUTS_FROM_FP	interp/Stack.h	160;"	d
OUT_ARG0	compiler/codegen/x86/X86LIR.h	151;"	d
OUT_ARG0	mterp/out/InterpAsm-x86.S	/^#define OUT_ARG0       (  0)  \/* <- dvmMterpStdRun esp *\/$/;"	d
OUT_ARG0	mterp/x86/header.S	/^#define OUT_ARG0       (  0)  \/* <- dvmMterpStdRun esp *\/$/;"	d
OUT_ARG1	compiler/codegen/x86/X86LIR.h	152;"	d
OUT_ARG1	mterp/out/InterpAsm-x86.S	/^#define OUT_ARG1       (  4)$/;"	d
OUT_ARG1	mterp/x86/header.S	/^#define OUT_ARG1       (  4)$/;"	d
OUT_ARG2	compiler/codegen/x86/X86LIR.h	153;"	d
OUT_ARG2	mterp/out/InterpAsm-x86.S	/^#define OUT_ARG2       (  8)$/;"	d
OUT_ARG2	mterp/x86/header.S	/^#define OUT_ARG2       (  8)$/;"	d
OUT_ARG3	compiler/codegen/x86/X86LIR.h	154;"	d
OUT_ARG3	mterp/out/InterpAsm-x86.S	/^#define OUT_ARG3       ( 12)$/;"	d
OUT_ARG3	mterp/x86/header.S	/^#define OUT_ARG3       ( 12)$/;"	d
OUT_ARG4	compiler/codegen/x86/X86LIR.h	155;"	d
OUT_ARG4	mterp/out/InterpAsm-x86.S	/^#define OUT_ARG4       ( 16)$/;"	d
OUT_ARG4	mterp/x86/header.S	/^#define OUT_ARG4       ( 16)$/;"	d
ObjFreeEvent	shadowlib/ReProtocol.h	/^		void ObjFreeEvent(jlong objectId){$/;"	f	class:ReProtocol
Object	oo/Object.h	/^struct Object {$/;"	s
ObjectId	jdwp/Jdwp.h	/^typedef u8 ObjectId;    \/* any object (threadID, stringID, arrayID, etc) *\/$/;"	t
OnForkEvent	shadowlib/ReProtocol.h	/^		bool OnForkEvent(int para){$/;"	f	class:ReProtocol
OnLoadFunc	Native.cpp	/^typedef int (*OnLoadFunc)(JavaVM*, void*);$/;"	t	file:
OnLoadState	Native.cpp	/^enum OnLoadState {$/;"	g	file:
OpKind	compiler/codegen/arm/ArmLIR.h	/^typedef enum OpKind {$/;"	g
OpKind	compiler/codegen/arm/ArmLIR.h	/^} OpKind;$/;"	t	typeref:enum:OpKind
OpKind	compiler/codegen/x86/X86LIR.h	/^typedef enum OpKind {$/;"	g
OpKind	compiler/codegen/x86/X86LIR.h	/^} OpKind;$/;"	t	typeref:enum:OpKind
OpSize	compiler/codegen/arm/ArmLIR.h	/^typedef enum OpSize {$/;"	g
OpSize	compiler/codegen/arm/ArmLIR.h	/^} OpSize;$/;"	t	typeref:enum:OpSize
OpSize	compiler/codegen/x86/X86LIR.h	/^typedef enum OpSize {$/;"	g
OpSize	compiler/codegen/x86/X86LIR.h	/^} OpSize;$/;"	t	typeref:enum:OpSize
OptimizationFlags	compiler/CompilerIR.h	/^    int OptimizationFlags;$/;"	m	struct:MIR
PADDING_MOV_R5_R5	compiler/codegen/arm/Assemble.cpp	895;"	d	file:
PAGE_SIZE	alloc/TEST/HeapBitmapTest/main.c	11;"	d	file:
PC_FP_TO_SELF	mterp/cstubs/stubdefs.cpp	46;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-allstubs.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-armv5te-vfp.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-armv5te.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-armv7-a-neon.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-armv7-a.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-portable.cpp	392;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-x86-atom.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/out/InterpC-x86.cpp	416;"	d	file:
PC_FP_TO_SELF	mterp/portable/stubdefs.cpp	22;"	d	file:
PC_TO_SELF	mterp/cstubs/stubdefs.cpp	47;"	d	file:
PC_TO_SELF	mterp/out/InterpC-allstubs.cpp	417;"	d	file:
PC_TO_SELF	mterp/out/InterpC-armv5te-vfp.cpp	417;"	d	file:
PC_TO_SELF	mterp/out/InterpC-armv5te.cpp	417;"	d	file:
PC_TO_SELF	mterp/out/InterpC-armv7-a-neon.cpp	417;"	d	file:
PC_TO_SELF	mterp/out/InterpC-armv7-a.cpp	417;"	d	file:
PC_TO_SELF	mterp/out/InterpC-portable.cpp	395;"	d	file:
PC_TO_SELF	mterp/out/InterpC-x86-atom.cpp	417;"	d	file:
PC_TO_SELF	mterp/out/InterpC-x86.cpp	417;"	d	file:
PC_TO_SELF	mterp/portable/stubdefs.cpp	25;"	d	file:
PERIODIC_CHECKS	mterp/cstubs/stubdefs.cpp	129;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-allstubs.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-armv5te-vfp.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-armv5te.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-armv7-a-neon.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-armv7-a.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-portable.cpp	447;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-x86-atom.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/out/InterpC-x86.cpp	499;"	d	file:
PERIODIC_CHECKS	mterp/portable/stubdefs.cpp	77;"	d	file:
PREDICTED_CHAIN_BX_PAIR_INIT	compiler/codegen/arm/ArmLIR.h	781;"	d
PREDICTED_CHAIN_CLAZZ_INIT	compiler/Compiler.h	32;"	d
PREDICTED_CHAIN_COUNTER_AVOID	compiler/Compiler.h	38;"	d
PREDICTED_CHAIN_COUNTER_INIT	compiler/Compiler.h	34;"	d
PREDICTED_CHAIN_COUNTER_RECHAIN	compiler/Compiler.h	40;"	d
PREDICTED_CHAIN_FAKE_CLAZZ	compiler/Compiler.h	36;"	d
PREDICTED_CHAIN_METHOD_INIT	compiler/Compiler.h	33;"	d
PREFETCH_ADVANCE_INST	mterp/armv5te/header.S	/^#define PREFETCH_ADVANCE_INST(_dreg, _sreg, _count) \\$/;"	d
PREFETCH_ADVANCE_INST	mterp/out/InterpAsm-armv5te-vfp.S	/^#define PREFETCH_ADVANCE_INST(_dreg, _sreg, _count) \\$/;"	d
PREFETCH_ADVANCE_INST	mterp/out/InterpAsm-armv5te.S	/^#define PREFETCH_ADVANCE_INST(_dreg, _sreg, _count) \\$/;"	d
PREFETCH_ADVANCE_INST	mterp/out/InterpAsm-armv7-a-neon.S	/^#define PREFETCH_ADVANCE_INST(_dreg, _sreg, _count) \\$/;"	d
PREFETCH_ADVANCE_INST	mterp/out/InterpAsm-armv7-a.S	/^#define PREFETCH_ADVANCE_INST(_dreg, _sreg, _count) \\$/;"	d
PREV_FP	mterp/out/InterpAsm-x86.S	/^#define PREV_FP        (  0)$/;"	d
PREV_FP	mterp/x86/header.S	/^#define PREV_FP        (  0)$/;"	d
PREV_LIR	compiler/codegen/arm/ArmLIR.h	785;"	d
PREV_LIR	compiler/codegen/x86/X86LIR.h	172;"	d
PREV_LIR_LVALUE	compiler/codegen/arm/ArmLIR.h	788;"	d
PREV_LIR_LVALUE	compiler/codegen/x86/X86LIR.h	175;"	d
PRIMITIVE_ARRAY_FUNCTIONS	CheckJni.cpp	1859;"	d	file:
PRIMITIVE_ARRAY_FUNCTIONS	Jni.cpp	2434;"	d	file:
PROF_COUNTER_ADDR_SIZE	compiler/codegen/arm/Assemble.cpp	1235;"	d	file:
PROTECT_CODE_CACHE	compiler/Compiler.h	60;"	d
PROTECT_CODE_CACHE_ATTRS	compiler/Compiler.h	47;"	d
PTHREAD_MUTEX_ERRORCHECK	Thread.h	/^enum { PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP };$/;"	e	enum:__anon10
PointerSet	PointerSet.cpp	/^struct PointerSet {$/;"	s	file:
PopLocalFrame	Jni.cpp	/^static jobject PopLocalFrame(JNIEnv* env, jobject jresult) {$/;"	f	file:
PredictedChainingCell	compiler/Compiler.h	/^typedef struct PredictedChainingCell {$/;"	s
PredictedChainingCell	compiler/Compiler.h	/^} PredictedChainingCell;$/;"	t	typeref:struct:PredictedChainingCell
Print	shadowlib/Map.h	/^		void Print(){$/;"	f	class:Map
Print	shadowlib/ReQueue.h	/^		virtual void Print(){$/;"	f	class:BaseQueue
ProcStatData	Misc.h	/^struct ProcStatData {$/;"	s
ProfilerClockSource	Globals.h	/^enum ProfilerClockSource {$/;"	g
Push	shadowlib/Buffer.h	/^		void Push(const char* data, int len){$/;"	f	class:Buffer
PushLocalFrame	Jni.cpp	/^static jint PushLocalFrame(JNIEnv* env, jint capacity) {$/;"	f	file:
QUEUE_INVOCATION	shadowlib/ReProtocol.h	/^	QUEUE_INVOCATION,$/;"	e	enum:QueueType
QUEUE_OBJFREE	shadowlib/ReProtocol.h	/^	QUEUE_OBJFREE$/;"	e	enum:QueueType
QUEUE_TAIL	alloc/Copying.cpp	176;"	d	file:
QueueType	shadowlib/ReProtocol.h	/^enum QueueType{$/;"	g
REGISTER_MAP_VERBOSE	analysis/RegisterMap.cpp	37;"	d	file:
REGISTER_MAP_VERIFY	analysis/RegisterMap.cpp	34;"	d	file:
REGTYPE	compiler/codegen/arm/ArmLIR.h	69;"	d
REG_DEF0	compiler/codegen/arm/ArmLIR.h	676;"	d
REG_DEF01_USE2	compiler/codegen/arm/ArmLIR.h	707;"	d
REG_DEF0_USE0	compiler/codegen/arm/ArmLIR.h	703;"	d
REG_DEF0_USE01	compiler/codegen/arm/ArmLIR.h	705;"	d
REG_DEF0_USE1	compiler/codegen/arm/ArmLIR.h	704;"	d
REG_DEF0_USE12	compiler/codegen/arm/ArmLIR.h	706;"	d
REG_DEF1	compiler/codegen/arm/ArmLIR.h	677;"	d
REG_DEF_LIST0	compiler/codegen/arm/ArmLIR.h	680;"	d
REG_DEF_LIST1	compiler/codegen/arm/ArmLIR.h	681;"	d
REG_DEF_LR	compiler/codegen/arm/ArmLIR.h	679;"	d
REG_DEF_SP	compiler/codegen/arm/ArmLIR.h	678;"	d
REG_SPACE	interp/Jit.h	29;"	d
REG_USE0	compiler/codegen/arm/ArmLIR.h	682;"	d
REG_USE01	compiler/codegen/arm/ArmLIR.h	700;"	d
REG_USE012	compiler/codegen/arm/ArmLIR.h	701;"	d
REG_USE1	compiler/codegen/arm/ArmLIR.h	683;"	d
REG_USE12	compiler/codegen/arm/ArmLIR.h	702;"	d
REG_USE2	compiler/codegen/arm/ArmLIR.h	684;"	d
REG_USE3	compiler/codegen/arm/ArmLIR.h	685;"	d
REG_USE_LIST0	compiler/codegen/arm/ArmLIR.h	688;"	d
REG_USE_LIST1	compiler/codegen/arm/ArmLIR.h	689;"	d
REG_USE_PC	compiler/codegen/arm/ArmLIR.h	687;"	d
REG_USE_SP	compiler/codegen/arm/ArmLIR.h	686;"	d
RELEASE_PRIMITIVE_ARRAY_ELEMENTS	CheckJni.cpp	1825;"	d	file:
RELEASE_PRIMITIVE_ARRAY_ELEMENTS	Jni.cpp	2372;"	d	file:
RESULT_REGISTER	analysis/CodeVerify.cpp	69;"	d	file:
RETURN_BOOLEAN	native/InternalNativePriv.h	32;"	d
RETURN_DOUBLE	native/InternalNativePriv.h	36;"	d
RETURN_FLOAT	native/InternalNativePriv.h	35;"	d
RETURN_INT	native/InternalNativePriv.h	33;"	d
RETURN_LONG	native/InternalNativePriv.h	34;"	d
RETURN_PTR	native/InternalNativePriv.h	37;"	d
RETURN_VOID	native/InternalNativePriv.h	28;"	d
RETURN_VOID	native/InternalNativePriv.h	30;"	d
ROOT_DEBUGGER	alloc/Visit.h	/^  ROOT_DEBUGGER,$/;"	e	enum:RootType
ROOT_INTERNED_STRING	alloc/Visit.h	/^  ROOT_INTERNED_STRING,$/;"	e	enum:RootType
ROOT_JAVA_FRAME	alloc/Visit.h	/^  ROOT_JAVA_FRAME,$/;"	e	enum:RootType
ROOT_JNI_GLOBAL	alloc/Visit.h	/^  ROOT_JNI_GLOBAL,$/;"	e	enum:RootType
ROOT_JNI_LOCAL	alloc/Visit.h	/^  ROOT_JNI_LOCAL,$/;"	e	enum:RootType
ROOT_JNI_MONITOR	alloc/Visit.h	/^  ROOT_JNI_MONITOR,$/;"	e	enum:RootType
ROOT_MONITOR_USED	alloc/Visit.h	/^  ROOT_MONITOR_USED,$/;"	e	enum:RootType
ROOT_NATIVE_STACK	alloc/Visit.h	/^  ROOT_NATIVE_STACK,$/;"	e	enum:RootType
ROOT_STICKY_CLASS	alloc/Visit.h	/^  ROOT_STICKY_CLASS,$/;"	e	enum:RootType
ROOT_THREAD_BLOCK	alloc/Visit.h	/^  ROOT_THREAD_BLOCK,$/;"	e	enum:RootType
ROOT_THREAD_OBJECT	alloc/Visit.h	/^  ROOT_THREAD_OBJECT,$/;"	e	enum:RootType
ROOT_UNKNOWN	alloc/Visit.h	/^  ROOT_UNKNOWN = 0,$/;"	e	enum:RootType
ROOT_VM_INTERNAL	alloc/Visit.h	/^  ROOT_VM_INTERNAL,$/;"	e	enum:RootType
RawDexFile	RawDexFile.h	/^struct RawDexFile {$/;"	s
ReProtocol	shadowlib/ReProtocol.h	/^		ReProtocol(const char* host, int port){$/;"	f	class:ReProtocol
ReProtocol	shadowlib/ReProtocol.h	/^class ReProtocol{$/;"	c
ReQueue	shadowlib/ReQueue.h	/^		ReQueue():BaseQueue(){ event_count = 0; }$/;"	f	class:ReQueue
ReQueue	shadowlib/ReQueue.h	/^		ReQueue(int capacity):BaseQueue(capacity){ event_count = 0; }$/;"	f	class:ReQueue
ReQueue	shadowlib/ReQueue.h	/^class ReQueue: public BaseQueue{$/;"	c
RecvInt	shadowlib/Socket.cpp	/^int Socket::RecvInt ( int& ires) const$/;"	f	class:Socket
RefTypeId	jdwp/Jdwp.h	/^typedef u8 RefTypeId;   \/* like ObjectID, but unique for Class objects *\/$/;"	t
ReferenceTable	ReferenceTable.h	/^struct ReferenceTable {$/;"	s
RegLocation	compiler/CompilerIR.h	/^typedef struct RegLocation {$/;"	s
RegLocation	compiler/CompilerIR.h	/^} RegLocation;$/;"	t	typeref:struct:RegLocation
RegLocationType	compiler/CompilerIR.h	/^typedef enum RegLocationType {$/;"	g
RegLocationType	compiler/CompilerIR.h	/^} RegLocationType;$/;"	t	typeref:enum:RegLocationType
RegType	analysis/CodeVerify.h	/^typedef u4 RegType;$/;"	t
RegisterClass	compiler/CompilerIR.h	/^typedef enum RegisterClass {$/;"	g
RegisterClass	compiler/CompilerIR.h	/^} RegisterClass;$/;"	t	typeref:enum:RegisterClass
RegisterInfo	compiler/codegen/arm/ArmLIR.h	/^typedef struct RegisterInfo {$/;"	s
RegisterInfo	compiler/codegen/arm/ArmLIR.h	/^} RegisterInfo;$/;"	t	typeref:struct:RegisterInfo
RegisterInfo	compiler/codegen/x86/X86LIR.h	/^typedef struct RegisterInfo {$/;"	s
RegisterInfo	compiler/codegen/x86/X86LIR.h	/^} RegisterInfo;$/;"	t	typeref:struct:RegisterInfo
RegisterLine	analysis/CodeVerify.h	/^struct RegisterLine {$/;"	s
RegisterMap	analysis/RegisterMap.h	/^struct RegisterMap {$/;"	s
RegisterMapBuilder	analysis/RegisterMap.h	/^struct RegisterMapBuilder {$/;"	s
RegisterMapClassPool	analysis/RegisterMap.h	/^struct RegisterMapClassPool {$/;"	s
RegisterMapFormat	analysis/RegisterMap.h	/^enum RegisterMapFormat {$/;"	g
RegisterMapMethodPool	analysis/RegisterMap.h	/^struct RegisterMapMethodPool {$/;"	s
RegisterMapMode	Globals.h	/^enum RegisterMapMode {$/;"	g
RegisterNatives	Jni.cpp	/^static jint RegisterNatives(JNIEnv* env, jclass jclazz,$/;"	f	file:
RegisterPool	compiler/codegen/arm/ArmLIR.h	/^typedef struct RegisterPool {$/;"	s
RegisterPool	compiler/codegen/arm/ArmLIR.h	/^} RegisterPool;$/;"	t	typeref:struct:RegisterPool
RegisterPool	compiler/codegen/x86/X86LIR.h	/^typedef struct RegisterPool {$/;"	s
RegisterPool	compiler/codegen/x86/X86LIR.h	/^} RegisterPool;$/;"	t	typeref:struct:RegisterPool
RegisterTable	analysis/CodeVerify.cpp	/^typedef struct RegisterTable {$/;"	s	file:
RegisterTable	analysis/CodeVerify.cpp	/^} RegisterTable;$/;"	t	typeref:struct:RegisterTable	file:
RegisterTrackingMode	analysis/CodeVerify.cpp	/^enum RegisterTrackingMode {$/;"	g	file:
RegistryType	Debugger.cpp	/^enum RegistryType {$/;"	g	file:
ReleasePrimitiveArrayCritical	Jni.cpp	/^static void ReleasePrimitiveArrayCritical(JNIEnv* env, jarray jarr, void* carray, jint mode) {$/;"	f	file:
ReleaseStringChars	Jni.cpp	/^static void ReleaseStringChars(JNIEnv* env, jstring jstr, const jchar* chars) {$/;"	f	file:
ReleaseStringCritical	Jni.cpp	/^static void ReleaseStringCritical(JNIEnv* env, jstring jstr, const jchar* carray) {$/;"	f	file:
ReleaseStringUTFChars	Jni.cpp	/^static void ReleaseStringUTFChars(JNIEnv* env, jstring jstr, const char* utf) {$/;"	f	file:
Reset	shadowlib/ReQueue.h	/^		virtual void Reset(){$/;"	f	class:BaseQueue
Reset	shadowlib/ReQueue.h	/^		virtual void Reset(){$/;"	f	class:ReQueue
ResourceEncodingPos	compiler/codegen/arm/ArmLIR.h	/^typedef enum ResourceEncodingPos {$/;"	g
ResourceEncodingPos	compiler/codegen/arm/ArmLIR.h	/^} ResourceEncodingPos;$/;"	t	typeref:enum:ResourceEncodingPos
ReturnAndResetBuffer	shadowlib/ReProtocol.h	/^		Buffer* ReturnAndResetBuffer(){$/;"	f	class:ReProtocol
ReturnAndResetBufferNolock	shadowlib/ReProtocol.h	/^		Buffer* ReturnAndResetBufferNolock(){$/;"	f	class:ReProtocol
RootType	alloc/Visit.h	/^enum RootType {$/;"	g
RootVisitor	alloc/Visit.h	/^typedef void RootVisitor(void *addr, u4 threadId, RootType type, void *arg);$/;"	t
S1	arch/x86-atom/Call386ABI.S	/^S1:$/;"	l
S2	arch/x86-atom/Call386ABI.S	/^S2:$/;"	l
S2D	compiler/codegen/arm/ArmLIR.h	81;"	d
S4	arch/x86-atom/Call386ABI.S	/^S4:$/;"	l
S8	arch/x86-atom/Call386ABI.S	/^S8:$/;"	l
SAFEPOINT_BREAK_MASK	interp/InterpState.h	86;"	d
SAVEAREA_FROM_FP	compiler/template/armv5te/header.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	interp/Stack.h	156;"	d
SAVEAREA_FROM_FP	mterp/armv5te/header.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	mterp/out/InterpAsm-armv5te-vfp.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	mterp/out/InterpAsm-armv5te.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	mterp/out/InterpAsm-armv7-a-neon.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVEAREA_FROM_FP	mterp/out/InterpAsm-armv7-a.S	/^#define SAVEAREA_FROM_FP(_reg, _fpreg) \\$/;"	d
SAVED_REG_COUNT	arch/arm/CallEABI.S	/^SAVED_REG_COUNT = 6                     @ push 6 regs$/;"	d
SAVE_FP_TO_SELF	mterp/armv5te/header.S	/^#define SAVE_FP_TO_SELF()       str     rFP, [rSELF, #offThread_curFrame]$/;"	d
SAVE_FP_TO_SELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define SAVE_FP_TO_SELF()       str     rFP, [rSELF, #offThread_curFrame]$/;"	d
SAVE_FP_TO_SELF	mterp/out/InterpAsm-armv5te.S	/^#define SAVE_FP_TO_SELF()       str     rFP, [rSELF, #offThread_curFrame]$/;"	d
SAVE_FP_TO_SELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define SAVE_FP_TO_SELF()       str     rFP, [rSELF, #offThread_curFrame]$/;"	d
SAVE_FP_TO_SELF	mterp/out/InterpAsm-armv7-a.S	/^#define SAVE_FP_TO_SELF()       str     rFP, [rSELF, #offThread_curFrame]$/;"	d
SAVE_PC_FP_TO_SELF	mterp/armv5te/header.S	/^#define SAVE_PC_FP_TO_SELF()    stmia   rSELF, {rPC, rFP}$/;"	d
SAVE_PC_FP_TO_SELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define SAVE_PC_FP_TO_SELF()    stmia   rSELF, {rPC, rFP}$/;"	d
SAVE_PC_FP_TO_SELF	mterp/out/InterpAsm-armv5te.S	/^#define SAVE_PC_FP_TO_SELF()    stmia   rSELF, {rPC, rFP}$/;"	d
SAVE_PC_FP_TO_SELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define SAVE_PC_FP_TO_SELF()    stmia   rSELF, {rPC, rFP}$/;"	d
SAVE_PC_FP_TO_SELF	mterp/out/InterpAsm-armv7-a.S	/^#define SAVE_PC_FP_TO_SELF()    stmia   rSELF, {rPC, rFP}$/;"	d
SAVE_PC_TO_SELF	mterp/armv5te/header.S	/^#define SAVE_PC_TO_SELF()       str     rPC, [rSELF, #offThread_pc]$/;"	d
SAVE_PC_TO_SELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define SAVE_PC_TO_SELF()       str     rPC, [rSELF, #offThread_pc]$/;"	d
SAVE_PC_TO_SELF	mterp/out/InterpAsm-armv5te.S	/^#define SAVE_PC_TO_SELF()       str     rPC, [rSELF, #offThread_pc]$/;"	d
SAVE_PC_TO_SELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define SAVE_PC_TO_SELF()       str     rPC, [rSELF, #offThread_pc]$/;"	d
SAVE_PC_TO_SELF	mterp/out/InterpAsm-armv7-a.S	/^#define SAVE_PC_TO_SELF()       str     rPC, [rSELF, #offThread_pc]$/;"	d
SD_INTO	jdwp/JdwpConstants.h	/^    SD_INTO                 = 0,    \/* step into method calls *\/$/;"	e	enum:JdwpStepDepth
SD_OUT	jdwp/JdwpConstants.h	/^    SD_OUT                  = 2,    \/* step out of current method *\/$/;"	e	enum:JdwpStepDepth
SD_OVER	jdwp/JdwpConstants.h	/^    SD_OVER                 = 1,    \/* step over method calls *\/$/;"	e	enum:JdwpStepDepth
SERVER_IP	shadowlib/ReAgent.cpp	23;"	d	file:
SERVER_SOCK	shadowlib/Socket.cpp	23;"	d	file:
SETS_CCODES	compiler/codegen/arm/ArmLIR.h	696;"	d
SET_CLASS_FLAG	oo/Object.h	92;"	d
SET_METHOD_FLAG	oo/Object.h	115;"	d
SET_PRIMITIVE_ARRAY_REGION	CheckJni.cpp	1851;"	d	file:
SET_PRIMITIVE_ARRAY_REGION	Jni.cpp	2413;"	d	file:
SET_REGISTER	mterp/c/header.cpp	215;"	d	file:
SET_REGISTER	mterp/c/header.cpp	242;"	d	file:
SET_REGISTER	mterp/out/InterpC-allstubs.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-allstubs.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv5te-vfp.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv5te-vfp.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv5te.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv5te.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv7-a-neon.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv7-a-neon.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv7-a.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-armv7-a.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-portable.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-portable.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-x86-atom.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-x86-atom.cpp	249;"	d	file:
SET_REGISTER	mterp/out/InterpC-x86.cpp	222;"	d	file:
SET_REGISTER	mterp/out/InterpC-x86.cpp	249;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/c/header.cpp	219;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/c/header.cpp	244;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-allstubs.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-allstubs.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te-vfp.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te-vfp.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv5te.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a-neon.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a-neon.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-armv7-a.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-portable.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-portable.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86-atom.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86-atom.cpp	251;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86.cpp	226;"	d	file:
SET_REGISTER_AS_OBJECT	mterp/out/InterpC-x86.cpp	251;"	d	file:
SET_REGISTER_DOUBLE	mterp/c/header.cpp	237;"	d	file:
SET_REGISTER_DOUBLE	mterp/c/header.cpp	252;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-allstubs.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-allstubs.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te-vfp.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te-vfp.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv5te.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a-neon.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a-neon.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-armv7-a.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-portable.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-portable.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-x86-atom.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-x86-atom.cpp	259;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-x86.cpp	244;"	d	file:
SET_REGISTER_DOUBLE	mterp/out/InterpC-x86.cpp	259;"	d	file:
SET_REGISTER_FLOAT	mterp/c/header.cpp	231;"	d	file:
SET_REGISTER_FLOAT	mterp/c/header.cpp	250;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-allstubs.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-allstubs.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv5te-vfp.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv5te-vfp.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv5te.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv5te.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a-neon.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a-neon.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-armv7-a.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-portable.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-portable.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-x86-atom.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-x86-atom.cpp	257;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-x86.cpp	238;"	d	file:
SET_REGISTER_FLOAT	mterp/out/InterpC-x86.cpp	257;"	d	file:
SET_REGISTER_INT	mterp/c/header.cpp	221;"	d	file:
SET_REGISTER_INT	mterp/c/header.cpp	246;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-allstubs.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-allstubs.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv5te-vfp.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv5te-vfp.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv5te.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv5te.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv7-a-neon.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv7-a-neon.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv7-a.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-armv7-a.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-portable.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-portable.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-x86-atom.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-x86-atom.cpp	253;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-x86.cpp	228;"	d	file:
SET_REGISTER_INT	mterp/out/InterpC-x86.cpp	253;"	d	file:
SET_REGISTER_WIDE	mterp/c/header.cpp	225;"	d	file:
SET_REGISTER_WIDE	mterp/c/header.cpp	248;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-allstubs.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-allstubs.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv5te-vfp.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv5te-vfp.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv5te.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv5te.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv7-a-neon.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv7-a-neon.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv7-a.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-armv7-a.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-portable.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-portable.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-x86-atom.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-x86-atom.cpp	255;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-x86.cpp	232;"	d	file:
SET_REGISTER_WIDE	mterp/out/InterpC-x86.cpp	255;"	d	file:
SET_STATIC_TYPE_FIELD	Jni.cpp	1787;"	d	file:
SET_TYPE_FIELD	Jni.cpp	1865;"	d	file:
SET_VREG	mterp/armv5te/header.S	/^#define SET_VREG(_reg, _vreg)   str     _reg, [rFP, _vreg, lsl #2]$/;"	d
SET_VREG	mterp/out/InterpAsm-armv5te-vfp.S	/^#define SET_VREG(_reg, _vreg)   str     _reg, [rFP, _vreg, lsl #2]$/;"	d
SET_VREG	mterp/out/InterpAsm-armv5te.S	/^#define SET_VREG(_reg, _vreg)   str     _reg, [rFP, _vreg, lsl #2]$/;"	d
SET_VREG	mterp/out/InterpAsm-armv7-a-neon.S	/^#define SET_VREG(_reg, _vreg)   str     _reg, [rFP, _vreg, lsl #2]$/;"	d
SET_VREG	mterp/out/InterpAsm-armv7-a.S	/^#define SET_VREG(_reg, _vreg)   str     _reg, [rFP, _vreg, lsl #2]$/;"	d
SHOW_REG_DETAILS	analysis/CodeVerify.cpp	61;"	d	file:
SINGLEREG	compiler/codegen/arm/ArmLIR.h	73;"	d
SINGLESTEP_BREAK_MASK	interp/InterpState.h	79;"	d
SINGLE_STEP_OP	compiler/Compiler.h	68;"	d
SIZE_MAX	alloc/HeapSource.cpp	22;"	d	file:
SOLIDITY_FINALIZABLE	alloc/DdmHeap.cpp	/^    SOLIDITY_FINALIZABLE = 5,$/;"	e	enum:HpsgSolidity	file:
SOLIDITY_FREE	alloc/DdmHeap.cpp	/^    SOLIDITY_FREE = 0,$/;"	e	enum:HpsgSolidity	file:
SOLIDITY_HARD	alloc/DdmHeap.cpp	/^    SOLIDITY_HARD = 1,$/;"	e	enum:HpsgSolidity	file:
SOLIDITY_PHANTOM	alloc/DdmHeap.cpp	/^    SOLIDITY_PHANTOM = 4,$/;"	e	enum:HpsgSolidity	file:
SOLIDITY_SOFT	alloc/DdmHeap.cpp	/^    SOLIDITY_SOFT = 2,$/;"	e	enum:HpsgSolidity	file:
SOLIDITY_SWEEP	alloc/DdmHeap.cpp	/^    SOLIDITY_SWEEP = 6,$/;"	e	enum:HpsgSolidity	file:
SOLIDITY_WEAK	alloc/DdmHeap.cpp	/^    SOLIDITY_WEAK = 3,$/;"	e	enum:HpsgSolidity	file:
SPEC_MASK	shadowlib/Netref.h	/^static const uint64_t SPEC_MASK = 0x1;$/;"	v
SPEC_POS	shadowlib/Netref.h	/^static const uint8_t SPEC_POS = 63;$/;"	v
SPILL	mterp/out/InterpAsm-x86.S	/^#define SPILL(reg) movl reg##,reg##_SPILL(%ebp)$/;"	d
SPILL	mterp/x86/header.S	/^#define SPILL(reg) movl reg##,reg##_SPILL(%ebp)$/;"	d
SPILL_TMP1	mterp/out/InterpAsm-x86.S	/^#define SPILL_TMP1(reg) movl reg,TMP_SPILL1(%ebp)$/;"	d
SPILL_TMP1	mterp/x86/header.S	/^#define SPILL_TMP1(reg) movl reg,TMP_SPILL1(%ebp)$/;"	d
SPILL_TMP2	mterp/out/InterpAsm-x86.S	/^#define SPILL_TMP2(reg) movl reg,TMP_SPILL2(%ebp)$/;"	d
SPILL_TMP2	mterp/x86/header.S	/^#define SPILL_TMP2(reg) movl reg,TMP_SPILL2(%ebp)$/;"	d
SPILL_TMP3	mterp/out/InterpAsm-x86.S	/^#define SPILL_TMP3(reg) movl reg,TMP_SPILL3(%ebp)$/;"	d
SPILL_TMP3	mterp/x86/header.S	/^#define SPILL_TMP3(reg) movl reg,TMP_SPILL3(%ebp)$/;"	d
SP_ALL	jdwp/JdwpConstants.h	/^    SP_ALL                  = 2,    \/* suspend all threads *\/$/;"	e	enum:JdwpSuspendPolicy
SP_EVENT_THREAD	jdwp/JdwpConstants.h	/^    SP_EVENT_THREAD         = 1,    \/* suspend event thread *\/$/;"	e	enum:JdwpSuspendPolicy
SP_NONE	jdwp/JdwpConstants.h	/^    SP_NONE                 = 0,    \/* suspend no threads *\/$/;"	e	enum:JdwpSuspendPolicy
SREG	compiler/codegen/RallocUtil.cpp	30;"	d	file:
SSARepresentation	compiler/Dataflow.h	/^typedef struct SSARepresentation {$/;"	s
SSARepresentation	compiler/Dataflow.h	/^} SSARepresentation;$/;"	t	typeref:struct:SSARepresentation
SS_LINE	jdwp/JdwpConstants.h	/^    SS_LINE                 = 1,    \/* if possible, step to next line *\/$/;"	e	enum:JdwpStepSize
SS_MIN	jdwp/JdwpConstants.h	/^    SS_MIN                  = 0,    \/* step by minimum (e.g. 1 bytecode inst) *\/$/;"	e	enum:JdwpStepSize
STACK_OVERFLOW_RESERVE	interp/Stack.h	164;"	d
STATIC_OVERHEAD_NAME	hprof/HprofHeap.cpp	33;"	d	file:
STRING_FIELDOFF_COUNT	UtfString.h	42;"	d
STRING_FIELDOFF_COUNT	UtfString.h	48;"	d
STRING_FIELDOFF_HASHCODE	UtfString.h	43;"	d
STRING_FIELDOFF_HASHCODE	UtfString.h	46;"	d
STRING_FIELDOFF_OFFSET	UtfString.h	41;"	d
STRING_FIELDOFF_OFFSET	UtfString.h	47;"	d
STRING_FIELDOFF_VALUE	UtfString.h	40;"	d
STRING_FIELDOFF_VALUE	UtfString.h	45;"	d
STUB_HACK	mterp/cstubs/stubdefs.cpp	33;"	d	file:
STUB_HACK	mterp/out/InterpC-allstubs.cpp	403;"	d	file:
STUB_HACK	mterp/out/InterpC-armv5te-vfp.cpp	403;"	d	file:
STUB_HACK	mterp/out/InterpC-armv5te.cpp	403;"	d	file:
STUB_HACK	mterp/out/InterpC-armv7-a-neon.cpp	403;"	d	file:
STUB_HACK	mterp/out/InterpC-armv7-a.cpp	403;"	d	file:
STUB_HACK	mterp/out/InterpC-portable.cpp	383;"	d	file:
STUB_HACK	mterp/out/InterpC-x86-atom.cpp	403;"	d	file:
STUB_HACK	mterp/out/InterpC-x86.cpp	403;"	d	file:
STUB_HACK	mterp/portable/stubdefs.cpp	13;"	d	file:
SUSPEND_FOR_CC_RESET	Thread.h	/^    SUSPEND_FOR_CC_RESET,    \/\/ code-cache reset$/;"	e	enum:SuspendCause
SUSPEND_FOR_DEBUG	Thread.h	/^    SUSPEND_FOR_DEBUG,$/;"	e	enum:SuspendCause
SUSPEND_FOR_DEBUG_EVENT	Thread.h	/^    SUSPEND_FOR_DEBUG_EVENT,$/;"	e	enum:SuspendCause
SUSPEND_FOR_DEX_OPT	Thread.h	/^    SUSPEND_FOR_DEX_OPT,$/;"	e	enum:SuspendCause
SUSPEND_FOR_GC	Thread.h	/^    SUSPEND_FOR_GC,$/;"	e	enum:SuspendCause
SUSPEND_FOR_HPROF	Thread.h	/^    SUSPEND_FOR_HPROF,$/;"	e	enum:SuspendCause
SUSPEND_FOR_IC_PATCH	Thread.h	/^    SUSPEND_FOR_IC_PATCH,    \/\/ polymorphic callsite inline-cache patch$/;"	e	enum:SuspendCause
SUSPEND_FOR_REFRESH	Thread.h	/^    SUSPEND_FOR_REFRESH,     \/\/ Reload data cached in interpState$/;"	e	enum:SuspendCause
SUSPEND_FOR_STACK_DUMP	Thread.h	/^    SUSPEND_FOR_STACK_DUMP,$/;"	e	enum:SuspendCause
SUSPEND_FOR_TBL_RESIZE	Thread.h	/^    SUSPEND_FOR_TBL_RESIZE,  \/\/ jit-table resize$/;"	e	enum:SuspendCause
SUSPEND_FOR_VERIFY	Thread.h	/^    SUSPEND_FOR_VERIFY,$/;"	e	enum:SuspendCause
SUSPEND_NOT	Thread.h	/^    SUSPEND_NOT = 0,$/;"	e	enum:SuspendCause
SUSPEND_STATUS_NOT_SUSPENDED	jdwp/JdwpConstants.h	/^    SUSPEND_STATUS_NOT_SUSPENDED = 0,$/;"	e	enum:JdwpSuspendStatus
SUSPEND_STATUS_SUSPENDED	jdwp/JdwpConstants.h	/^    SUSPEND_STATUS_SUSPENDED     = 1,$/;"	e	enum:JdwpSuspendStatus
SWAP_LOCK	Atomic.cpp	171;"	d	file:
SWAP_LOCK_COUNT	Atomic.cpp	168;"	d	file:
SafePointCallback	interp/InterpState.h	/^typedef bool (*SafePointCallback)(struct Thread* thread, void* arg);$/;"	t
SchedulerStats	Thread.cpp	/^struct SchedulerStats {$/;"	s	file:
ScopedCheck	CheckJni.cpp	/^    explicit ScopedCheck(JNIEnv* env, int flags, const char* functionName) {$/;"	f	class:ScopedCheck
ScopedCheck	CheckJni.cpp	/^    explicit ScopedCheck(bool hasMethod, const char* functionName) {$/;"	f	class:ScopedCheck
ScopedCheck	CheckJni.cpp	/^class ScopedCheck {$/;"	c	file:
ScopedCheckJniThreadState	CheckJni.cpp	/^    explicit ScopedCheckJniThreadState(JNIEnv* env) {$/;"	f	class:ScopedCheckJniThreadState
ScopedCheckJniThreadState	CheckJni.cpp	/^class ScopedCheckJniThreadState {$/;"	c	file:
ScopedJniThreadState	Jni.cpp	/^    explicit ScopedJniThreadState(JNIEnv* env) {$/;"	f	class:ScopedJniThreadState
ScopedJniThreadState	Jni.cpp	/^class ScopedJniThreadState {$/;"	c	file:
ScopedMutex	shadowlib/ShadowLib.h	/^		ScopedMutex(){}$/;"	f	class:ScopedMutex
ScopedMutex	shadowlib/ShadowLib.h	/^		ScopedMutex(pthread_mutex_t *mtx):local_mtx(mtx){$/;"	f	class:ScopedMutex
ScopedMutex	shadowlib/ShadowLib.h	/^class ScopedMutex{$/;"	c
ScopedShutdown	Init.cpp	/^    ScopedShutdown() : armed_(true) {$/;"	f	class:ScopedShutdown
ScopedShutdown	Init.cpp	/^class ScopedShutdown {$/;"	c	file:
SelfVerificationState	interp/InterpState.h	/^enum SelfVerificationState {$/;"	g
Send	shadowlib/ReProtocol.h	/^		bool Send(MsgType msg){$/;"	f	class:ReProtocol
Send	shadowlib/ReProtocol.h	/^		bool Send(const char* data, int length){$/;"	f	class:ReProtocol
Send	shadowlib/ReProtocol.h	/^		bool Send(const char* data, int length, const char* lastdata, int lastlength){$/;"	f	class:ReProtocol
Send	shadowlib/Socket.cpp	/^bool Socket::Send ( const char* s, int length )$/;"	f	class:Socket
SendArgument	shadowlib/ReProtocol.h	/^		bool SendArgument(thread_id_type tid, const char* data, int length){$/;"	f	class:ReProtocol
SendJboolean	shadowlib/ReProtocol.h	/^		int SendJboolean(thread_id_type tid, jboolean data){$/;"	f	class:ReProtocol
SendJbyte	shadowlib/ReProtocol.h	/^		int SendJbyte(thread_id_type tid, jbyte data){$/;"	f	class:ReProtocol
SendJchar	shadowlib/ReProtocol.h	/^		int SendJchar(thread_id_type tid, jchar data){$/;"	f	class:ReProtocol
SendJdouble	shadowlib/ReProtocol.h	/^		int SendJdouble(thread_id_type tid, jdouble data){$/;"	f	class:ReProtocol
SendJfloat	shadowlib/ReProtocol.h	/^		int SendJfloat(thread_id_type tid, jfloat data){$/;"	f	class:ReProtocol
SendJint	shadowlib/ReProtocol.h	/^		int SendJint(thread_id_type tid, jint data){$/;"	f	class:ReProtocol
SendJlong	shadowlib/ReProtocol.h	/^		int SendJlong(thread_id_type tid, jlong data){$/;"	f	class:ReProtocol
SendJobject	shadowlib/ReProtocol.h	/^		int SendJobject(thread_id_type tid, jlong netref){$/;"	f	class:ReProtocol
SendJshort	shadowlib/ReProtocol.h	/^		int SendJshort(thread_id_type tid, jshort data){$/;"	f	class:ReProtocol
SendStringObject	shadowlib/ReProtocol.h	/^		bool SendStringObject(thread_id_type tid, jlong netref, const jchar* utf8, int len){$/;"	f	class:ReProtocol
SendStringObject	shadowlib/ReProtocol.h	/^		int SendStringObject(thread_id_type tid, jlong netref, const char* utf8, int len){$/;"	f	class:ReProtocol
SendStringUtf8	shadowlib/ReProtocol.h	/^		int SendStringUtf8(thread_id_type tid, const char* string_utf8, uint16_t size_in_bytes){$/;"	f	class:ReProtocol
SendThreadObject	shadowlib/ReProtocol.h	/^		int SendThreadObject(thread_id_type tid, jlong netref, const char* threadName, int len, jboolean isDaemon){$/;"	f	class:ReProtocol
Set	shadowlib/Map.h	/^		void Set(const K &key, const V &value) {$/;"	f	class:Map
SetAndGetNetref	shadowlib/ReAgent.cpp	/^jlong SetAndGetNetref(Object* obj){$/;"	f
SetObjectArrayElement	Jni.cpp	/^static void SetObjectArrayElement(JNIEnv* env, jobjectArray jarr, jsize index, jobject jobj) {$/;"	f	file:
SetOrderingId	shadowlib/ReProtocol.h	/^		void SetOrderingId(thread_id_type tid, ordering_id_type oid){$/;"	f	class:ReProtocol
ShadowHeap	interp/Jit.h	/^struct ShadowHeap {$/;"	s
ShadowLib_OnLoad	shadowlib/ReAgent.cpp	/^jint ShadowLib_OnLoad(JavaVM* vm, void* reserved){$/;"	f
ShadowLib_SystemServer_OnLoad	shadowlib/ReAgent.cpp	/^jint ShadowLib_SystemServer_OnLoad(JavaVM* vm, void* reserved){$/;"	f
ShadowLib_Zygote_OnLoad	shadowlib/ReAgent.cpp	/^jint ShadowLib_Zygote_OnLoad(JavaVM* vm, void* reserved){$/;"	f
ShadowSpace	interp/Jit.h	/^struct ShadowSpace {$/;"	s
SharedLib	Native.cpp	/^struct SharedLib {$/;"	s	file:
Socket	shadowlib/Socket.cpp	/^Socket::Socket(bool need ) :$/;"	f	class:Socket
Socket	shadowlib/Socket.h	/^class Socket$/;"	c
StackSaveArea	interp/Stack.h	/^struct StackSaveArea {$/;"	s
StaticField	oo/Object.h	/^struct StaticField : Field {$/;"	s
StepControl	Debugger.h	/^struct StepControl {$/;"	s
Stopwatch	test/TestIndirectRefTable.cpp	/^    Stopwatch() {$/;"	f	class:Stopwatch
Stopwatch	test/TestIndirectRefTable.cpp	/^class Stopwatch {$/;"	c	file:
StringAppendF	Misc.cpp	/^void StringAppendF(std::string* dst, const char* format, ...) {$/;"	f
StringAppendV	Misc.cpp	/^void StringAppendV(std::string* dst, const char* format, va_list ap) {$/;"	f
StringObject	oo/Object.h	/^struct StringObject : Object {$/;"	s
StringPrintf	Misc.cpp	/^std::string StringPrintf(const char* fmt, ...) {$/;"	f
String_charAt	native/java_lang_String.cpp	/^static void String_charAt(const u4* args, JValue* pResult)$/;"	f	file:
String_compareTo	native/java_lang_String.cpp	/^static void String_compareTo(const u4* args, JValue* pResult)$/;"	f	file:
String_equals	native/java_lang_String.cpp	/^static void String_equals(const u4* args, JValue* pResult)$/;"	f	file:
String_fastIndexOf	native/java_lang_String.cpp	/^static void String_fastIndexOf(const u4* args, JValue* pResult)$/;"	f	file:
String_intern	native/java_lang_String.cpp	/^static void String_intern(const u4* args, JValue* pResult)$/;"	f	file:
String_isEmpty	native/java_lang_String.cpp	/^static void String_isEmpty(const u4* args, JValue* pResult)$/;"	f	file:
String_length	native/java_lang_String.cpp	/^static void String_length(const u4* args, JValue* pResult)$/;"	f	file:
SuccessorBlockInfo	compiler/CompilerIR.h	/^typedef struct SuccessorBlockInfo {$/;"	s
SuccessorBlockInfo	compiler/CompilerIR.h	/^} SuccessorBlockInfo;$/;"	t	typeref:struct:SuccessorBlockInfo
SuspendCause	Thread.h	/^enum SuspendCause {$/;"	g
SweepContext	alloc/MarkSweep.cpp	/^struct SweepContext {$/;"	s	file:
TEMPLATE_INLINE_PROFILING	compiler/template/armv5te/TEMPLATE_INVOKE_METHOD_CHAIN_PROF.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/armv5te/TEMPLATE_INVOKE_METHOD_NATIVE_PROF.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/armv5te/TEMPLATE_INVOKE_METHOD_NO_OPT_PROF.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/armv5te/TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/armv5te/TEMPLATE_RETURN_PROF.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_INLINE_PROFILING	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define TEMPLATE_INLINE_PROFILING$/;"	d
TEMPLATE_LAST_MARK	compiler/codegen/arm/armv5te-vfp/ArchVariant.h	/^    TEMPLATE_LAST_MARK,$/;"	e	enum:TemplateOpcode
TEMPLATE_LAST_MARK	compiler/codegen/arm/armv5te/ArchVariant.h	/^    TEMPLATE_LAST_MARK,$/;"	e	enum:TemplateOpcode
TEMPLATE_LAST_MARK	compiler/codegen/arm/armv7-a-neon/ArchVariant.h	/^    TEMPLATE_LAST_MARK,$/;"	e	enum:__anon41
TEMPLATE_LAST_MARK	compiler/codegen/arm/armv7-a/ArchVariant.h	/^    TEMPLATE_LAST_MARK,$/;"	e	enum:TemplateOpcode
TEMPLATE_LAST_MARK	compiler/codegen/x86/ia32/ArchVariant.h	/^    TEMPLATE_LAST_MARK,$/;"	e	enum:TemplateOpcode
TEST_UNMAP	alloc/TEST/HeapBitmapTest/main.c	44;"	d	file:
TGT_LIR	compiler/codegen/arm/armv5te-vfp/Codegen.cpp	18;"	d	file:
TGT_LIR	compiler/codegen/arm/armv5te/Codegen.cpp	18;"	d	file:
TGT_LIR	compiler/codegen/arm/armv7-a-neon/Codegen.cpp	18;"	d	file:
TGT_LIR	compiler/codegen/arm/armv7-a/Codegen.cpp	18;"	d	file:
THREAD_COUNT	test/AtomicTest.cpp	36;"	d	file:
THREAD_GROUP_ALL	Debugger.cpp	90;"	d	file:
THREAD_INITIALIZING	Thread.h	/^    THREAD_INITIALIZING = 5,        \/* allocated, not yet running *\/$/;"	e	enum:ThreadStatus
THREAD_MAX_PRIORITY	Thread.h	/^    THREAD_MAX_PRIORITY     = 10,$/;"	e	enum:__anon11
THREAD_MIN_PRIORITY	Thread.h	/^    THREAD_MIN_PRIORITY     = 1,$/;"	e	enum:__anon11
THREAD_MONITOR	Thread.h	/^    THREAD_MONITOR      = 3,        \/* BLOCKED on a monitor *\/$/;"	e	enum:ThreadStatus
THREAD_NATIVE	Thread.h	/^    THREAD_NATIVE       = 7,        \/* off in a JNI native method *\/$/;"	e	enum:ThreadStatus
THREAD_NORM_PRIORITY	Thread.h	/^    THREAD_NORM_PRIORITY    = 5,$/;"	e	enum:__anon11
THREAD_RUNNING	Thread.h	/^    THREAD_RUNNING      = 1,        \/* RUNNABLE or running now *\/$/;"	e	enum:ThreadStatus
THREAD_STARTING	Thread.h	/^    THREAD_STARTING     = 6,        \/* started, not yet on thread list *\/$/;"	e	enum:ThreadStatus
THREAD_SUSPENDED	Thread.h	/^    THREAD_SUSPENDED    = 9,        \/* suspended, usually by GC or debugger *\/$/;"	e	enum:ThreadStatus
THREAD_TIMED_WAIT	Thread.h	/^    THREAD_TIMED_WAIT   = 2,        \/* TIMED_WAITING in Object.wait() *\/$/;"	e	enum:ThreadStatus
THREAD_UNDEFINED	Thread.h	/^    THREAD_UNDEFINED    = -1,       \/* makes enum compatible with int32_t *\/$/;"	e	enum:ThreadStatus
THREAD_VMWAIT	Thread.h	/^    THREAD_VMWAIT       = 8,        \/* waiting on a VM resource *\/$/;"	e	enum:ThreadStatus
THREAD_WAIT	Thread.h	/^    THREAD_WAIT         = 4,        \/* WAITING in Object.wait() *\/$/;"	e	enum:ThreadStatus
THREAD_ZOMBIE	Thread.h	/^    THREAD_ZOMBIE       = 0,        \/* TERMINATED *\/$/;"	e	enum:ThreadStatus
TMP_SPILL1	mterp/out/InterpAsm-x86.S	/^#define TMP_SPILL1     (-32)$/;"	d
TMP_SPILL1	mterp/x86/header.S	/^#define TMP_SPILL1     (-32)$/;"	d
TMP_SPILL2	mterp/out/InterpAsm-x86.S	/^#define TMP_SPILL2     (-36)$/;"	d
TMP_SPILL2	mterp/x86/header.S	/^#define TMP_SPILL2     (-36)$/;"	d
TMP_SPILL3	mterp/out/InterpAsm-x86.S	/^#define TMP_SPILL3     (-20)$/;"	d
TMP_SPILL3	mterp/x86/header.S	/^#define TMP_SPILL3     (-20)$/;"	d
TOKEN_CHAR	Profile.h	166;"	d
TRACE	alloc/TEST/HeapBitmapTest/main.c	17;"	d	file:
TRACE	alloc/TEST/HeapBitmapTest/main.c	19;"	d	file:
TRACE_ALLOC_COUNTS	Profile.h	/^    TRACE_ALLOC_COUNTS      = 0x01,$/;"	e	enum:__anon1
TRACE_HEADER_LEN	Profile.cpp	77;"	d	file:
TRACE_MAGIC	Profile.cpp	76;"	d	file:
TRACE_METHOD_ENTER	Profile.h	113;"	d
TRACE_METHOD_EXIT	Profile.h	120;"	d
TRACE_METHOD_UNROLL	Profile.h	127;"	d
TRACE_REC_SIZE_DUAL_CLOCK	Profile.cpp	75;"	d	file:
TRACE_REC_SIZE_SINGLE_CLOCK	Profile.cpp	74;"	d	file:
TS_MONITOR	jdwp/JdwpConstants.h	/^    TS_MONITOR              = 3,        \/\/ WAITING (monitor wait)$/;"	e	enum:JdwpThreadStatus
TS_RUNNING	jdwp/JdwpConstants.h	/^    TS_RUNNING              = 1,        \/\/ RUNNING$/;"	e	enum:JdwpThreadStatus
TS_SLEEPING	jdwp/JdwpConstants.h	/^    TS_SLEEPING             = 2,        \/\/ (in Thread.sleep())$/;"	e	enum:JdwpThreadStatus
TS_WAIT	jdwp/JdwpConstants.h	/^    TS_WAIT                 = 4,        \/\/ (in Object.wait())$/;"	e	enum:JdwpThreadStatus
TS_ZOMBIE	jdwp/JdwpConstants.h	/^    TS_ZOMBIE               = 0,$/;"	e	enum:JdwpThreadStatus
TT_ARRAY	jdwp/JdwpConstants.h	/^    TT_ARRAY                = 3,$/;"	e	enum:JdwpTypeTag
TT_CLASS	jdwp/JdwpConstants.h	/^    TT_CLASS                = 1,$/;"	e	enum:JdwpTypeTag
TT_INTERFACE	jdwp/JdwpConstants.h	/^    TT_INTERFACE            = 2,$/;"	e	enum:JdwpTypeTag
TemplateOpcode	compiler/codegen/arm/armv5te-vfp/ArchVariant.h	/^enum TemplateOpcode {$/;"	g
TemplateOpcode	compiler/codegen/arm/armv5te/ArchVariant.h	/^enum TemplateOpcode {$/;"	g
TemplateOpcode	compiler/codegen/arm/armv7-a-neon/ArchVariant.h	/^} TemplateOpcode;$/;"	t	typeref:enum:__anon41
TemplateOpcode	compiler/codegen/arm/armv7-a/ArchVariant.h	/^enum TemplateOpcode {$/;"	g
TemplateOpcode	compiler/codegen/x86/ia32/ArchVariant.h	/^enum TemplateOpcode {$/;"	g
Thread	Thread.h	/^struct Thread {$/;"	s
ThreadStatus	Thread.h	/^enum ThreadStatus {$/;"	g
Throw	Jni.cpp	/^static jint Throw(JNIEnv* env, jthrowable jobj) {$/;"	f	file:
ThrowNew	Jni.cpp	/^static jint ThrowNew(JNIEnv* env, jclass jclazz, const char* message) {$/;"	f	file:
ToReflectedField	Jni.cpp	/^static jobject ToReflectedField(JNIEnv* env, jclass jcls, jfieldID fieldID, jboolean isStatic) {$/;"	f	file:
ToReflectedMethod	Jni.cpp	/^static jobject ToReflectedMethod(JNIEnv* env, jclass jcls, jmethodID methodID, jboolean isStatic) {$/;"	f	file:
TraceProfilingModes	Globals.h	/^enum TraceProfilingModes {$/;"	g
TypeCategory	analysis/CodeVerify.cpp	/^enum TypeCategory {$/;"	g	file:
U2	arch/x86-atom/Call386ABI.S	/^U2:$/;"	l
U2_TO_BUF_BE	hprof/HprofOutput.cpp	24;"	d	file:
U4_TO_BUF_BE	hprof/HprofOutput.cpp	33;"	d	file:
U8_TO_BUF_BE	hprof/HprofOutput.cpp	44;"	d	file:
UNIQUE_ERROR	hprof/Hprof.h	23;"	d
UNIX_PATH_MAX	shadowlib/ReAgent.cpp	26;"	d	file:
UNIX_PATH_MAX	shadowlib/Socket.cpp	22;"	d	file:
UNKNOWN_TARGET	compiler/Frontend.cpp	57;"	d	file:
UNLIKELY	Common.h	56;"	d
UNPROTECT_CODE_CACHE	compiler/Compiler.h	51;"	d
UNPROTECT_CODE_CACHE_ATTRS	compiler/Compiler.h	48;"	d
UNSPILL	mterp/out/InterpAsm-x86.S	/^#define UNSPILL(reg) movl reg##_SPILL(%ebp),reg$/;"	d
UNSPILL	mterp/x86/header.S	/^#define UNSPILL(reg) movl reg##_SPILL(%ebp),reg$/;"	d
UNSPILL_TMP1	mterp/out/InterpAsm-x86.S	/^#define UNSPILL_TMP1(reg) movl TMP_SPILL1(%ebp),reg$/;"	d
UNSPILL_TMP1	mterp/x86/header.S	/^#define UNSPILL_TMP1(reg) movl TMP_SPILL1(%ebp),reg$/;"	d
UNSPILL_TMP2	mterp/out/InterpAsm-x86.S	/^#define UNSPILL_TMP2(reg) movl TMP_SPILL2(%ebp),reg$/;"	d
UNSPILL_TMP2	mterp/x86/header.S	/^#define UNSPILL_TMP2(reg) movl TMP_SPILL2(%ebp),reg$/;"	d
UNSPILL_TMP3	mterp/out/InterpAsm-x86.S	/^#define UNSPILL_TMP3(reg) movl TMP_SPILL3(%ebp),reg$/;"	d
UNSPILL_TMP3	mterp/x86/header.S	/^#define UNSPILL_TMP3(reg) movl TMP_SPILL3(%ebp),reg$/;"	d
UNUSED_PARAMETER	Misc.h	35;"	d
UPDATE_CODE_CACHE_PATCHES	compiler/codegen/arm/Assemble.cpp	899;"	d	file:
UPDATE_CODE_CACHE_PATCHES	compiler/codegen/arm/Assemble.cpp	901;"	d	file:
UPDATE_CODE_CACHE_PATCHES	compiler/codegen/x86/Assemble.cpp	30;"	d	file:
UPDATE_CODE_CACHE_PATCHES	compiler/codegen/x86/Assemble.cpp	32;"	d	file:
UPDATE_MAGIC_PAGE	Profile.cpp	36;"	d	file:
USES_CCODES	compiler/codegen/arm/ArmLIR.h	697;"	d
USE_ASHMEM	LinearAlloc.cpp	29;"	d	file:
USE_ATOMIC	test/AtomicTest.cpp	35;"	d	file:
UninitInstanceMap	analysis/CodeVerify.h	/^struct UninitInstanceMap {$/;"	s
UnionJNIEnvToVoid	shadowlib/ReAgent.cpp	/^}UnionJNIEnvToVoid;$/;"	t	typeref:union:__anon36	file:
Unlock	shadowlib/Lock.h	/^		void Unlock(lock_id_type lockid){$/;"	f	class:LockBuffer
UnregisterNatives	Jni.cpp	/^static jint UnregisterNatives(JNIEnv* env, jclass jclazz) {$/;"	f	file:
Update	shadowlib/ReQueue.h	/^		virtual bool Update(int pos, const char* input, int len){$/;"	f	class:BaseQueue
UpdateMutex	shadowlib/ReProtocol.h	/^		void UpdateMutex(){$/;"	f	class:ReProtocol
VERBOSE	alloc/TEST/HeapBitmapTest/main.c	15;"	d	file:
VERIFY_ERROR_ACCESS_CLASS	analysis/DexPrepare.h	/^    VERIFY_ERROR_ACCESS_CLASS,  \/* IllegalAccessError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_ACCESS_FIELD	analysis/DexPrepare.h	/^    VERIFY_ERROR_ACCESS_FIELD,  \/* IllegalAccessError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_ACCESS_METHOD	analysis/DexPrepare.h	/^    VERIFY_ERROR_ACCESS_METHOD, \/* IllegalAccessError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_CLASS_CHANGE	analysis/DexPrepare.h	/^    VERIFY_ERROR_CLASS_CHANGE,  \/* IncompatibleClassChangeError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_GENERIC	analysis/DexPrepare.h	/^    VERIFY_ERROR_GENERIC,       \/* VerifyError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_INSTANTIATION	analysis/DexPrepare.h	/^    VERIFY_ERROR_INSTANTIATION, \/* InstantiationError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_NONE	analysis/DexPrepare.h	/^    VERIFY_ERROR_NONE = 0,      \/* no error; must be zero *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_NO_CLASS	analysis/DexPrepare.h	/^    VERIFY_ERROR_NO_CLASS,      \/* NoClassDefFoundError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_NO_FIELD	analysis/DexPrepare.h	/^    VERIFY_ERROR_NO_FIELD,      \/* NoSuchFieldError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_NO_METHOD	analysis/DexPrepare.h	/^    VERIFY_ERROR_NO_METHOD,     \/* NoSuchMethodError *\/$/;"	e	enum:VerifyError
VERIFY_ERROR_REF_CLASS	analysis/DexPrepare.h	/^    VERIFY_ERROR_REF_CLASS  = 0,$/;"	e	enum:VerifyErrorRefType
VERIFY_ERROR_REF_FIELD	analysis/DexPrepare.h	/^    VERIFY_ERROR_REF_FIELD  = 1,$/;"	e	enum:VerifyErrorRefType
VERIFY_ERROR_REF_METHOD	analysis/DexPrepare.h	/^    VERIFY_ERROR_REF_METHOD = 2,$/;"	e	enum:VerifyErrorRefType
VERIFY_GC_INST_MASK	analysis/DexVerify.h	53;"	d
VERIFY_MODE_ALL	analysis/DexVerify.h	/^    VERIFY_MODE_ALL$/;"	e	enum:DexClassVerifyMode
VERIFY_MODE_NONE	analysis/DexVerify.h	/^    VERIFY_MODE_NONE,$/;"	e	enum:DexClassVerifyMode
VERIFY_MODE_REMOTE	analysis/DexVerify.h	/^    VERIFY_MODE_REMOTE,$/;"	e	enum:DexClassVerifyMode
VERIFY_MODE_UNKNOWN	analysis/DexVerify.h	/^    VERIFY_MODE_UNKNOWN = 0,$/;"	e	enum:DexClassVerifyMode
VERIFY_OK	analysis/DexPrepare.h	82;"	d
VOID_RETURN	CheckJni.cpp	1668;"	d	file:
VREG_INDEX_TO_ADDR	mterp/armv5te/header.S	/^#define VREG_INDEX_TO_ADDR(_reg, _vreg) \\$/;"	d
VREG_INDEX_TO_ADDR	mterp/out/InterpAsm-armv5te-vfp.S	/^#define VREG_INDEX_TO_ADDR(_reg, _vreg) \\$/;"	d
VREG_INDEX_TO_ADDR	mterp/out/InterpAsm-armv5te.S	/^#define VREG_INDEX_TO_ADDR(_reg, _vreg) \\$/;"	d
VREG_INDEX_TO_ADDR	mterp/out/InterpAsm-armv7-a-neon.S	/^#define VREG_INDEX_TO_ADDR(_reg, _vreg) \\$/;"	d
VREG_INDEX_TO_ADDR	mterp/out/InterpAsm-armv7-a.S	/^#define VREG_INDEX_TO_ADDR(_reg, _vreg) \\$/;"	d
VerifierData	analysis/CodeVerify.h	/^struct VerifierData {$/;"	s
VerifierStats	analysis/DexVerify.h	/^struct VerifierStats {$/;"	s
VerifyError	analysis/DexPrepare.h	/^enum VerifyError {$/;"	g
VerifyErrorRefType	analysis/DexPrepare.h	/^enum VerifyErrorRefType {$/;"	g
VfyBasicBlock	analysis/VfyBasicBlock.h	/^struct VfyBasicBlock {$/;"	s
Visitor	alloc/Visit.h	/^typedef void Visitor(void *addr, void *arg);$/;"	t
WITH_COPYING_GC	Dvm.mk	/^WITH_COPYING_GC := $(strip $(WITH_COPYING_GC))$/;"	m
WITH_JIT	Android.mk	/^    WITH_JIT := false$/;"	m
WITH_JIT	Dvm.mk	/^WITH_JIT := $(strip $(WITH_JIT))$/;"	m
WhiteReferenceCounter	alloc/CardTable.cpp	/^struct WhiteReferenceCounter {$/;"	s	file:
Word	alloc/MarkSweep.cpp	/^typedef unsigned long Word;$/;"	t	file:
WorkOrderKind	compiler/Compiler.h	/^typedef enum WorkOrderKind {$/;"	g
WorkOrderKind	compiler/Compiler.h	/^} WorkOrderKind;$/;"	t	typeref:enum:WorkOrderKind
X86LIR	compiler/codegen/x86/X86LIR.h	/^typedef struct X86LIR {$/;"	s
X86LIR	compiler/codegen/x86/X86LIR.h	/^} X86LIR;$/;"	t	typeref:struct:X86LIR
X86TargetOptHints	compiler/codegen/x86/X86LIR.h	/^typedef enum X86TargetOptHints {$/;"	g
X86TargetOptHints	compiler/codegen/x86/X86LIR.h	/^} X86TargetOptHints;$/;"	t	typeref:enum:X86TargetOptHints
XcurFrame	Thread.h	/^    void*       XcurFrame;$/;"	m	struct:Thread
ZYGOTE_CLASS_CUTOFF	oo/Class.cpp	166;"	d	file:
ZYGOTE_LOG_TAG	native/dalvik_system_Zygote.cpp	36;"	d	file:
_0	analysis/CodeVerify.cpp	142;"	d	file:
_0	analysis/CodeVerify.cpp	219;"	d	file:
_1	analysis/CodeVerify.cpp	143;"	d	file:
_1	analysis/CodeVerify.cpp	220;"	d	file:
_ARMV5TE	compiler/codegen/arm/armv5te/Codegen.cpp	17;"	d	file:
_ARMV5TE_VFP	compiler/codegen/arm/armv5te-vfp/Codegen.cpp	17;"	d	file:
_ARMV7_A	compiler/codegen/arm/armv7-a/Codegen.cpp	17;"	d	file:
_ARMV7_A_NEON	compiler/codegen/arm/armv7-a-neon/Codegen.cpp	17;"	d	file:
_B	analysis/CodeVerify.cpp	152;"	d	file:
_B	analysis/CodeVerify.cpp	229;"	d	file:
_BUFFER_H_	shadowlib/Buffer.h	2;"	d
_BUFFPACK_H	shadowlib/JniUtility.h	2;"	d
_BUFFPACK_H	shadowlib/buffpack.h	2;"	d
_C	analysis/CodeVerify.cpp	155;"	d	file:
_C	analysis/CodeVerify.cpp	232;"	d	file:
_CLASS_BIT_NUMBER_FROM_OFFSET	oo/Object.h	159;"	d
_CODEGEN_C	compiler/codegen/arm/armv5te-vfp/Codegen.cpp	16;"	d	file:
_CODEGEN_C	compiler/codegen/arm/armv5te/Codegen.cpp	16;"	d	file:
_CODEGEN_C	compiler/codegen/arm/armv7-a-neon/Codegen.cpp	16;"	d	file:
_CODEGEN_C	compiler/codegen/arm/armv7-a/Codegen.cpp	16;"	d	file:
_CODEGEN_C	compiler/codegen/x86/ia32/Codegen.cpp	16;"	d	file:
_D	analysis/CodeVerify.cpp	162;"	d	file:
_D	analysis/CodeVerify.cpp	239;"	d	file:
_DALVIKHEADER_H_	shadowlib/DalvikHeader.h	2;"	d
_DALVIK_GEN_INLINES	Inlines.cpp	21;"	d	file:
_DoubleCapacity	shadowlib/Map.h	/^		void _DoubleCapacity(){$/;"	f	class:Map
_Exist	shadowlib/Map.h	/^		bool _Exist(const K& key){$/;"	f	class:Map
_F	analysis/CodeVerify.cpp	157;"	d	file:
_F	analysis/CodeVerify.cpp	234;"	d	file:
_Get	shadowlib/Map.h	/^		V& _Get(const K &key){$/;"	f	class:Map
_H	analysis/CodeVerify.cpp	148;"	d	file:
_H	analysis/CodeVerify.cpp	225;"	d	file:
_I	analysis/CodeVerify.cpp	156;"	d	file:
_I	analysis/CodeVerify.cpp	233;"	d	file:
_IA32	compiler/codegen/x86/ia32/Codegen.cpp	17;"	d	file:
_J	analysis/CodeVerify.cpp	160;"	d	file:
_J	analysis/CodeVerify.cpp	237;"	d	file:
_N	analysis/CodeVerify.cpp	158;"	d	file:
_N	analysis/CodeVerify.cpp	235;"	d	file:
_NETREF_H	shadowlib/Netref.h	2;"	d
_REPROTOCOL_H_	shadowlib/ReProtocol.h	2;"	d
_REQUEUE_H_	shadowlib/ReQueue.h	2;"	d
_RE_LOCK_H_	shadowlib/Lock.h	2;"	d
_RE_MAP_H_	shadowlib/Map.h	2;"	d
_S	analysis/CodeVerify.cpp	154;"	d	file:
_S	analysis/CodeVerify.cpp	231;"	d	file:
_SHADOWLIB_H_	shadowlib/ShadowLib.h	2;"	d
_SOCKET_H_	shadowlib/Socket.h	4;"	d
_Set	shadowlib/Map.h	/^		void _Set(const K &key, const V &value) {$/;"	f	class:Map
_U	analysis/CodeVerify.cpp	140;"	d	file:
_U	analysis/CodeVerify.cpp	217;"	d	file:
_X	analysis/CodeVerify.cpp	141;"	d	file:
_X	analysis/CodeVerify.cpp	218;"	d	file:
_Y	analysis/CodeVerify.cpp	146;"	d	file:
_Y	analysis/CodeVerify.cpp	223;"	d	file:
_Z	analysis/CodeVerify.cpp	144;"	d	file:
_Z	analysis/CodeVerify.cpp	221;"	d	file:
__	analysis/CodeVerify.cpp	139;"	d	file:
__	analysis/CodeVerify.cpp	216;"	d	file:
__BIG_ENDIAN	Common.h	36;"	d
__BYTE_ORDER	Common.h	39;"	d
__BYTE_ORDER	Common.h	41;"	d
__KERNEL__	Thread.cpp	48;"	d	file:
__KERNEL__	Thread.cpp	55;"	d	file:
__LITTLE_ENDIAN	Common.h	37;"	d
__STDC_LIMIT_MACROS	Init.cpp	20;"	d	file:
__attribute	alloc/TEST/HeapBitmapTest/main.c	7;"	d	file:
__attribute	alloc/TEST/HeapBitmapTest/main.c	9;"	d	file:
_b	analysis/CodeVerify.cpp	151;"	d	file:
_b	analysis/CodeVerify.cpp	228;"	d	file:
_c	analysis/CodeVerify.cpp	149;"	d	file:
_c	analysis/CodeVerify.cpp	226;"	d	file:
_d	analysis/CodeVerify.cpp	163;"	d	file:
_d	analysis/CodeVerify.cpp	240;"	d	file:
_h	analysis/CodeVerify.cpp	147;"	d	file:
_h	analysis/CodeVerify.cpp	224;"	d	file:
_heapBitmapModifyObjectBit	alloc/HeapBitmapInlines.h	/^static unsigned long _heapBitmapModifyObjectBit(HeapBitmap *hb, const void *obj,$/;"	f
_i	analysis/CodeVerify.cpp	150;"	d	file:
_i	analysis/CodeVerify.cpp	227;"	d	file:
_j	analysis/CodeVerify.cpp	161;"	d	file:
_j	analysis/CodeVerify.cpp	238;"	d	file:
_mapPID	shadowlib/ReAgent.cpp	/^void _mapPID(int pid, const char* pname){$/;"	f
_n	analysis/CodeVerify.cpp	159;"	d	file:
_n	analysis/CodeVerify.cpp	236;"	d	file:
_s	analysis/CodeVerify.cpp	153;"	d	file:
_s	analysis/CodeVerify.cpp	230;"	d	file:
_set_net_reference	shadowlib/Netref.h	/^static jlong _set_net_reference(jlong object_id, jint class_id, unsigned char spec, unsigned char cbit) {$/;"	f
_swap_locks	Atomic.cpp	/^static pthread_mutex_t  _swap_locks[SWAP_LOCK_COUNT];$/;"	v	file:
_threadSuspendLock	Globals.h	/^    pthread_mutex_t _threadSuspendLock;$/;"	m	struct:DvmGlobals
_y	analysis/CodeVerify.cpp	145;"	d	file:
_y	analysis/CodeVerify.cpp	222;"	d	file:
abortHook	Globals.h	/^    void        (*abortHook)(void);$/;"	m	struct:DvmGlobals
abortMaybe	CheckJni.cpp	/^static void abortMaybe() {$/;"	f	file:
abortMaybe	IndirectRefTable.cpp	/^static void abortMaybe() {$/;"	f	file:
absoluteTime	Sync.cpp	/^static void absoluteTime(s8 msec, s4 nsec, struct timespec *ts)$/;"	f	file:
accept	jdwp/JdwpPriv.h	/^    bool (*accept)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
accept	shadowlib/Socket.cpp	/^bool Socket::accept ( Socket& new_socket ) const$/;"	f	class:Socket
acceptConnection	jdwp/JdwpAdb.cpp	/^static bool acceptConnection(struct JdwpState* state)$/;"	f	file:
acceptConnection	jdwp/JdwpSocket.cpp	/^static bool acceptConnection(JdwpState* state)$/;"	f	file:
accessFlags	oo/Object.h	/^    u4              accessFlags;$/;"	m	struct:ClassObject
accessFlags	oo/Object.h	/^    u4              accessFlags;$/;"	m	struct:Field
accessFlags	oo/Object.h	/^    u4              accessFlags;$/;"	m	struct:Method
active	Debugger.h	/^    bool active;$/;"	m	struct:StepControl
activeProfilers	Globals.h	/^    volatile int activeProfilers;$/;"	m	struct:DvmGlobals
actualBuffer	CheckJni.cpp	/^    static const u1* actualBuffer(const void* dataBuf) {$/;"	f	struct:GuardedCopy	file:
actualBuffer	CheckJni.cpp	/^    static u1* actualBuffer(void* dataBuf) {$/;"	f	struct:GuardedCopy	file:
actualLength	CheckJni.cpp	/^    static size_t actualLength(size_t length) {$/;"	f	struct:GuardedCopy	file:
adbStateFree	jdwp/JdwpAdb.cpp	/^adbStateFree( JdwpNetState*  netState )$/;"	f	file:
adbStateShutdown	jdwp/JdwpAdb.cpp	/^static void adbStateShutdown(struct JdwpNetState* netState)$/;"	f	file:
add	IndirectRefTable.cpp	/^IndirectRef IndirectRefTable::add(u4 cookie, Object* obj)$/;"	f	class:IndirectRefTable
add	test/AtomicTest.cpp	/^static void add(int32_t addVal)$/;"	f	file:
addGlobalReference	Jni.cpp	/^static jobject addGlobalReference(Object* obj) {$/;"	f	file:
addInitialHeap	alloc/HeapSource.cpp	/^static bool addInitialHeap(HeapSource *hs, mspace msp, size_t maximumSize)$/;"	f	file:
addLocalReference	Jni.cpp	/^static inline jobject addLocalReference(Thread* self, Object* obj) {$/;"	f	file:
addNewHeap	alloc/HeapSource.cpp	/^static bool addNewHeap(HeapSource *hs)$/;"	f	file:
addSharedLibEntry	Native.cpp	/^static SharedLib* addSharedLibEntry(SharedLib* pLib)$/;"	f	file:
addTest	test/AtomicTest.cpp	/^static int addTest = 0;$/;"	v	file:
addToDexFileTable	native/dalvik_system_DexFile.cpp	/^static void addToDexFileTable(DexOrJar* pDexOrJar) {$/;"	f	file:
addToPredecessor	analysis/VfyBasicBlock.cpp	/^static bool addToPredecessor(VerifierData* vdata, VfyBasicBlock* curBlock,$/;"	f	file:
addWeakGlobalReference	Jni.cpp	/^static jobject addWeakGlobalReference(Object* obj) {$/;"	f	file:
addWordData	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *addWordData(CompilationUnit *cUnit, LIR **constantListP,$/;"	f	file:
addr	analysis/CodeVerify.h	/^        int             addr;   \/* code offset, or -1 for method arg ("this") *\/$/;"	m	struct:UninitInstanceMap::__anon14
addr	interp/Interp.cpp	/^    u2*         addr;                   \/* absolute memory address *\/$/;"	m	struct:Breakpoint	file:
addr	interp/Jit.h	/^    int addr;$/;"	m	struct:InstructionTrace
addr	interp/Jit.h	/^    int addr;$/;"	m	struct:ShadowHeap
addrLookupsFound	Globals.h	/^    int                addrLookupsFound;$/;"	m	struct:DvmJitGlobals
addrLookupsNotFound	Globals.h	/^    int                addrLookupsNotFound;$/;"	m	struct:DvmJitGlobals
addrToLineCb	compiler/codegen/arm/Assemble.cpp	/^static int addrToLineCb (void *cnxt, u4 bytecodeOffset, u4 lineNum)$/;"	f	file:
address	interp/Stack.cpp	/^    u4 address;$/;"	m	struct:LineNumFromPcContext	file:
addressSetCb	Debugger.cpp	/^static int addressSetCb (void *cnxt, u4 address, u4 lineNum)$/;"	f	file:
addressToBlock	alloc/Copying.cpp	/^static size_t addressToBlock(const HeapSource *heapSource, const void *addr)$/;"	f	file:
adjustForRightShift	analysis/CodeVerify.cpp	/^static RegType adjustForRightShift(RegisterLine* registerLine, int reg,$/;"	f	file:
adler	CheckJni.cpp	/^    uLong       adler;$/;"	m	struct:GuardedCopy	file:
age	compiler/codegen/arm/ArmLIR.h	/^        unsigned int age:4;     \/\/ default is 0, set lazily by the optimizer$/;"	m	struct:ArmLIR::__anon40
age	compiler/codegen/x86/X86LIR.h	/^    int age;            \/\/ default is 0, set lazily by the optimizer$/;"	m	struct:X86LIR
aliasInfo	compiler/codegen/arm/ArmLIR.h	/^    int aliasInfo;              \/\/ For Dalvik register & litpool disambiguation$/;"	m	struct:ArmLIR
aliasInfo	compiler/codegen/x86/X86LIR.h	/^    int aliasInfo;      \/\/ For Dalvik register access & litpool disambiguation$/;"	m	struct:X86LIR
align32	analysis/RegisterMap.cpp	/^static inline u1* align32(u1* ptr)$/;"	f	file:
alignDown	alloc/Copying.cpp	/^static unsigned long alignDown(unsigned long x, unsigned long n)$/;"	f	file:
alignUp	alloc/Copying.cpp	/^static unsigned long alignUp(unsigned long x, unsigned long n)$/;"	f	file:
all	IndirectRefTable.h	/^    u4          all;$/;"	m	union:IRTSegmentState
all	Thread.h	/^    volatile int64_t   all;$/;"	m	union:InterpBreak
allSingleStep	compiler/CompilerIR.h	/^    bool allSingleStep;$/;"	m	struct:CompilationUnit
alloc	PointerSet.cpp	/^    u2          alloc;$/;"	m	struct:PointerSet	file:
alloc	interp/Interp.cpp	/^    int         alloc;$/;"	m	struct:BreakpointSet	file:
allocArray	oo/Array.cpp	/^static ArrayObject* allocArray(ClassObject* arrayClass, size_t length,$/;"	f	file:
allocBits	alloc/Copying.cpp	/^    HeapBitmap allocBits;$/;"	m	struct:HeapSource	file:
allocBlocks	alloc/Copying.cpp	/^    size_t allocBlocks;$/;"	m	struct:HeapSource	file:
allocCount	Profile.h	/^    int     allocCount;         \/\/ #of objects allocated$/;"	m	struct:AllocProfState
allocEntries	ReferenceTable.h	/^    int             allocEntries;       \/* #of entries we have space for *\/$/;"	m	struct:ReferenceTable
allocLen	alloc/HeapBitmap.h	/^    size_t allocLen;$/;"	m	struct:HeapBitmap
allocLen	hprof/Hprof.h	/^    size_t allocLen;$/;"	m	struct:hprof_record_t
allocLimit	alloc/Copying.cpp	/^    u1 *allocLimit;$/;"	m	struct:HeapSource	file:
allocLive	compiler/codegen/RallocUtil.cpp	/^static RegisterInfo *allocLive(CompilationUnit *cUnit, int sReg,$/;"	f	file:
allocLiveBody	compiler/codegen/RallocUtil.cpp	/^static RegisterInfo *allocLiveBody(RegisterInfo *p, int numTemps, int sReg)$/;"	f	file:
allocMarkStack	alloc/HeapSource.cpp	/^static bool allocMarkStack(GcMarkStack *stack, size_t maximumSize)$/;"	f	file:
allocMatchList	jdwp/JdwpEvent.cpp	/^static JdwpEvent** allocMatchList(JdwpState* state)$/;"	f	file:
allocProf	Globals.h	/^    AllocProfState allocProf;$/;"	m	struct:DvmGlobals
allocProf	Thread.h	/^    AllocProfState allocProf;$/;"	m	struct:Thread
allocPtr	alloc/Copying.cpp	/^    u1 *allocPtr;$/;"	m	struct:HeapSource	file:
allocRecordCount	Globals.h	/^    int             allocRecordCount;       \/* #of valid entries *\/$/;"	m	struct:DvmGlobals
allocRecordHead	Globals.h	/^    int             allocRecordHead;        \/* most-recently-added entry *\/$/;"	m	struct:DvmGlobals
allocRecords	Globals.h	/^    AllocRecord*    allocRecords;$/;"	m	struct:DvmGlobals
allocSize	Profile.h	/^    int     allocSize;          \/\/ cumulative size of objects$/;"	m	struct:AllocProfState
allocTempBody	compiler/codegen/RallocUtil.cpp	/^static int allocTempBody(CompilationUnit *cUnit, RegisterInfo *p, int numTemps,$/;"	f	file:
allocThread	Thread.cpp	/^static Thread* allocThread(int interpStackSize)$/;"	f	file:
allocTrackerLock	Globals.h	/^    pthread_mutex_t allocTrackerLock;$/;"	m	struct:DvmGlobals
allocVfyBasicBlock	analysis/VfyBasicBlock.cpp	/^static VfyBasicBlock* allocVfyBasicBlock(VerifierData* vdata, u4 idx)$/;"	f	file:
alloc_entries_	IndirectRefTable.h	/^    size_t          alloc_entries_;$/;"	m	struct:IndirectRefTable
allocateAuxStructures	DvmDex.cpp	/^static DvmDex* allocateAuxStructures(DexFile* pDexFile)$/;"	f	file:
allocateBlocks	alloc/Copying.cpp	/^static void *allocateBlocks(HeapSource *heapSource, size_t blocks)$/;"	f	file:
allocateGray	alloc/Copying.cpp	/^void *allocateGray(size_t size)$/;"	f
alreadyEnabledViaFramework	Globals.h	/^    bool alreadyEnabledViaFramework;$/;"	m	struct:DvmJitGlobals
altEntry	mterp/gen-mterp.py	/^def altEntry(tokens):$/;"	f
altHandlerTable	Thread.h	/^    void*       altHandlerTable;    \/\/ Table of breakout handlers$/;"	m	struct:Thread
alt_label_prefix	mterp/gen-mterp.py	/^alt_label_prefix = ".L_ALT" # use ".L" to hide labels from gdb$/;"	v
alt_opcode_locations	mterp/gen-mterp.py	/^alt_opcode_locations = {}$/;"	v
analysisEnd	shadowlib/ReAgent.cpp	/^void analysisEnd$/;"	f
analysisStart__S	shadowlib/ReAgent.cpp	/^void analysisStart__S$/;"	f
analysisStart__SB	shadowlib/ReAgent.cpp	/^void analysisStart__SB$/;"	f
analysis_mtx	shadowlib/ReProtocol.h	/^		pthread_mutex_t analysis_mtx;$/;"	m	class:ReProtocol
analysis_queue	shadowlib/ReProtocol.h	/^		Map<ordering_id_type, ReQueue*> analysis_queue;$/;"	m	class:ReProtocol
analyzeInlineTarget	compiler/Frontend.cpp	/^static int analyzeInlineTarget(DecodedInstruction *dalvikInsn, int attributes,$/;"	f	file:
andTest	test/AtomicTest.cpp	/^static int andTest = 0;$/;"	v	file:
annotateDalvikRegAccess	compiler/codegen/arm/CodegenCommon.cpp	/^static void annotateDalvikRegAccess(ArmLIR *lir, int regId, bool isLoad)$/;"	f	file:
appendSourceFile	compiler/template/gen-template.py	/^def appendSourceFile(source, dict, outfp, sister_list):$/;"	f
appendSourceFile	mterp/gen-mterp.py	/^def appendSourceFile(source, dict, outfp, sister_list):$/;"	f
appendValue	Jni.cpp	/^static void appendValue(char type, const JValue value, char* buf, size_t n, bool appendComma)$/;"	f	file:
applyLoadHoisting	compiler/codegen/arm/LocalOptimizations.cpp	/^static void applyLoadHoisting(CompilationUnit *cUnit,$/;"	f	file:
applyLoadStoreElimination	compiler/codegen/arm/LocalOptimizations.cpp	/^static void applyLoadStoreElimination(CompilationUnit *cUnit,$/;"	f	file:
applyRedundantBranchElimination	compiler/codegen/arm/GlobalOptimizations.cpp	/^static void applyRedundantBranchElimination(CompilationUnit *cUnit)$/;"	f	file:
archive	JarFile.h	/^    ZipArchive  archive;$/;"	m	struct:JarFile
arenaHead	compiler/Utility.cpp	/^static ArenaMemBlock *arenaHead, *currentArena;$/;"	v	file:
arg	InlineNative.cpp	/^    u4 arg;$/;"	m	union:Convert32	file:
arg	InlineNative.cpp	/^    u4 arg[2];$/;"	m	union:Convert64	file:
argArray	Debugger.h	/^    u8* argArray;   \/* will be NULL if numArgs==0 *\/$/;"	m	struct:DebugInvokeReq
arg_end	arch/sh/CallSH4ABI.S	/^arg_end:$/;"	l
arg_loop	arch/sh/CallSH4ABI.S	/^arg_loop:$/;"	l
arg_rev_end	arch/sh/CallSH4ABI.S	/^arg_rev_end:$/;"	l
arg_rev_loop	arch/sh/CallSH4ABI.S	/^arg_rev_loop:$/;"	l
armed_	Init.cpp	/^    bool armed_;$/;"	m	class:ScopedShutdown	file:
array	UtfString.cpp	/^ArrayObject* StringObject::array() const$/;"	f	class:StringObject
arrayAccessInfo	compiler/Loop.h	/^    GrowableList *arrayAccessInfo;      \/\/ hoisted checks for array accesses$/;"	m	struct:LoopAnalysis
arrayDim	oo/Object.h	/^    int             arrayDim;$/;"	m	struct:ClassObject
arrayReg	compiler/Dataflow.h	/^    int arrayReg;$/;"	m	struct:ArrayAccessInfo
ashmem_create_region	alloc/TEST/HeapBitmapTest/include/cutils/ashmem.h	/^ashmem_create_region(const char *name, size_t len)$/;"	f
asm_fp	compiler/template/gen-template.py	/^    asm_fp = open("%s\/CompilerTemplateAsm-%s.S" % (output_dir, target_arch), "w")$/;"	v
asm_fp	mterp/gen-mterp.py	/^    asm_fp = open("%s\/InterpAsm-%s.S" % (output_dir, target_arch), "w")$/;"	v
asm_stub_text	compiler/template/gen-template.py	/^asm_stub_text = []$/;"	v
asm_stub_text	mterp/gen-mterp.py	/^asm_stub_text = []$/;"	v
assembleChainingBranch	compiler/codegen/arm/Assemble.cpp	/^static u4 assembleChainingBranch(int branchOffset, bool thumbTarget)$/;"	f	file:
assembleInstructions	compiler/codegen/arm/Assemble.cpp	/^static AssemblerStatus assembleInstructions(CompilationUnit *cUnit,$/;"	f	file:
assemblerRetries	compiler/CompilerIR.h	/^    int assemblerRetries;               \/\/ How many times tried to fix assembly$/;"	m	struct:CompilationUnit
assemblerStatus	compiler/CompilerIR.h	/^    AssemblerStatus assemblerStatus;    \/\/ Success or fix and retry$/;"	m	struct:CompilationUnit
assert	Common.h	46;"	d
assert	Common.h	47;"	d
assert_empty	alloc/TEST/HeapBitmapTest/main.c	/^void assert_empty(const HeapBitmap *hb)$/;"	f
assertionCtrl	Globals.h	/^    AssertionControl*   assertionCtrl;$/;"	m	struct:DvmGlobals
assertionCtrlCount	Globals.h	/^    int         assertionCtrlCount;$/;"	m	struct:DvmGlobals
assignLineStorage	analysis/CodeVerify.cpp	/^static u1* assignLineStorage(u1* storage, RegisterLine* line,$/;"	f	file:
assignLiteralOffset	compiler/codegen/arm/Assemble.cpp	/^static int assignLiteralOffset(CompilationUnit *cUnit, int offset)$/;"	f	file:
assignLiteralOffsetCommon	compiler/codegen/arm/Assemble.cpp	/^static int assignLiteralOffsetCommon(LIR *lir, int offset)$/;"	f	file:
assignThreadId	Thread.cpp	/^static void assignThreadId(Thread* thread)$/;"	f	file:
atomicTest	test/AtomicTest.cpp	/^static void* atomicTest(void* arg)$/;"	f	file:
attachCond	jdwp/JdwpPriv.h	/^    pthread_cond_t  attachCond;$/;"	m	struct:JdwpState
attachLock	jdwp/JdwpPriv.h	/^    pthread_mutex_t attachLock;$/;"	m	struct:JdwpState
attachThread	Jni.cpp	/^static jint attachThread(JavaVM* vm, JNIEnv** p_env, void* thr_args, bool isDaemon) {$/;"	f	file:
attributes	compiler/Compiler.h	/^    int attributes;             \/\/ attribute vector$/;"	m	struct:CompilerMethodStats
augmentedAccessFlags	Debugger.cpp	/^static u4 augmentedAccessFlags(u4 accessFlags)$/;"	f	file:
avail_class_id	shadowlib/Netref.h	/^static volatile jint avail_class_id;$/;"	v
avail_object_id	shadowlib/Netref.h	/^static volatile jlong avail_object_id;$/;"	v
awaitingHandshake	jdwp/JdwpAdb.cpp	/^    bool                awaitingHandshake;$/;"	m	struct:JdwpNetState	file:
awaitingHandshake	jdwp/JdwpAdb.cpp	/^static bool awaitingHandshake(struct JdwpState* state)$/;"	f	file:
awaitingHandshake	jdwp/JdwpPriv.h	/^    bool (*awaitingHandshake)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
awaitingHandshake	jdwp/JdwpSocket.cpp	/^    bool    awaitingHandshake;  \/* waiting for "JDWP-Handshake" *\/$/;"	m	struct:JdwpNetState	file:
awaitingHandshake	jdwp/JdwpSocket.cpp	/^static bool awaitingHandshake(JdwpState* state)$/;"	f	file:
b	Common.h	/^    s1      b;$/;"	m	union:JValue
b_capacity	shadowlib/Lock.h	/^		int b_capacity;$/;"	m	class:LockBuffer
b_capacity	shadowlib/Map.h	/^		int b_capacity;$/;"	m	class:Map
b_ids	shadowlib/Lock.h	/^		lock_id_type *b_ids;$/;"	m	class:LockBuffer
b_keys	shadowlib/Map.h	/^		K *b_keys;$/;"	m	class:Map
b_locks	shadowlib/Lock.h	/^		pthread_mutex_t *b_locks;$/;"	m	class:LockBuffer
b_occupied	shadowlib/Lock.h	/^		int b_occupied;$/;"	m	class:LockBuffer
b_occupied	shadowlib/Map.h	/^		int b_occupied;$/;"	m	class:Map
b_values	shadowlib/Map.h	/^		V *b_values;$/;"	m	class:Map
backChainBlock	compiler/CompilerIR.h	/^    BasicBlock *backChainBlock;         \/\/ for loop-trace$/;"	m	struct:CompilationUnit
badMatch	InlineNative.cpp	/^static void badMatch(StringObject* thisStrObj, StringObject* compStrObj,$/;"	f	file:
bailPtr	compiler/Compiler.h	/^    jmp_buf *bailPtr;$/;"	m	struct:CompilerWorkOrder
bailPtr	compiler/CompilerIR.h	/^    jmp_buf *bailPtr;$/;"	m	struct:CompilationUnit
bailPtr	interp/InterpState.h	/^    void*           bailPtr;$/;"	m	struct:InterpSaveState
base	alloc/HeapBitmap.h	/^    uintptr_t base;$/;"	m	struct:HeapBitmap
base	alloc/HeapSource.cpp	/^    char *base;$/;"	m	struct:Heap	file:
base	alloc/MarkSweep.h	/^    const Object **base;$/;"	m	struct:GcMarkStack
baseAddr	compiler/CompilerIR.h	/^    void *baseAddr;$/;"	m	struct:CompilationUnit
baseBlock	alloc/Copying.cpp	/^    size_t baseBlock, limitBlock;$/;"	m	struct:HeapSource	file:
baseEnv	CheckJni.cpp	/^static inline const JNINativeInterface* baseEnv(JNIEnv* env) {$/;"	f	file:
baseFuncTable	JniInternal.h	/^    const struct JNIInvokeInterface* baseFuncTable;$/;"	m	struct:JavaVMExt	typeref:struct:JavaVMExt::JNIInvokeInterface
baseFuncTable	JniInternal.h	/^    const struct JNINativeInterface* baseFuncTable;$/;"	m	struct:JNIEnvExt	typeref:struct:JNIEnvExt::JNINativeInterface
baseVm	CheckJni.cpp	/^static inline const JNIInvokeInterface* baseVm(JavaVM* vm) {$/;"	f	file:
basicBlocks	analysis/CodeVerify.h	/^    VfyBasicBlock** basicBlocks;$/;"	m	struct:VerifierData
basicSSAReg	compiler/Dataflow.h	/^    int basicSSAReg;$/;"	m	struct:InductionVariableInfo
basicTagFromDescriptor	Debugger.cpp	/^static u1 basicTagFromDescriptor(const char* descriptor)$/;"	f	file:
basicTest	test/TestIndirectRefTable.cpp	/^static bool basicTest()$/;"	f	file:
be64toh	shadowlib/ShadowLib.h	12;"	d
be64toh	shadowlib/ShadowLib.h	17;"	d
begin	IndirectRefTable.h	/^    iterator begin() {$/;"	f	struct:IndirectRefTable
biasedCardTableBase	Globals.h	/^    u1*         biasedCardTableBase;$/;"	m	struct:DvmGlobals
biggestAlloc	analysis/DexVerify.h	/^    size_t biggestAlloc;       \/* largest RegisterLine table alloc *\/$/;"	m	struct:VerifierStats
bind	shadowlib/Socket.cpp	/^bool Socket::bind ( const int port )$/;"	f	class:Socket
bitSize	BitVector.h	/^    u4 bitSize;$/;"	m	struct:BitVectorIterator
bitmap	alloc/MarkSweep.h	/^    HeapBitmap *bitmap;$/;"	m	struct:GcMarkContext
bits	alloc/HeapBitmap.h	/^    unsigned long *bits;$/;"	m	struct:HeapBitmap
bitsLen	alloc/HeapBitmap.h	/^    size_t bitsLen;$/;"	m	struct:HeapBitmap
block	compiler/CompilerIR.h	/^    BasicBlock *block;$/;"	m	struct:SuccessorBlockInfo
blockBase	alloc/Copying.cpp	/^    u1 *blockBase;$/;"	m	struct:HeapSource	file:
blockLabelList	compiler/CompilerIR.h	/^    void *blockLabelList;$/;"	m	struct:CompilationUnit
blockList	compiler/CompilerIR.h	/^    GrowableList blockList;$/;"	m	struct:CompilationUnit
blockListType	compiler/CompilerIR.h	/^        BlockListType blockListType;    \/\/ switch and exception handling$/;"	m	struct:BasicBlock::__anon45
blockQueue	alloc/Copying.cpp	/^    size_t *blockQueue;$/;"	m	struct:HeapSource	file:
blockSignals	Init.cpp	/^static void blockSignals()$/;"	f	file:
blockSize	compiler/CompilerUtility.h	/^    size_t blockSize;$/;"	m	struct:ArenaMemBlock
blockSpace	alloc/Copying.cpp	/^    char *blockSpace;$/;"	m	struct:HeapSource	file:
blockToAddress	alloc/Copying.cpp	/^static u1 *blockToAddress(const HeapSource *heapSource, size_t block)$/;"	f	file:
blockType	compiler/CompilerIR.h	/^    BBType blockType;$/;"	m	struct:BasicBlock
blockingMode	Globals.h	/^    bool               blockingMode;$/;"	m	struct:DvmJitGlobals
blocks	compiler/CompilerIR.h	/^        GrowableList blocks;$/;"	m	struct:BasicBlock::__anon45
body	hprof/Hprof.h	/^    unsigned char *body;$/;"	m	struct:hprof_record_t
bodyIsClean	compiler/Loop.h	/^    bool bodyIsClean;                   \/\/ loop body cannot throw any exceptions$/;"	m	struct:LoopAnalysis
bootClassPath	Globals.h	/^    ClassPathEntry* bootClassPath;$/;"	m	struct:DvmGlobals
bootClassPathOptExtra	Globals.h	/^    DvmDex*     bootClassPathOptExtra;$/;"	m	struct:DvmGlobals
bootClassPathStr	Globals.h	/^    char*       bootClassPathStr;$/;"	m	struct:DvmGlobals
boxMethodArgs	reflect/Proxy.cpp	/^static ArrayObject* boxMethodArgs(const Method* method, const u4* args)$/;"	f	file:
branch	compiler/Compiler.h	/^    u4 branch;                  \/* Branch to chained destination *\/$/;"	m	struct:PredictedChainingCell
branchInsertSV	compiler/codegen/x86/X86LIR.h	/^    bool branchInsertSV;\/\/ mark for insertion of branch before this instruction,$/;"	m	struct:X86LIR
branchToBody	compiler/Loop.h	/^    LIR *branchToBody;                  \/\/ branch over to the body from entry$/;"	m	struct:LoopAnalysis
branchToPCR	compiler/Loop.h	/^    LIR *branchToPCR;                   \/\/ branch over to the PCR cell$/;"	m	struct:LoopAnalysis
breakFlags	Thread.h	/^        uint8_t    breakFlags;$/;"	m	struct:InterpBreak::__anon12
breakpointSet	Globals.h	/^    BreakpointSet*  breakpointSet;$/;"	m	struct:DvmGlobals
breakpoints	interp/Interp.cpp	/^    Breakpoint* breakpoints;$/;"	m	struct:BreakpointSet	file:
broadcast	Ddm.cpp	/^static void broadcast(int event)$/;"	f	file:
buckets	interp/Jit.h	/^    JitTraceCounter_t      *buckets[JIT_PROF_BLOCK_BUCKETS];$/;"	m	struct:JitTraceProfCounters
buf	Profile.h	/^    u1*     buf;$/;"	m	struct:MethodTraceState
buf	StdioConverter.cpp	/^    char    buf[kMaxLine+1];$/;"	m	struct:BufferedData	file:
buf	alloc/DdmHeap.cpp	/^    u1 *buf;$/;"	m	struct:HeapChunkContext	file:
bufLen	alloc/DdmHeap.cpp	/^    size_t bufLen;$/;"	m	struct:HeapChunkContext	file:
buf_capacity	shadowlib/Buffer.h	/^		char* buf_capacity;$/;"	m	class:Buffer
buf_data	shadowlib/Buffer.h	/^		char* buf_data;$/;"	m	class:Buffer
buf_occupied	shadowlib/Buffer.h	/^		char* buf_occupied;$/;"	m	class:Buffer
bufferSize	Profile.h	/^    int     bufferSize;$/;"	m	struct:MethodTraceState
buildInsnString	compiler/codegen/arm/ArchUtility.cpp	/^static void buildInsnString(const char *fmt, ArmLIR *lir, char* buf,$/;"	f	file:
builtInPrefixes	Jni.cpp	/^static const char* builtInPrefixes[] = {$/;"	v	file:
busCatcher	Init.cpp	/^static void busCatcher(int signum, siginfo_t* info, void* context)$/;"	f	file:
byteOffset	oo/Object.h	/^    int             byteOffset;$/;"	m	struct:InstField
bytecodeOffset	compiler/codegen/arm/Assemble.cpp	/^    u4 bytecodeOffset;$/;"	m	struct:jitProfileAddrToLine	file:
bytesAllocated	alloc/Copying.cpp	/^    size_t bytesAllocated;$/;"	m	struct:HeapSource	file:
bytesAllocated	alloc/HeapSource.cpp	/^    size_t bytesAllocated;$/;"	m	struct:Heap	file:
bytesAllocated	compiler/CompilerUtility.h	/^    size_t bytesAllocated;$/;"	m	struct:ArenaMemBlock
c	Common.h	/^    u2      c;$/;"	m	union:JValue
c	compiler/Dataflow.h	/^    int c;      \/\/ constant$/;"	m	struct:InductionVariableInfo
c_fp	mterp/gen-mterp.py	/^    c_fp = open("%s\/InterpC-%s.cpp" % (output_dir, target_arch), "w")$/;"	v
cacheFileName	JarFile.h	/^    char*       cacheFileName;$/;"	m	struct:JarFile
cacheFileName	RawDexFile.h	/^    char*       cacheFileName;$/;"	m	struct:RawDexFile
cacheVersion	Globals.h	/^    int cacheVersion;$/;"	m	struct:DvmJitGlobals
cacheVersion	compiler/Compiler.h	/^    int cacheVersion;           \/\/ Used to identify stale trace requests$/;"	m	struct:JitTranslationInfo
callNeedsCheck	CheckJni.cpp	/^static inline bool callNeedsCheck(const u4* args, JValue* pResult,$/;"	f	file:
callPrep	interp/Stack.cpp	/^static ClassObject* callPrep(Thread* self, const Method* method, Object* obj,$/;"	f	file:
callback	Thread.h	/^    SafePointCallback callback;$/;"	m	struct:Thread
callbackArg	Thread.h	/^    void*             callbackArg;$/;"	m	struct:Thread
callbackMutex	Thread.h	/^    pthread_mutex_t   callbackMutex;$/;"	m	struct:Thread
calleeMethod	compiler/CompilerIR.h	/^        const Method *calleeMethod;$/;"	m	union:MIR::__anon44
callsiteClass	Thread.h	/^    const ClassObject* callsiteClass;$/;"	m	struct:Thread
callsiteInfo	compiler/CompilerIR.h	/^        CallsiteInfo *callsiteInfo;$/;"	m	union:MIR::__anon44
canAllocClass	Jni.cpp	/^static bool canAllocClass(ClassObject* clazz) {$/;"	f	file:
canConvertTo1nr	analysis/CodeVerify.cpp	/^static bool canConvertTo1nr(RegType srcType, RegType checkType)$/;"	f	file:
canConvertTo2	analysis/CodeVerify.cpp	/^static bool canConvertTo2(RegType srcType, RegType checkType)$/;"	f	file:
capacity	IndirectRefTable.h	/^    size_t capacity() const {$/;"	f	struct:IndirectRefTable
capacity_	IndirectRefTable.h	/^    size_t capacity_;$/;"	m	class:iref_iterator
cardTable	Thread.h	/^    u1*         cardTable;$/;"	m	struct:Thread
cardTableBase	alloc/HeapInternal.h	/^    u1* cardTableBase;$/;"	m	struct:GcHeap
cardTableLength	alloc/HeapInternal.h	/^    size_t cardTableLength;$/;"	m	struct:GcHeap
cardTableMaxLength	alloc/HeapInternal.h	/^    size_t cardTableMaxLength;$/;"	m	struct:GcHeap
cardTableOffset	alloc/HeapInternal.h	/^    size_t cardTableOffset;$/;"	m	struct:GcHeap
casTest	test/AtomicTest.cpp	/^static int casTest = 0;$/;"	v	file:
caught	jdwp/JdwpEvent.cpp	/^    bool                caught;         \/* ExceptionOnly *\/$/;"	m	struct:ModBasket	file:
caught	jdwp/JdwpEvent.h	/^        u1          caught;$/;"	m	struct:JdwpEventMod::__anon31
cellAddr	compiler/Compiler.h	/^    PredictedChainingCell *cellAddr;    \/* Address to be patched *\/$/;"	m	struct:ICPatchWorkOrder
cellContent	compiler/Compiler.h	/^    PredictedChainingCell cellContent;  \/* content of the new cell *\/$/;"	m	struct:ICPatchWorkOrder
chain	interp/Jit.h	/^    u2                     chain;                 \/* Index of next in chain *\/$/;"	m	struct:JitEntryInfo
chainCellOffsetLIR	compiler/CompilerIR.h	/^    LIR *chainCellOffsetLIR;$/;"	m	struct:CompilationUnit
chainingCellBottom	compiler/CompilerIR.h	/^    LIR *chainingCellBottom;$/;"	m	struct:CompilationUnit
changed	analysis/VfyBasicBlock.h	/^    bool            changed;        \/* input set has changed, must re-eval *\/$/;"	m	struct:VfyBasicBlock
chars	UtfString.cpp	/^const u2* StringObject::chars() const$/;"	f	class:StringObject
check	CheckJni.cpp	/^    static bool check(const void* dataBuf, bool modOkay) {$/;"	f	struct:GuardedCopy
check	CheckJni.cpp	/^    void check(bool entry, const char* fmt0, ...) {$/;"	f	class:ScopedCheck
checkAccess	oo/AccessCheck.cpp	/^static bool checkAccess(const ClassObject* accessFrom,$/;"	f	file:
checkAllFree	LinearAlloc.cpp	/^static void checkAllFree(Object* classLoader)$/;"	f	file:
checkArray	CheckJni.cpp	/^    void checkArray(jarray jarr) {$/;"	f	class:ScopedCheck	file:
checkArrayData	analysis/DexVerify.cpp	/^static bool checkArrayData(const Method* meth, u4 curOffset)$/;"	f	file:
checkArrayElementBounds	Jni.cpp	/^static bool checkArrayElementBounds(ArrayObject* arrayObj, jsize index) {$/;"	f	file:
checkArrayIndexType	analysis/CodeVerify.cpp	/^static void checkArrayIndexType(const Method* meth, RegType regType,$/;"	f	file:
checkBinop	analysis/CodeVerify.cpp	/^static void checkBinop(RegisterLine* registerLine, DecodedInstruction* pDecInsn,$/;"	f	file:
checkBinop2addr	analysis/CodeVerify.cpp	/^static void checkBinop2addr(RegisterLine* registerLine,$/;"	f	file:
checkBranchTarget	analysis/DexVerify.cpp	/^static bool checkBranchTarget(const Method* meth, InsnFlags* insnFlags,$/;"	f	file:
checkCallGraph	Globals.h	/^    bool checkCallGraph;$/;"	m	struct:DvmJitGlobals
checkCallResultCommon	CheckJni.cpp	/^static void checkCallResultCommon(const u4* args, const JValue* pResult,$/;"	f	file:
checkClass	CheckJni.cpp	/^    void checkClass(jclass c) {$/;"	f	class:ScopedCheck	file:
checkClassName	CheckJni.cpp	/^    void checkClassName(const char* className) {$/;"	f	class:ScopedCheck
checkConstructorReturn	analysis/CodeVerify.cpp	/^static bool checkConstructorReturn(const Method* meth,$/;"	f	file:
checkFieldArrayStore1nr	analysis/CodeVerify.cpp	/^static bool checkFieldArrayStore1nr(RegType instrType, RegType targetType)$/;"	f	file:
checkFieldIndex	analysis/DexVerify.cpp	/^static bool checkFieldIndex(const DvmDex* pDvmDex, u4 idx)$/;"	f	file:
checkFieldTypeForGet	CheckJni.cpp	/^    void checkFieldTypeForGet(jfieldID fid, const char* expectedSignature, bool isStatic) {$/;"	f	class:ScopedCheck
checkFieldTypeForSet	CheckJni.cpp	/^    void checkFieldTypeForSet(jobject jobj, jfieldID fieldID, PrimitiveType prim, bool isStatic) {$/;"	f	class:ScopedCheck
checkFinalFieldAccess	analysis/CodeVerify.cpp	/^static void checkFinalFieldAccess(const Method* meth, const Field* field,$/;"	f	file:
checkForDominanceFrontier	compiler/SSATransformation.cpp	/^static void checkForDominanceFrontier(BasicBlock *domBB,$/;"	f	file:
checkForNull	mterp/c/header.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-allstubs.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-armv5te-vfp.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-armv5te.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-armv7-a-neon.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-armv7-a.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-portable.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-x86-atom.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNull	mterp/out/InterpC-x86.cpp	/^static inline bool checkForNull(Object* obj)$/;"	f	file:
checkForNullExportPC	mterp/c/header.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-allstubs.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-armv5te-vfp.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-armv5te.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-armv7-a-neon.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-armv7-a.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-portable.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-x86-atom.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkForNullExportPC	mterp/out/InterpC-x86.cpp	/^static inline bool checkForNullExportPC(Object* obj, u4* fp, const u2* pc)$/;"	f	file:
checkInstance	CheckJni.cpp	/^    void checkInstance(jobject jobj, ClassObject* expectedClass, const char* argName) {$/;"	f	class:ScopedCheck	file:
checkInstanceFieldID	CheckJni.cpp	/^    void checkInstanceFieldID(jobject jobj, jfieldID fieldID) {$/;"	f	class:ScopedCheck
checkLengthPositive	CheckJni.cpp	/^    void checkLengthPositive(jsize length) {$/;"	f	class:ScopedCheck	file:
checkLitop	analysis/CodeVerify.cpp	/^static void checkLitop(RegisterLine* registerLine, DecodedInstruction* pDecInsn,$/;"	f	file:
checkMergeTab	analysis/CodeVerify.cpp	/^static void checkMergeTab()$/;"	f	file:
checkMethodDescriptorClasses	oo/Class.cpp	/^static bool checkMethodDescriptorClasses(const Method* meth,$/;"	f	file:
checkMethodIndex	analysis/DexVerify.cpp	/^static bool checkMethodIndex(const DvmDex* pDvmDex, u4 idx)$/;"	f	file:
checkMoveException	analysis/CodeVerify.cpp	/^static bool checkMoveException(const Method* meth, int insnIdx,$/;"	f	file:
checkNewArray	analysis/DexVerify.cpp	/^static bool checkNewArray(const DvmDex* pDvmDex, u4 idx)$/;"	f	file:
checkNewInstance	analysis/DexVerify.cpp	/^static bool checkNewInstance(const DvmDex* pDvmDex, u4 idx)$/;"	f	file:
checkNonNull	CheckJni.cpp	/^    void checkNonNull(const void* ptr) {$/;"	f	class:ScopedCheck
checkObject	CheckJni.cpp	/^    void checkObject(jobject jobj) {$/;"	f	class:ScopedCheck	file:
checkOnLoadResult	Native.cpp	/^static bool checkOnLoadResult(SharedLib* pEntry)$/;"	f	file:
checkRegisterIndex	analysis/DexVerify.cpp	/^static bool checkRegisterIndex(const Method* meth, u4 idx)$/;"	f	file:
checkReleaseMode	CheckJni.cpp	/^    void checkReleaseMode(jint mode) {$/;"	f	class:ScopedCheck	file:
checkShort	arch/x86/Call386ABI.S	/^checkShort:$/;"	l
checkSig	CheckJni.cpp	/^    void checkSig(jmethodID methodID, const char* expectedType, bool isStatic) {$/;"	f	class:ScopedCheck
checkSizes	BitVector.cpp	/^static void checkSizes(const BitVector* bv1, const BitVector* bv2)$/;"	f	file:
checkStackSum	Jni.cpp	/^static void checkStackSum(Thread* self) {$/;"	f	file:
checkStaticFieldID	CheckJni.cpp	/^    void checkStaticFieldID(jclass jclazz, jfieldID fieldID) {$/;"	f	class:ScopedCheck
checkStaticMethod	CheckJni.cpp	/^    void checkStaticMethod(jclass jclazz, jmethodID methodID) {$/;"	f	class:ScopedCheck
checkString	CheckJni.cpp	/^    void checkString(jstring s) {$/;"	f	class:ScopedCheck	file:
checkStringIndex	analysis/DexVerify.cpp	/^static bool checkStringIndex(const DvmDex* pDvmDex, u4 idx)$/;"	f	file:
checkSwitchTargets	analysis/DexVerify.cpp	/^static bool checkSwitchTargets(const Method* meth, InsnFlags* insnFlags,$/;"	f	file:
checkThread	CheckJni.cpp	/^    void checkThread(int flags) {$/;"	f	class:ScopedCheck	file:
checkTypeCategory	analysis/CodeVerify.cpp	/^static void checkTypeCategory(RegType type, TypeCategory cat,$/;"	f	file:
checkTypeIndex	analysis/DexVerify.cpp	/^static bool checkTypeIndex(const DvmDex* pDvmDex, u4 idx)$/;"	f	file:
checkUnop	analysis/CodeVerify.cpp	/^static void checkUnop(RegisterLine* registerLine, DecodedInstruction* pDecInsn,$/;"	f	file:
checkUtfBytes	CheckJni.cpp	/^    static u1 checkUtfBytes(const char* bytes, const char** errorKind) {$/;"	f	class:ScopedCheck	file:
checkUtfString	CheckJni.cpp	/^    void checkUtfString(const char* bytes, bool nullable) {$/;"	f	class:ScopedCheck	file:
checkVarargRangeRegs	analysis/DexVerify.cpp	/^static bool checkVarargRangeRegs(const Method* meth,$/;"	f	file:
checkVarargRegs	analysis/DexVerify.cpp	/^static bool checkVarargRegs(const Method* meth,$/;"	f	file:
checkVirtualMethod	CheckJni.cpp	/^    void checkVirtualMethod(jobject jobj, jmethodID methodID) {$/;"	f	class:ScopedCheck
checkWidePair	analysis/CodeVerify.cpp	/^static void checkWidePair(RegType typel, RegType typeh, VerifyError* pFailure)$/;"	f	file:
checkWideRegisterIndex	analysis/DexVerify.cpp	/^static bool checkWideRegisterIndex(const Method* meth, u4 idx)$/;"	f	file:
classArrayBoolean	Globals.h	/^    ClassObject* classArrayBoolean;$/;"	m	struct:DvmGlobals
classArrayByte	Globals.h	/^    ClassObject* classArrayByte;$/;"	m	struct:DvmGlobals
classArrayChar	Globals.h	/^    ClassObject* classArrayChar;$/;"	m	struct:DvmGlobals
classArrayDouble	Globals.h	/^    ClassObject* classArrayDouble;$/;"	m	struct:DvmGlobals
classArrayFloat	Globals.h	/^    ClassObject* classArrayFloat;$/;"	m	struct:DvmGlobals
classArrayInt	Globals.h	/^    ClassObject* classArrayInt;$/;"	m	struct:DvmGlobals
classArrayLong	Globals.h	/^    ClassObject* classArrayLong;$/;"	m	struct:DvmGlobals
classArrayShort	Globals.h	/^    ClassObject* classArrayShort;$/;"	m	struct:DvmGlobals
classCmp	hprof/HprofClass.cpp	/^static int classCmp(const void *v1, const void *v2)$/;"	f	file:
classDataOffset	analysis/RegisterMap.h	/^    u4      classDataOffset[1];$/;"	m	struct:RegisterMapClassPool
classDescriptor	InlineNative.h	/^    const char*     classDescriptor;$/;"	m	struct:InlineOperation
classDescriptor	Native.h	/^    const char* classDescriptor;$/;"	m	struct:DalvikNativeClass
classDescriptor	compiler/Compiler.h	/^    const char *classDescriptor;        \/* Descriptor of the class object *\/$/;"	m	struct:ICPatchWorkOrder
classDescriptor	compiler/CompilerIR.h	/^    const char *classDescriptor;$/;"	m	struct:CallsiteInfo
classDescriptorHash	Native.h	/^    u4          classDescriptorHash;          \/* initialized at runtime *\/$/;"	m	struct:DalvikNativeClass
classExclude	jdwp/JdwpEvent.h	/^    } classExclude;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon29
classId	jdwp/Jdwp.h	/^    RefTypeId   classId;        \/* method->clazz *\/$/;"	m	struct:JdwpLocation
classId	jdwp/JdwpEvent.cpp	/^    RefTypeId           classId;        \/* ClassOnly *\/$/;"	m	struct:ModBasket	file:
classInitCount	Profile.h	/^    int     classInitCount;     \/\/ #of initialized classes$/;"	m	struct:AllocProfState
classInitHook	shadowlib/ReAgent.cpp	/^int classInitHook(ClassObject* co){$/;"	f
classInitTime	Profile.h	/^    u8      classInitTime;      \/\/ cumulative time spent in class init (nsec)$/;"	m	struct:AllocProfState
classJavaLangAnnotationAnnotationArray	Globals.h	/^    ClassObject* classJavaLangAnnotationAnnotationArray;$/;"	m	struct:DvmGlobals
classJavaLangAnnotationAnnotationArrayArray	Globals.h	/^    ClassObject* classJavaLangAnnotationAnnotationArrayArray;$/;"	m	struct:DvmGlobals
classJavaLangClass	Globals.h	/^    ClassObject* classJavaLangClass;$/;"	m	struct:DvmGlobals
classJavaLangClassArray	Globals.h	/^    ClassObject* classJavaLangClassArray;$/;"	m	struct:DvmGlobals
classJavaLangClassLoader	Globals.h	/^    ClassObject* classJavaLangClassLoader;$/;"	m	struct:DvmGlobals
classJavaLangObject	Globals.h	/^    ClassObject* classJavaLangObject;$/;"	m	struct:DvmGlobals
classJavaLangObjectArray	Globals.h	/^    ClassObject* classJavaLangObjectArray;$/;"	m	struct:DvmGlobals
classJavaLangRefFinalizerReference	Globals.h	/^    ClassObject* classJavaLangRefFinalizerReference;$/;"	m	struct:DvmGlobals
classJavaLangReflectAccessibleObject	Globals.h	/^    ClassObject* classJavaLangReflectAccessibleObject;$/;"	m	struct:DvmGlobals
classJavaLangReflectConstructor	Globals.h	/^    ClassObject* classJavaLangReflectConstructor;$/;"	m	struct:DvmGlobals
classJavaLangReflectConstructorArray	Globals.h	/^    ClassObject* classJavaLangReflectConstructorArray;$/;"	m	struct:DvmGlobals
classJavaLangReflectField	Globals.h	/^    ClassObject* classJavaLangReflectField;$/;"	m	struct:DvmGlobals
classJavaLangReflectFieldArray	Globals.h	/^    ClassObject* classJavaLangReflectFieldArray;$/;"	m	struct:DvmGlobals
classJavaLangReflectMethod	Globals.h	/^    ClassObject* classJavaLangReflectMethod;$/;"	m	struct:DvmGlobals
classJavaLangReflectMethodArray	Globals.h	/^    ClassObject* classJavaLangReflectMethodArray;$/;"	m	struct:DvmGlobals
classJavaLangReflectProxy	Globals.h	/^    ClassObject* classJavaLangReflectProxy;$/;"	m	struct:DvmGlobals
classJavaLangStackTraceElement	Globals.h	/^    ClassObject* classJavaLangStackTraceElement;$/;"	m	struct:DvmGlobals
classJavaLangStackTraceElementArray	Globals.h	/^    ClassObject* classJavaLangStackTraceElementArray;$/;"	m	struct:DvmGlobals
classJavaLangString	Globals.h	/^    ClassObject* classJavaLangString;$/;"	m	struct:DvmGlobals
classJavaLangThread	Globals.h	/^    ClassObject* classJavaLangThread;$/;"	m	struct:DvmGlobals
classJavaLangThreadGroup	Globals.h	/^    ClassObject* classJavaLangThreadGroup;$/;"	m	struct:DvmGlobals
classJavaLangVMThread	Globals.h	/^    ClassObject* classJavaLangVMThread;$/;"	m	struct:DvmGlobals
classJavaNioReadWriteDirectByteBuffer	Globals.h	/^    ClassObject* classJavaNioReadWriteDirectByteBuffer;$/;"	m	struct:DvmGlobals
classLoader	Native.cpp	/^    Object*     classLoader;        \/* ClassLoader we are associated with *\/$/;"	m	struct:SharedLib	file:
classLoader	compiler/Compiler.h	/^    Object *classLoader;                \/* Class loader *\/$/;"	m	struct:ICPatchWorkOrder
classLoader	compiler/CompilerIR.h	/^    Object *classLoader;$/;"	m	struct:CallsiteInfo
classLoader	oo/Object.h	/^    Object*         classLoader;$/;"	m	struct:ClassObject
classLoaderOverride	Thread.h	/^    Object*     classLoaderOverride;$/;"	m	struct:Thread
classMatch	jdwp/JdwpEvent.h	/^    } classMatch;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon28
className	jdwp/JdwpEvent.cpp	/^    const char*         className;      \/* ClassMatch\/ClassExclude *\/$/;"	m	struct:ModBasket	file:
classNameFromIndex	interp/Interp.cpp	/^static std::string classNameFromIndex(const Method* method, int ref,$/;"	f	file:
classObjectSize	oo/Class.cpp	/^static size_t classObjectSize(size_t sfieldCount)$/;"	f	file:
classObjectToRefTypeId	Debugger.cpp	/^static RefTypeId classObjectToRefTypeId(ClassObject* clazz)$/;"	f	file:
classOnly	jdwp/JdwpEvent.h	/^    } classOnly;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon27
classOrgApacheHarmonyDalvikDdmcChunk	Globals.h	/^    ClassObject* classOrgApacheHarmonyDalvikDdmcChunk;$/;"	m	struct:DvmGlobals
classOrgApacheHarmonyDalvikDdmcDdmServer	Globals.h	/^    ClassObject* classOrgApacheHarmonyDalvikDdmcDdmServer;$/;"	m	struct:DvmGlobals
classOrgApacheHarmonyLangAnnotationAnnotationFactory	Globals.h	/^    ClassObject* classOrgApacheHarmonyLangAnnotationAnnotationFactory;$/;"	m	struct:DvmGlobals
classOrgApacheHarmonyLangAnnotationAnnotationMember	Globals.h	/^    ClassObject* classOrgApacheHarmonyLangAnnotationAnnotationMember;$/;"	m	struct:DvmGlobals
classOrgApacheHarmonyLangAnnotationAnnotationMemberArray	Globals.h	/^    ClassObject* classOrgApacheHarmonyLangAnnotationAnnotationMemberArray;$/;"	m	struct:DvmGlobals
classPathName	shadowlib/ReAgent.cpp	/^static const char *classPathName = "ch\/usi\/dag\/dislre\/AREDispatch";$/;"	v	file:
classPathStr	Globals.h	/^    char*       classPathStr;$/;"	m	struct:DvmGlobals
classPattern	jdwp/JdwpEvent.h	/^        char*       classPattern;$/;"	m	struct:JdwpEventMod::__anon28
classPattern	jdwp/JdwpEvent.h	/^        char*       classPattern;$/;"	m	struct:JdwpEventMod::__anon29
classPointerList	compiler/CompilerIR.h	/^    LIR *classPointerList;              \/\/ Relocatable$/;"	m	struct:CompilationUnit
classSerialNumber	Globals.h	/^    volatile int classSerialNumber;$/;"	m	struct:DvmGlobals
classVerifyMode	Globals.h	/^    DexClassVerifyMode  classVerifyMode;$/;"	m	struct:DvmGlobals
classfileLoadHook	shadowlib/ReAgent.cpp	/^int classfileLoadHook(const char* name, int len){$/;"	f
clazz	AllocTracker.cpp	/^    ClassObject*    clazz;      \/* class allocated in this block *\/$/;"	m	struct:AllocRecord	file:
clazz	Debugger.h	/^    ClassObject* clazz;$/;"	m	struct:DebugInvokeReq
clazz	alloc/Alloc.cpp	/^    const ClassObject *clazz;$/;"	m	struct:CountContext	file:
clazz	analysis/CodeVerify.h	/^        ClassObject*    clazz;  \/* class created at this address *\/$/;"	m	struct:UninitInstanceMap::__anon14
clazz	compiler/Compiler.h	/^    const ClassObject *clazz;   \/* key for prediction *\/$/;"	m	struct:PredictedChainingCell
clazz	oo/Object.h	/^    ClassObject*    clazz;          \/* class in which the field is declared *\/$/;"	m	struct:Field
clazz	oo/Object.h	/^    ClassObject*    clazz;$/;"	m	struct:InterfaceEntry
clazz	oo/Object.h	/^    ClassObject*    clazz;$/;"	m	struct:Method
clazz	oo/Object.h	/^    ClassObject*    clazz;$/;"	m	struct:Object
clazz	reflect/Reflect.h	/^    const ClassObject* clazz;            \/* class to resolve with respect to *\/$/;"	m	struct:EncodedArrayIterator
cleanUpAndExit	arch/x86/Call386ABI.S	/^cleanUpAndExit:$/;"	l
cleanupMatchList	jdwp/JdwpEvent.cpp	/^static void cleanupMatchList(JdwpState* state, JdwpEvent** matchList,$/;"	f	file:
clearAllocProfStateFields	native/dalvik_system_VMDebug.cpp	/^static void clearAllocProfStateFields(AllocProfState *allocProf,$/;"	f	file:
clearBlock	alloc/Copying.cpp	/^static void clearBlock(HeapSource *heapSource, size_t block)$/;"	f	file:
clearFromSpace	alloc/Copying.cpp	/^static void clearFromSpace(HeapSource *heapSource)$/;"	f	file:
clearPredecessorVector	compiler/Loop.cpp	/^static bool clearPredecessorVector(struct CompilationUnit *cUnit,$/;"	f	file:
clearReference	alloc/Copying.cpp	/^static void clearReference(Object *obj)$/;"	f	file:
clearReference	alloc/MarkSweep.cpp	/^static void clearReference(Object *reference)$/;"	f	file:
clearWhiteReferences	alloc/Copying.cpp	/^void clearWhiteReferences(Object **list)$/;"	f
clearWhiteReferences	alloc/MarkSweep.cpp	/^static void clearWhiteReferences(Object **list)$/;"	f	file:
clearedReferences	alloc/HeapInternal.h	/^    Object *clearedReferences;$/;"	m	struct:GcHeap
clientReplyRecv	shadowlib/ReAgent.cpp	/^int clientReplyRecv(int transaction_id, int from_pid, int from_tid, bool isOneWay, int t_flag){$/;"	f
clientSock	jdwp/JdwpPriv.h	/^    int             clientSock;     \/* active connection to debugger *\/$/;"	m	class:JdwpNetStateBase
clientTransactionStart	shadowlib/ReAgent.cpp	/^int clientTransactionStart(int transaction_id, bool isOneWay){$/;"	f
clobberRegBody	compiler/codegen/RallocUtil.cpp	/^static bool clobberRegBody(CompilationUnit *cUnit, RegisterInfo *p,$/;"	f	file:
clobberSRegBody	compiler/codegen/RallocUtil.cpp	/^static void clobberSRegBody(RegisterInfo *p, int numTemps, int sReg)$/;"	f	file:
cloneMethod	oo/Class.cpp	/^static void cloneMethod(Method* dst, const Method* src)$/;"	f	file:
close	jdwp/JdwpPriv.h	/^    void (*close)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
closeConnection	jdwp/JdwpAdb.cpp	/^static void closeConnection(struct JdwpState* state)$/;"	f	file:
closeConnection	jdwp/JdwpSocket.cpp	/^static void closeConnection(JdwpState* state)$/;"	f	file:
cmd	jdwp/JdwpHandler.cpp	/^    u1  cmd;$/;"	m	struct:JdwpHandlerMap	file:
cmd	jdwp/JdwpHandler.h	/^    u1  cmd;$/;"	m	struct:JdwpReqHeader
cmdSet	jdwp/JdwpHandler.cpp	/^    u1  cmdSet;$/;"	m	struct:JdwpHandlerMap	file:
cmdSet	jdwp/JdwpHandler.h	/^    u1  cmdSet;$/;"	m	struct:JdwpReqHeader
codeAddress	compiler/Compiler.h	/^    void *codeAddress;$/;"	m	struct:JitTranslationInfo
codeAddress	interp/Jit.h	/^    void*               codeAddress;    \/* Code address of native translation *\/$/;"	m	struct:JitEntry
codeBuffer	compiler/CompilerIR.h	/^    unsigned char *codeBuffer;$/;"	m	struct:CompilationUnit
codeCache	Globals.h	/^    void* codeCache;$/;"	m	struct:DvmJitGlobals
codeCacheByteUsed	Globals.h	/^    unsigned int codeCacheByteUsed;$/;"	m	struct:DvmJitGlobals
codeCacheFull	Globals.h	/^    bool codeCacheFull;$/;"	m	struct:DvmJitGlobals
codeCachePatches	Globals.h	/^    int                codeCachePatches;$/;"	m	struct:DvmJitGlobals
codeCacheProtectionLock	Globals.h	/^    pthread_mutex_t    codeCacheProtectionLock;$/;"	m	struct:DvmJitGlobals
codeCacheSize	Globals.h	/^    unsigned int codeCacheSize;$/;"	m	struct:DvmJitGlobals
common_abort	mterp/armv5te/footer.S	/^common_abort:$/;"	l
common_abort	mterp/out/InterpAsm-armv5te-vfp.S	/^common_abort:$/;"	l
common_abort	mterp/out/InterpAsm-armv5te.S	/^common_abort:$/;"	l
common_abort	mterp/out/InterpAsm-armv7-a-neon.S	/^common_abort:$/;"	l
common_abort	mterp/out/InterpAsm-armv7-a.S	/^common_abort:$/;"	l
common_abort	mterp/out/InterpAsm-x86-atom.S	/^common_abort:$/;"	l
common_abort	mterp/out/InterpAsm-x86.S	/^common_abort:$/;"	l
common_abort	mterp/x86-atom/footer.S	/^common_abort:$/;"	l
common_abort	mterp/x86/footer.S	/^common_abort:$/;"	l
common_dumpRegs	mterp/armv5te/footer.S	/^common_dumpRegs:$/;"	l
common_dumpRegs	mterp/out/InterpAsm-armv5te-vfp.S	/^common_dumpRegs:$/;"	l
common_dumpRegs	mterp/out/InterpAsm-armv5te.S	/^common_dumpRegs:$/;"	l
common_dumpRegs	mterp/out/InterpAsm-armv7-a-neon.S	/^common_dumpRegs:$/;"	l
common_dumpRegs	mterp/out/InterpAsm-armv7-a.S	/^common_dumpRegs:$/;"	l
common_errArrayIndex	mterp/armv5te/footer.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/out/InterpAsm-armv5te-vfp.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/out/InterpAsm-armv5te.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/out/InterpAsm-armv7-a-neon.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/out/InterpAsm-armv7-a.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/out/InterpAsm-x86-atom.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/out/InterpAsm-x86.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/x86-atom/footer.S	/^common_errArrayIndex:$/;"	l
common_errArrayIndex	mterp/x86/footer.S	/^common_errArrayIndex:$/;"	l
common_errArrayStore	mterp/out/InterpAsm-x86-atom.S	/^common_errArrayStore:$/;"	l
common_errArrayStore	mterp/x86-atom/footer.S	/^common_errArrayStore:$/;"	l
common_errDivideByZero	mterp/armv5te/footer.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/out/InterpAsm-armv5te-vfp.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/out/InterpAsm-armv5te.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/out/InterpAsm-armv7-a-neon.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/out/InterpAsm-armv7-a.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/out/InterpAsm-x86-atom.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/out/InterpAsm-x86.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/x86-atom/footer.S	/^common_errDivideByZero:$/;"	l
common_errDivideByZero	mterp/x86/footer.S	/^common_errDivideByZero:$/;"	l
common_errNegativeArraySize	mterp/armv5te/footer.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/out/InterpAsm-armv5te-vfp.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/out/InterpAsm-armv5te.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/out/InterpAsm-armv7-a-neon.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/out/InterpAsm-armv7-a.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/out/InterpAsm-x86-atom.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/out/InterpAsm-x86.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/x86-atom/footer.S	/^common_errNegativeArraySize:$/;"	l
common_errNegativeArraySize	mterp/x86/footer.S	/^common_errNegativeArraySize:$/;"	l
common_errNoSuchMethod	mterp/armv5te/footer.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/out/InterpAsm-armv5te-vfp.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/out/InterpAsm-armv5te.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/out/InterpAsm-armv7-a-neon.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/out/InterpAsm-armv7-a.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/out/InterpAsm-x86-atom.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/out/InterpAsm-x86.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/x86-atom/footer.S	/^common_errNoSuchMethod:$/;"	l
common_errNoSuchMethod	mterp/x86/footer.S	/^common_errNoSuchMethod:$/;"	l
common_errNullObject	mterp/armv5te/footer.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/out/InterpAsm-armv5te-vfp.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/out/InterpAsm-armv5te.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/out/InterpAsm-armv7-a-neon.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/out/InterpAsm-armv7-a.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/out/InterpAsm-x86-atom.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/out/InterpAsm-x86.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/x86-atom/footer.S	/^common_errNullObject:$/;"	l
common_errNullObject	mterp/x86/footer.S	/^common_errNullObject:$/;"	l
common_exceptionThrown	mterp/armv5te/footer.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/out/InterpAsm-armv5te-vfp.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/out/InterpAsm-armv5te.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/out/InterpAsm-armv7-a-neon.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/out/InterpAsm-armv7-a.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/out/InterpAsm-x86-atom.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/out/InterpAsm-x86.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/x86-atom/footer.S	/^common_exceptionThrown:$/;"	l
common_exceptionThrown	mterp/x86/footer.S	/^common_exceptionThrown:$/;"	l
common_gotoBail	mterp/armv5te/footer.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/out/InterpAsm-armv5te-vfp.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/out/InterpAsm-armv5te.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/out/InterpAsm-armv7-a-neon.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/out/InterpAsm-armv7-a.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/out/InterpAsm-x86-atom.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/out/InterpAsm-x86.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/x86-atom/footer.S	/^common_gotoBail:$/;"	l
common_gotoBail	mterp/x86/footer.S	/^common_gotoBail:$/;"	l
common_invokeMethodNoRange	mterp/armv5te/footer.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/out/InterpAsm-armv5te-vfp.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/out/InterpAsm-armv5te.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/out/InterpAsm-armv7-a-neon.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/out/InterpAsm-armv7-a.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/out/InterpAsm-x86-atom.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/out/InterpAsm-x86.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/x86-atom/footer.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodNoRange	mterp/x86/footer.S	/^common_invokeMethodNoRange:$/;"	l
common_invokeMethodRange	mterp/armv5te/footer.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/out/InterpAsm-armv5te-vfp.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/out/InterpAsm-armv5te.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/out/InterpAsm-armv7-a-neon.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/out/InterpAsm-armv7-a.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/out/InterpAsm-x86-atom.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/out/InterpAsm-x86.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/x86-atom/footer.S	/^common_invokeMethodRange:$/;"	l
common_invokeMethodRange	mterp/x86/footer.S	/^common_invokeMethodRange:$/;"	l
common_periodicChecks	mterp/out/InterpAsm-x86-atom.S	/^common_periodicChecks:$/;"	l
common_periodicChecks	mterp/x86-atom/footer.S	/^common_periodicChecks:$/;"	l
common_periodicChecks_backwardBranch	mterp/out/InterpAsm-x86-atom.S	/^common_periodicChecks_backwardBranch:$/;"	l
common_periodicChecks_backwardBranch	mterp/x86-atom/footer.S	/^common_periodicChecks_backwardBranch:$/;"	l
common_printHex	mterp/armv5te/footer.S	/^common_printHex:$/;"	l
common_printHex	mterp/out/InterpAsm-armv5te-vfp.S	/^common_printHex:$/;"	l
common_printHex	mterp/out/InterpAsm-armv5te.S	/^common_printHex:$/;"	l
common_printHex	mterp/out/InterpAsm-armv7-a-neon.S	/^common_printHex:$/;"	l
common_printHex	mterp/out/InterpAsm-armv7-a.S	/^common_printHex:$/;"	l
common_printLong	mterp/armv5te/footer.S	/^common_printLong:$/;"	l
common_printLong	mterp/out/InterpAsm-armv5te-vfp.S	/^common_printLong:$/;"	l
common_printLong	mterp/out/InterpAsm-armv5te.S	/^common_printLong:$/;"	l
common_printLong	mterp/out/InterpAsm-armv7-a-neon.S	/^common_printLong:$/;"	l
common_printLong	mterp/out/InterpAsm-armv7-a.S	/^common_printLong:$/;"	l
common_printMethod	mterp/armv5te/footer.S	/^common_printMethod:$/;"	l
common_printMethod	mterp/out/InterpAsm-armv5te-vfp.S	/^common_printMethod:$/;"	l
common_printMethod	mterp/out/InterpAsm-armv5te.S	/^common_printMethod:$/;"	l
common_printMethod	mterp/out/InterpAsm-armv7-a-neon.S	/^common_printMethod:$/;"	l
common_printMethod	mterp/out/InterpAsm-armv7-a.S	/^common_printMethod:$/;"	l
common_printNewline	mterp/armv5te/footer.S	/^common_printNewline:$/;"	l
common_printNewline	mterp/out/InterpAsm-armv5te-vfp.S	/^common_printNewline:$/;"	l
common_printNewline	mterp/out/InterpAsm-armv5te.S	/^common_printNewline:$/;"	l
common_printNewline	mterp/out/InterpAsm-armv7-a-neon.S	/^common_printNewline:$/;"	l
common_printNewline	mterp/out/InterpAsm-armv7-a.S	/^common_printNewline:$/;"	l
common_printNum	mterp/armv5te/footer.S	/^common_printNum:$/;"	l
common_printNum	mterp/out/InterpAsm-armv5te-vfp.S	/^common_printNum:$/;"	l
common_printNum	mterp/out/InterpAsm-armv5te.S	/^common_printNum:$/;"	l
common_printNum	mterp/out/InterpAsm-armv7-a-neon.S	/^common_printNum:$/;"	l
common_printNum	mterp/out/InterpAsm-armv7-a.S	/^common_printNum:$/;"	l
common_resumeAfterGlueCall	mterp/armv5te/footer.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/out/InterpAsm-armv5te-vfp.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/out/InterpAsm-armv5te.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/out/InterpAsm-armv7-a-neon.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/out/InterpAsm-armv7-a.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/out/InterpAsm-x86-atom.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/out/InterpAsm-x86.S	/^ common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/x86-atom/footer.S	/^common_resumeAfterGlueCall:$/;"	l
common_resumeAfterGlueCall	mterp/x86/footer.S	/^ common_resumeAfterGlueCall:$/;"	l
common_returnFromMethod	mterp/armv5te/footer.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/out/InterpAsm-armv5te-vfp.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/out/InterpAsm-armv5te.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/out/InterpAsm-armv7-a-neon.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/out/InterpAsm-armv7-a.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/out/InterpAsm-x86-atom.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/out/InterpAsm-x86.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/x86-atom/footer.S	/^common_returnFromMethod:$/;"	l
common_returnFromMethod	mterp/x86/footer.S	/^common_returnFromMethod:$/;"	l
common_selectTrace	mterp/armv5te/footer.S	/^common_selectTrace:$/;"	l
common_selectTrace	mterp/out/InterpAsm-armv5te-vfp.S	/^common_selectTrace:$/;"	l
common_selectTrace	mterp/out/InterpAsm-armv5te.S	/^common_selectTrace:$/;"	l
common_selectTrace	mterp/out/InterpAsm-armv7-a-neon.S	/^common_selectTrace:$/;"	l
common_selectTrace	mterp/out/InterpAsm-armv7-a.S	/^common_selectTrace:$/;"	l
common_selectTrace	mterp/out/InterpAsm-x86.S	/^common_selectTrace:$/;"	l
common_selectTrace	mterp/x86/footer.S	/^common_selectTrace:$/;"	l
common_testUpdateProfile	mterp/armv5te/footer.S	/^common_testUpdateProfile:$/;"	l
common_testUpdateProfile	mterp/out/InterpAsm-armv5te-vfp.S	/^common_testUpdateProfile:$/;"	l
common_testUpdateProfile	mterp/out/InterpAsm-armv5te.S	/^common_testUpdateProfile:$/;"	l
common_testUpdateProfile	mterp/out/InterpAsm-armv7-a-neon.S	/^common_testUpdateProfile:$/;"	l
common_testUpdateProfile	mterp/out/InterpAsm-armv7-a.S	/^common_testUpdateProfile:$/;"	l
common_updateProfile	mterp/armv5te/footer.S	/^common_updateProfile:$/;"	l
common_updateProfile	mterp/out/InterpAsm-armv5te-vfp.S	/^common_updateProfile:$/;"	l
common_updateProfile	mterp/out/InterpAsm-armv5te.S	/^common_updateProfile:$/;"	l
common_updateProfile	mterp/out/InterpAsm-armv7-a-neon.S	/^common_updateProfile:$/;"	l
common_updateProfile	mterp/out/InterpAsm-armv7-a.S	/^common_updateProfile:$/;"	l
common_updateProfile	mterp/out/InterpAsm-x86.S	/^common_updateProfile:$/;"	l
common_updateProfile	mterp/x86/footer.S	/^common_updateProfile:$/;"	l
common_verifyField	mterp/armv5te/footer.S	/^common_verifyField:$/;"	l
common_verifyField	mterp/out/InterpAsm-armv5te-vfp.S	/^common_verifyField:$/;"	l
common_verifyField	mterp/out/InterpAsm-armv5te.S	/^common_verifyField:$/;"	l
common_verifyField	mterp/out/InterpAsm-armv7-a-neon.S	/^common_verifyField:$/;"	l
common_verifyField	mterp/out/InterpAsm-armv7-a.S	/^common_verifyField:$/;"	l
compareAndSwap	test/AtomicTest.cpp	/^static int compareAndSwap(int32_t oldVal, int32_t newVal, int32_t* addr)$/;"	f	file:
compareAndSwapWide	test/AtomicTest.cpp	/^static int compareAndSwapWide(int64_t oldVal, int64_t newVal, int64_t* addr)$/;"	f	file:
compareClassDescriptor	reflect/Annotation.cpp	/^static int compareClassDescriptor(DexFile* pDexFile, u4 typeIdx,$/;"	f	file:
compareDescriptorClasses	oo/Class.cpp	/^static bool compareDescriptorClasses(const char* descriptor,$/;"	f	file:
compareFieldStr	reflect/Annotation.cpp	/^static int compareFieldStr(DexFile* pDexFile, u4 idx, const Field* field)$/;"	f	file:
compareLineToTable	analysis/CodeVerify.cpp	/^static inline int compareLineToTable(const RegisterTable* regTable,$/;"	f	file:
compareMaps	analysis/RegisterMap.cpp	/^static int compareMaps(const RegisterMap* pMap1, const RegisterMap* pMap2)$/;"	f	file:
compareMethod	compiler/Frontend.cpp	/^static int compareMethod(const CompilerMethodStats *m1,$/;"	f	file:
compareMethodHelper	oo/Object.cpp	/^static inline int compareMethodHelper(Method* method, const char* methodName,$/;"	f	file:
compareMethodStr	reflect/Annotation.cpp	/^static int compareMethodStr(DexFile* pDexFile, u4 methodIdx,$/;"	f	file:
compareObject	ReferenceTable.cpp	/^static int compareObject(const void* vobj1, const void* vobj2)$/;"	f	file:
compileLoop	compiler/Frontend.cpp	/^static bool compileLoop(CompilationUnit *cUnit, unsigned int startOffset,$/;"	f	file:
compiledDalvikSize	compiler/Compiler.h	/^    int compiledDalvikSize;     \/\/ # of compiled dalvik bytecodes$/;"	m	struct:CompilerMethodStats
compilerHandle	Globals.h	/^    pthread_t          compilerHandle;$/;"	m	struct:DvmJitGlobals
compilerHighWater	Globals.h	/^    int                compilerHighWater;$/;"	m	struct:DvmJitGlobals
compilerICPatchIndex	Globals.h	/^    int                compilerICPatchIndex;$/;"	m	struct:DvmJitGlobals
compilerICPatchLock	Globals.h	/^    pthread_mutex_t    compilerICPatchLock;$/;"	m	struct:DvmJitGlobals
compilerICPatchQueue	Globals.h	/^    ICPatchWorkOrder compilerICPatchQueue[COMPILER_IC_PATCH_QUEUE_SIZE];$/;"	m	struct:DvmJitGlobals
compilerLock	Globals.h	/^    pthread_mutex_t    compilerLock;$/;"	m	struct:DvmJitGlobals
compilerMaxQueued	Globals.h	/^    int                compilerMaxQueued;$/;"	m	struct:DvmJitGlobals
compilerQueueActivity	Globals.h	/^    pthread_cond_t     compilerQueueActivity;$/;"	m	struct:DvmJitGlobals
compilerQueueEmpty	Globals.h	/^    pthread_cond_t     compilerQueueEmpty;$/;"	m	struct:DvmJitGlobals
compilerQueueLength	Globals.h	/^    volatile int       compilerQueueLength;$/;"	m	struct:DvmJitGlobals
compilerThread	Globals.h	/^    Thread*            compilerThread;$/;"	m	struct:DvmJitGlobals
compilerThreadBlockGCStart	Globals.h	/^    u8                 compilerThreadBlockGCStart;$/;"	m	struct:DvmJitGlobals
compilerThreadBlockGCTime	Globals.h	/^    u8                 compilerThreadBlockGCTime;$/;"	m	struct:DvmJitGlobals
compilerThreadStart	compiler/Compiler.cpp	/^static void *compilerThreadStart(void *arg)$/;"	f	file:
compilerThreadStartup	compiler/Compiler.cpp	/^static bool compilerThreadStartup(void)$/;"	f	file:
compilerWorkDequeueIndex	Globals.h	/^    int                compilerWorkDequeueIndex;$/;"	m	struct:DvmJitGlobals
compilerWorkEnqueueIndex	Globals.h	/^    int                compilerWorkEnqueueIndex;$/;"	m	struct:DvmJitGlobals
compilerWorkQueue	Globals.h	/^    CompilerWorkOrder compilerWorkQueue[COMPILER_WORK_QUEUE_SIZE];$/;"	m	struct:DvmJitGlobals
compressMapDifferential	analysis/RegisterMap.cpp	/^static RegisterMap* compressMapDifferential(const RegisterMap* pMap,$/;"	f	file:
computeBitDiff	analysis/RegisterMap.cpp	/^static int computeBitDiff(const u1* bits1, const u1* bits2, int byteWidth,$/;"	f	file:
computeBlockDominators	compiler/SSATransformation.cpp	/^static bool computeBlockDominators(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
computeBlockLiveIns	compiler/SSATransformation.cpp	/^static bool computeBlockLiveIns(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
computeClassHash	hprof/HprofClass.cpp	/^static u4 computeClassHash(const ClassObject *clazz)$/;"	f	file:
computeDFSOrder	compiler/SSATransformation.cpp	/^static void computeDFSOrder(CompilationUnit *cUnit)$/;"	f	file:
computeDefBlockMatrix	compiler/SSATransformation.cpp	/^static void computeDefBlockMatrix(CompilationUnit *cUnit)$/;"	f	file:
computeDomPostOrderTraversal	compiler/SSATransformation.cpp	/^static void computeDomPostOrderTraversal(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
computeDominanceFrontier	compiler/SSATransformation.cpp	/^static bool computeDominanceFrontier(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
computeDominators	compiler/SSATransformation.cpp	/^static void computeDominators(CompilationUnit *cUnit)$/;"	f	file:
computeFieldOffsets	oo/Class.cpp	/^static bool computeFieldOffsets(ClassObject* clazz)$/;"	f	file:
computeFileChecksum	analysis/DexPrepare.cpp	/^static bool computeFileChecksum(int fd, off_t start, size_t length, u4* pSum)$/;"	f	file:
computeImmediateDominator	compiler/SSATransformation.cpp	/^static bool computeImmediateDominator(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
computeJniArgInfo	oo/Class.cpp	/^static int computeJniArgInfo(const DexProto* proto)$/;"	f	file:
computeMapStats	analysis/RegisterMap.cpp	/^static void computeMapStats(RegisterMap* pMap, const Method* method)$/;"	f	file:
computeRefOffsets	oo/Class.cpp	/^static void computeRefOffsets(ClassObject* clazz)$/;"	f	file:
computeRegisterMapSize	analysis/RegisterMap.cpp	/^static size_t computeRegisterMapSize(const RegisterMap* pMap)$/;"	f	file:
computeStackSum	Jni.cpp	/^static void computeStackSum(Thread* self) {$/;"	f	file:
computeStringTableSize	AllocTracker.cpp	/^static size_t computeStringTableSize(PointerSet* strings)$/;"	f	file:
computeSuccLiveIn	compiler/SSATransformation.cpp	/^static void computeSuccLiveIn(BitVector *dest,$/;"	f	file:
computeUtf16Hash	UtfString.cpp	/^static inline u4 computeUtf16Hash(const u2* utf16Str, size_t len)$/;"	f	file:
computeUtf8Hash	hprof/HprofString.cpp	/^static u4 computeUtf8Hash(const char *str)$/;"	f	file:
computeWidthsAndCountOps	analysis/DexVerify.cpp	/^static bool computeWidthsAndCountOps(VerifierData* vdata)$/;"	f	file:
concurrentMarkSweep	Globals.h	/^    bool        concurrentMarkSweep;$/;"	m	struct:DvmGlobals
concurrentStartBytes	alloc/HeapSource.cpp	/^    size_t concurrentStartBytes;$/;"	m	struct:Heap	file:
conditional	jdwp/JdwpEvent.h	/^    } conditional;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon25
constTypeToRegType	analysis/CodeVerify.cpp	/^static RegType constTypeToRegType(RegType constType)$/;"	f	file:
constantValues	compiler/CompilerIR.h	/^    int *constantValues;                \/\/ length == numSSAReg$/;"	m	struct:CompilationUnit
consumeBytes	jdwp/JdwpAdb.cpp	/^static void consumeBytes(JdwpNetState* netState, int count)$/;"	f	file:
consumeBytes	jdwp/JdwpSocket.cpp	/^static void consumeBytes(JdwpNetState* netState, int count)$/;"	f	file:
containingMethod	compiler/CompilerIR.h	/^    const Method *containingMethod;     \/\/ For blocks from the callee$/;"	m	struct:BasicBlock
contains	IndirectRefTable.cpp	/^bool IndirectRefTable::contains(const Object* obj) const {$/;"	f	class:IndirectRefTable
contentIsInsn	compiler/Frontend.cpp	/^static inline bool contentIsInsn(const u2 *codePtr) {$/;"	f	file:
contents	oo/Object.h	/^    u8              contents[1];$/;"	m	struct:ArrayObject
controlAddr	jdwp/JdwpAdb.cpp	/^    } controlAddr;$/;"	m	struct:JdwpNetState	typeref:union:JdwpNetState::__anon35	file:
controlAddrLen	jdwp/JdwpAdb.cpp	/^    socklen_t           controlAddrLen;$/;"	m	struct:JdwpNetState	file:
controlAddrPlain	jdwp/JdwpAdb.cpp	/^        struct sockaddr     controlAddrPlain;$/;"	m	union:JdwpNetState::__anon35	typeref:struct:JdwpNetState::__anon35::sockaddr	file:
controlAddrUn	jdwp/JdwpAdb.cpp	/^        struct sockaddr_un  controlAddrUn;$/;"	m	union:JdwpNetState::__anon35	typeref:struct:JdwpNetState::__anon35::sockaddr_un	file:
controlSock	jdwp/JdwpAdb.cpp	/^    int                 controlSock;$/;"	m	struct:JdwpNetState	file:
convertMemOpIntoMove	compiler/codegen/arm/LocalOptimizations.cpp	/^static void convertMemOpIntoMove(CompilationUnit *cUnit, ArmLIR *origLIR,$/;"	f	file:
convertReferenceResult	Jni.cpp	/^static inline void convertReferenceResult(JNIEnv* env, JValue* pResult,$/;"	f	file:
convertRegId	compiler/InlineTransformation.cpp	/^static inline u4 convertRegId(const DecodedInstruction *invoke,$/;"	f	file:
convertReturnType	reflect/Annotation.cpp	/^static Object* convertReturnType(Object* valueObj, ClassObject* methodReturn)$/;"	f	file:
convertSignaturePartToClass	reflect/Reflect.cpp	/^static ClassObject* convertSignaturePartToClass(char** pSignature,$/;"	f	file:
convertSignatureToClassArray	reflect/Reflect.cpp	/^static ArrayObject* convertSignatureToClassArray(char** pSignature,$/;"	f	file:
convertUtf16ToUtf8	UtfString.cpp	/^static void convertUtf16ToUtf8(char* utf8Str, const u2* utf16Str, int len)$/;"	f	file:
convertUtf8ToUtf16BEUA	AllocTracker.cpp	/^static int convertUtf8ToUtf16BEUA(u1* utf16Str, const char* utf8Str)$/;"	f	file:
copyFileToFile	RawDexFile.cpp	/^static int copyFileToFile(int destFd, int srcFd, size_t size)$/;"	f	file:
copyLineFromTable	analysis/CodeVerify.cpp	/^static inline void copyLineFromTable(RegisterLine* dst,$/;"	f	file:
copyLineToTable	analysis/CodeVerify.cpp	/^static inline void copyLineToTable(RegisterTable* regTable, int insnIdx,$/;"	f	file:
copyRefType	Debugger.cpp	/^static int copyRefType(void* vclazz, void* varg)$/;"	f	file:
copyRegCount	analysis/DexVerify.h	/^    size_t copyRegCount;       \/* calls from updateRegisters->copyRegisters *\/$/;"	m	struct:VerifierStats
copyRegInfo	compiler/codegen/RallocUtil.cpp	/^static void copyRegInfo(CompilationUnit *cUnit, int newReg, int oldReg)$/;"	f	file:
copyRegister1	analysis/CodeVerify.cpp	/^static void copyRegister1(RegisterLine* registerLine, u4 vdst, u4 vsrc,$/;"	f	file:
copyRegister2	analysis/CodeVerify.cpp	/^static void copyRegister2(RegisterLine* registerLine, u4 vdst, u4 vsrc,$/;"	f	file:
copyRegisterLine	analysis/CodeVerify.cpp	/^static inline void copyRegisterLine(RegisterLine* dst, const RegisterLine* src,$/;"	f	file:
copyResultRegister1	analysis/CodeVerify.cpp	/^static void copyResultRegister1(RegisterLine* registerLine,$/;"	f	file:
copyResultRegister2	analysis/CodeVerify.cpp	/^static void copyResultRegister2(RegisterLine* registerLine,$/;"	f	file:
copySwappedArrayData	interp/Interp.cpp	/^static void copySwappedArrayData(void* dest, const u2* src, u4 size, u2 width)$/;"	f	file:
copyTypes	oo/Object.cpp	/^static inline void copyTypes(char* buffer, const char** argTypes,$/;"	f	file:
copyValuesFromBE	Debugger.cpp	/^static void copyValuesFromBE(u1* out, const u1* in, int count, int width)$/;"	f	file:
copyValuesToBE	Debugger.cpp	/^static void copyValuesToBE(u1* out, const u1* in, int count, int width)$/;"	f	file:
copyWithoutDuplicates	reflect/Proxy.cpp	/^static int copyWithoutDuplicates(Method** allMethods, int allCount,$/;"	f	file:
coreTemps	compiler/codegen/arm/ArmLIR.h	/^    RegisterInfo *coreTemps;$/;"	m	struct:RegisterPool
coreTemps	compiler/codegen/arm/Thumb/Factory.cpp	/^static int coreTemps[] = {r0, r1, r2, r3, r4PC, r7};$/;"	v	file:
coreTemps	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int coreTemps[] = {r0, r1, r2, r3, r4PC, r7, r8, r9, r10, r11, r12};$/;"	v	file:
coreTemps	compiler/codegen/x86/X86LIR.h	/^    RegisterInfo *coreTemps;$/;"	m	struct:RegisterPool
count	PointerSet.cpp	/^    u2          count;$/;"	m	struct:PointerSet	file:
count	StdioConverter.cpp	/^    int     count;$/;"	m	struct:BufferedData	file:
count	alloc/Alloc.cpp	/^    size_t count;$/;"	m	struct:CountContext	file:
count	compiler/CompilerIR.h	/^        u1 count[kChainingCellLast]; \/* include one more space for the gap # *\/$/;"	m	union:ChainCellCounts::__anon42
count	interp/Interp.cpp	/^    int         count;$/;"	m	struct:BreakpointSet	file:
count	jdwp/JdwpEvent.h	/^        int         count;$/;"	m	struct:JdwpEventMod::__anon24
count	jdwp/JdwpEvent.h	/^    } count;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon24
countAllocation	alloc/HeapSource.cpp	/^static void countAllocation(Heap *heap, const void *ptr)$/;"	f	file:
countArgsAndFindReturnType	oo/Object.cpp	/^static inline size_t countArgsAndFindReturnType(const char* descriptor,$/;"	f	file:
countAssignableInstancesOfClassCallback	alloc/Alloc.cpp	/^static void countAssignableInstancesOfClassCallback(Object *obj, void *arg)$/;"	f	file:
countFree	alloc/HeapSource.cpp	/^static void countFree(Heap *heap, const void *ptr, size_t *numBytes)$/;"	f	file:
countInstancesOfClassCallback	alloc/Alloc.cpp	/^static void countInstancesOfClassCallback(Object *obj, void *arg)$/;"	f	file:
countMethodArguments	reflect/Annotation.cpp	/^static int countMethodArguments(const Method* method)$/;"	f	file:
countProbes	Hash.cpp	/^static int countProbes(HashTable* pHashTable, u4 itemHash, const void* item,$/;"	f	file:
countTombStones	Hash.cpp	/^static int countTombStones(HashTable* pHashTable)$/;"	f	file:
countWhiteReferenceVisitor	alloc/CardTable.cpp	/^static void countWhiteReferenceVisitor(void *addr, void *arg)$/;"	f	file:
cpuClockBase	Thread.h	/^    u8          cpuClockBase;$/;"	m	struct:Thread
cpuClockBaseSet	Thread.h	/^    bool        cpuClockBaseSet;$/;"	m	struct:Thread
crawlDalvikStack	compiler/Compiler.cpp	/^static void crawlDalvikStack(Thread *thread, bool print)$/;"	f	file:
create	CheckJni.cpp	/^    static void* create(const void* buf, size_t len, bool modOkay) {$/;"	f	struct:GuardedCopy
create	shadowlib/Socket.cpp	/^bool Socket::create()$/;"	f	class:Socket
createAnnotationMember	reflect/Annotation.cpp	/^static Object* createAnnotationMember(const ClassObject* clazz,$/;"	f	file:
createArrayClass	oo/Array.cpp	/^static ClassObject* createArrayClass(const char* descriptor, Object* loader)$/;"	f	file:
createBackwardWidthTable	analysis/Liveness.cpp	/^static InstructionWidth* createBackwardWidthTable(VerifierData* vdata)$/;"	f	file:
createConstructor	reflect/Proxy.cpp	/^static void createConstructor(ClassObject* clazz, Method* meth)$/;"	f	file:
createConstructorObject	reflect/Reflect.cpp	/^static Object* createConstructorObject(Method* meth)$/;"	f	file:
createExceptionClassList	reflect/Proxy.cpp	/^static bool createExceptionClassList(const Method* method, PointerSet** pThrows)$/;"	f	file:
createFakeEntryFrame	Thread.cpp	/^static bool createFakeEntryFrame(Thread* thread)$/;"	f	file:
createFakeRunFrame	Thread.cpp	/^static bool createFakeRunFrame(Thread* thread)$/;"	f	file:
createFieldObject	reflect/Reflect.cpp	/^static Object* createFieldObject(Field* field, const ClassObject* clazz)$/;"	f	file:
createGuardedPACopy	CheckJni.cpp	/^static void* createGuardedPACopy(JNIEnv* env, const jarray jarr, jboolean* isCopy) {$/;"	f	file:
createHandlerMethod	reflect/Proxy.cpp	/^static void createHandlerMethod(ClassObject* clazz, Method* dstMeth,$/;"	f	file:
createIftable	oo/Class.cpp	/^static bool createIftable(ClassObject* clazz)$/;"	f	file:
createInitialClasses	oo/Class.cpp	/^static bool createInitialClasses() {$/;"	f	file:
createJniNameString	Native.cpp	/^static char* createJniNameString(const char* classDescriptor,$/;"	f	file:
createMangledSignature	Native.cpp	/^static char* createMangledSignature(const DexProto* proto)$/;"	f	file:
createMarkStack	alloc/MarkSweep.cpp	/^static bool createMarkStack(GcMarkStack *stack)$/;"	f	file:
createMspace	alloc/HeapSource.cpp	/^static mspace createMspace(void *base, size_t startSize, size_t maximumSize)$/;"	f	file:
createPrimitiveType	oo/Class.cpp	/^static bool createPrimitiveType(PrimitiveType primitiveType, ClassObject** pClass)$/;"	f	file:
createStockException	alloc/Alloc.cpp	/^static Object* createStockException(const char* descriptor, const char* msg)$/;"	f	file:
createTargetDescriptor	reflect/Reflect.cpp	/^static void createTargetDescriptor(ArrayObject* args,$/;"	f	file:
createVtable	oo/Class.cpp	/^static bool createVtable(ClassObject* clazz)$/;"	f	file:
critical	JniInternal.h	/^    int     critical;$/;"	m	struct:JNIEnvExt
ctl	Thread.h	/^    } ctl;$/;"	m	union:InterpBreak	typeref:struct:InterpBreak::__anon12
curBlock	compiler/CompilerIR.h	/^    BasicBlock *curBlock;$/;"	m	struct:CompilationUnit
curFrame	interp/InterpState.h	/^    u4*             curFrame;   \/\/ Dalvik frame pointer$/;"	m	struct:InterpSaveState
curHandlerTable	Thread.h	/^        void* curHandlerTable;$/;"	m	struct:InterpBreak::__anon12
curLen	jdwp/ExpandBuf.cpp	/^    int     curLen;$/;"	m	struct:ExpandBuf	file:
curMethod	mterp/cstubs/enddefs.cpp	6;"	d	file:
curMethod	mterp/cstubs/stubdefs.cpp	28;"	d	file:
curMethod	mterp/out/InterpC-allstubs.cpp	398;"	d	file:
curMethod	mterp/out/InterpC-allstubs.cpp	4054;"	d	file:
curMethod	mterp/out/InterpC-armv5te-vfp.cpp	1161;"	d	file:
curMethod	mterp/out/InterpC-armv5te-vfp.cpp	398;"	d	file:
curMethod	mterp/out/InterpC-armv5te.cpp	1161;"	d	file:
curMethod	mterp/out/InterpC-armv5te.cpp	398;"	d	file:
curMethod	mterp/out/InterpC-armv7-a-neon.cpp	1161;"	d	file:
curMethod	mterp/out/InterpC-armv7-a-neon.cpp	398;"	d	file:
curMethod	mterp/out/InterpC-armv7-a.cpp	1161;"	d	file:
curMethod	mterp/out/InterpC-armv7-a.cpp	398;"	d	file:
curMethod	mterp/out/InterpC-x86-atom.cpp	2293;"	d	file:
curMethod	mterp/out/InterpC-x86-atom.cpp	398;"	d	file:
curMethod	mterp/out/InterpC-x86.cpp	2235;"	d	file:
curMethod	mterp/out/InterpC-x86.cpp	398;"	d	file:
curOffset	LinearAlloc.h	/^    int     curOffset;          \/* offset where next data goes *\/$/;"	m	struct:LinearAllocHdr
curOffset	Profile.h	/^    volatile int curOffset;$/;"	m	struct:MethodTraceState
curRec	hprof/Hprof.h	/^    hprof_record_t curRec;$/;"	m	struct:hprof_context_t
curpname	shadowlib/ReAgent.cpp	/^char curpname[100] ={0};$/;"	v
currRunHead	Thread.h	/^    const u2*   currRunHead;    \/\/ Start of run we're building$/;"	m	struct:Thread
currRunLen	Thread.h	/^    int         currRunLen;     \/\/ Length of run in 16-bit words$/;"	m	struct:Thread
currTraceHead	Thread.h	/^    const u2*   currTraceHead;  \/\/ Start of the trace we're building$/;"	m	struct:Thread
currTraceRun	Thread.h	/^    int         currTraceRun;$/;"	m	struct:Thread
currentArena	compiler/Utility.cpp	/^static ArenaMemBlock *arenaHead, *currentArena;$/;"	v	file:
currentHeap	hprof/Hprof.h	/^    HprofHeapId currentHeap;    \/\/ which heap we're currently emitting$/;"	m	struct:hprof_context_t
currentPc	interp/Stack.h	/^        const u2*   currentPc;$/;"	m	union:StackSaveArea::__anon22
currentPc2	Thread.h	/^    const u2*   currentPc2;$/;"	m	struct:Thread
currentSize	alloc/Copying.cpp	/^    size_t currentSize;$/;"	m	struct:HeapSource	file:
cursor	reflect/Reflect.h	/^    const u1* cursor;                    \/* current cursor *\/$/;"	m	struct:EncodedArrayIterator
cv	Debugger.h	/^    pthread_cond_t cv;$/;"	m	struct:DebugInvokeReq
d	Common.h	/^    double  d;$/;"	m	union:JValue
d	shadowlib/JniUtility.h	/^	double d;$/;"	m	union:double_jlong
d	shadowlib/ReQueue.h	/^	double d;$/;"	m	union:double_jlong
d	shadowlib/buffpack.h	/^	double d;$/;"	m	union:double_jlong
d2i_doconv	mterp/armv5te/OP_DOUBLE_TO_INT.S	/^d2i_doconv:$/;"	l
d2i_doconv	mterp/armv6t2/OP_DOUBLE_TO_INT.S	/^d2i_doconv:$/;"	l
d2i_doconv	mterp/out/InterpAsm-armv5te.S	/^d2i_doconv:$/;"	l
d2l_doconv	mterp/armv5te/OP_DOUBLE_TO_LONG.S	/^d2l_doconv:$/;"	l
d2l_doconv	mterp/armv6t2/OP_DOUBLE_TO_LONG.S	/^d2l_doconv:$/;"	l
d2l_doconv	mterp/out/InterpAsm-armv5te-vfp.S	/^d2l_doconv:$/;"	l
d2l_doconv	mterp/out/InterpAsm-armv5te.S	/^d2l_doconv:$/;"	l
d2l_doconv	mterp/out/InterpAsm-armv7-a-neon.S	/^d2l_doconv:$/;"	l
d2l_doconv	mterp/out/InterpAsm-armv7-a.S	/^d2l_doconv:$/;"	l
dPC	interp/Jit.h	/^    const u2*           dPC;            \/* Dalvik code address *\/$/;"	m	struct:JitEntry
dalvikInsn	compiler/CompilerIR.h	/^    DecodedInstruction dalvikInsn;$/;"	m	struct:MIR
dalvikSize	compiler/Compiler.h	/^    int dalvikSize;             \/\/ # of bytes for dalvik bytecodes$/;"	m	struct:CompilerMethodStats
dalvikToSSAMap	compiler/CompilerIR.h	/^    int *dalvikToSSAMap;                \/\/ length == method->registersSize$/;"	m	struct:CompilationUnit
dalvikToSSAMap	compiler/Dataflow.h	/^    int *dalvikToSSAMap;$/;"	m	struct:BasicBlockDataFlow
dalvik_inst	mterp/armv5te/OP_NOP.S	/^dalvik_inst:$/;"	l
dalvik_inst	mterp/out/InterpAsm-armv5te-vfp.S	/^dalvik_inst:$/;"	l
dalvik_inst	mterp/out/InterpAsm-armv5te.S	/^dalvik_inst:$/;"	l
dalvik_inst	mterp/out/InterpAsm-armv7-a-neon.S	/^dalvik_inst:$/;"	l
dalvik_inst	mterp/out/InterpAsm-armv7-a.S	/^dalvik_inst:$/;"	l
dalvik_inst	mterp/out/InterpAsm-x86-atom.S	/^dalvik_inst:$/;"	l
dalvik_inst	mterp/x86-atom/OP_NOP.S	/^dalvik_inst:$/;"	l
dalvik_mterp	mterp/armv5te/footer.S	/^dalvik_mterp:$/;"	l
dalvik_mterp	mterp/out/InterpAsm-armv5te-vfp.S	/^dalvik_mterp:$/;"	l
dalvik_mterp	mterp/out/InterpAsm-armv5te.S	/^dalvik_mterp:$/;"	l
dalvik_mterp	mterp/out/InterpAsm-armv7-a-neon.S	/^dalvik_mterp:$/;"	l
dalvik_mterp	mterp/out/InterpAsm-armv7-a.S	/^dalvik_mterp:$/;"	l
dalvik_mterp	mterp/out/InterpAsm-x86-atom.S	/^dalvik_mterp:$/;"	l
dalvik_mterp	mterp/x86-atom/footer.S	/^dalvik_mterp:$/;"	l
data	Hash.h	/^    void*       data;$/;"	m	struct:HashIter
data	Hash.h	/^    void* data;$/;"	m	struct:HashEntry
data	Misc.h	/^    } data;$/;"	m	struct:DebugOutputTarget	typeref:union:DebugOutputTarget::__anon16
data	analysis/RegisterMap.h	/^    u1      data[1];$/;"	m	struct:RegisterMap
data	analysis/RegisterMap.h	/^    void*       data;$/;"	m	struct:RegisterMapBuilder
data	interp/Jit.h	/^    int data;$/;"	m	struct:ShadowHeap
dataFlowInfo	compiler/CompilerIR.h	/^    struct BasicBlockDataFlow *dataFlowInfo;$/;"	m	struct:BasicBlock	typeref:struct:BasicBlock::BasicBlockDataFlow
dataFlowSSAFormat35C	compiler/Dataflow.cpp	/^static void dataFlowSSAFormat35C(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
dataFlowSSAFormat3RC	compiler/Dataflow.cpp	/^static void dataFlowSSAFormat3RC(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
dataOffset	compiler/CompilerIR.h	/^    int dataOffset;                     \/\/ starting offset of literal pool$/;"	m	struct:CompilationUnit
dbgRegistry	Globals.h	/^    HashTable*  dbgRegistry;$/;"	m	struct:DvmGlobals
dbgSuspendCount	Thread.h	/^    int dbgSuspendCount;$/;"	m	struct:Thread
dd	InlineNative.cpp	/^    double dd;$/;"	m	union:Convert64	file:
ddmActive	jdwp/JdwpPriv.h	/^    bool            ddmActive;$/;"	m	struct:JdwpState
ddmHpifWhen	alloc/HeapInternal.h	/^    int ddmHpifWhen;$/;"	m	struct:GcHeap
ddmHpsgWhat	alloc/HeapInternal.h	/^    int ddmHpsgWhat;$/;"	m	struct:GcHeap
ddmHpsgWhen	alloc/HeapInternal.h	/^    int ddmHpsgWhen;$/;"	m	struct:GcHeap
ddmNhsgWhat	alloc/HeapInternal.h	/^    int ddmNhsgWhat;$/;"	m	struct:GcHeap
ddmNhsgWhen	alloc/HeapInternal.h	/^    int ddmNhsgWhen;$/;"	m	struct:GcHeap
ddmThreadNotification	Globals.h	/^    bool        ddmThreadNotification;$/;"	m	struct:DvmGlobals
debugAlloc	CheckJni.cpp	/^    static u1* debugAlloc(size_t len) {$/;"	f	struct:GuardedCopy	file:
debugFree	CheckJni.cpp	/^    static void debugFree(void* dataBuf, size_t len) {$/;"	f	struct:GuardedCopy	file:
debugIsMethodEntry	Thread.h	/^    bool        debugIsMethodEntry;$/;"	m	struct:Thread
debugThreadHandle	jdwp/JdwpPriv.h	/^    pthread_t       debugThreadHandle;$/;"	m	struct:JdwpState
debugThreadId	jdwp/JdwpPriv.h	/^    ObjectId        debugThreadId;$/;"	m	struct:JdwpState
debugThreadStarted	jdwp/JdwpPriv.h	/^    int             debugThreadStarted;$/;"	m	struct:JdwpState
debugTrackedRefStart	interp/InterpState.h	/^    int             debugTrackedRefStart;$/;"	m	struct:InterpSaveState
debugTrackedRefStart	mterp/cstubs/enddefs.cpp	9;"	d	file:
debugTrackedRefStart	mterp/cstubs/stubdefs.cpp	30;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-allstubs.cpp	400;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-allstubs.cpp	4057;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv5te-vfp.cpp	1164;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv5te-vfp.cpp	400;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv5te.cpp	1164;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv5te.cpp	400;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv7-a-neon.cpp	1164;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv7-a-neon.cpp	400;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv7-a.cpp	1164;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-armv7-a.cpp	400;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-x86-atom.cpp	2296;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-x86-atom.cpp	400;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-x86.cpp	2238;"	d	file:
debugTrackedRefStart	mterp/out/InterpC-x86.cpp	400;"	d	file:
debuggerActive	Globals.h	/^    bool        debuggerActive;         \/* debugger is making requests *\/$/;"	m	struct:DvmGlobals
debuggerConnected	Globals.h	/^    bool        debuggerConnected;      \/* debugger or DDMS is connected *\/$/;"	m	struct:DvmGlobals
decInsn	interp/Jit.h	/^    DecodedInstruction decInsn;$/;"	m	struct:InstructionTrace
decTest	test/AtomicTest.cpp	/^static int decTest = 0;$/;"	v	file:
decodeRegList	compiler/codegen/arm/ArchUtility.cpp	/^static char * decodeRegList(ArmOpcode opcode, int vector, char *buf)$/;"	f	file:
decr	test/AtomicTest.cpp	/^static void decr()$/;"	f	file:
defBlockMatrix	compiler/CompilerIR.h	/^    BitVector **defBlockMatrix;         \/\/ numDalvikRegister x numBlocks$/;"	m	struct:CompilationUnit
defEnd	compiler/codegen/arm/ArmLIR.h	/^    struct LIR *defEnd;         \/\/ Ending inst in last def sequence$/;"	m	struct:RegisterInfo	typeref:struct:RegisterInfo::LIR
defEnd	compiler/codegen/x86/X86LIR.h	/^    struct LIR *defEnd;         \/\/ Ending inst in last def sequence$/;"	m	struct:RegisterInfo	typeref:struct:RegisterInfo::LIR
defMask	compiler/codegen/arm/ArmLIR.h	/^    u8 defMask;                 \/\/ Resource mask for def$/;"	m	struct:ArmLIR
defMask	compiler/codegen/x86/X86LIR.h	/^    u8 defMask;         \/\/ Resource mask for def$/;"	m	struct:X86LIR
defStart	compiler/codegen/arm/ArmLIR.h	/^    struct LIR *defStart;       \/\/ Starting inst in last def sequence$/;"	m	struct:RegisterInfo	typeref:struct:RegisterInfo::LIR
defStart	compiler/codegen/x86/X86LIR.h	/^    struct LIR *defStart;       \/\/ Starting inst in last def sequence$/;"	m	struct:RegisterInfo	typeref:struct:RegisterInfo::LIR
defV	compiler/Dataflow.h	/^    BitVector *defV;$/;"	m	struct:BasicBlockDataFlow
default_alt_stub	mterp/gen-mterp.py	/^default_alt_stub = None$/;"	v
default_op_dir	compiler/template/gen-template.py	/^default_op_dir = None$/;"	v
default_op_dir	mterp/gen-mterp.py	/^default_op_dir = None$/;"	v
defs	compiler/Dataflow.h	/^    int *defs;$/;"	m	struct:SSARepresentation
delayReferenceReferent	alloc/MarkSweep.cpp	/^static void delayReferenceReferent(Object *obj, GcMarkContext *ctx)$/;"	f	file:
deleteGlobalReference	Jni.cpp	/^static void deleteGlobalReference(jobject jobj) {$/;"	f	file:
deleteLocalReference	Jni.cpp	/^static void deleteLocalReference(Thread* self, jobject jobj) {$/;"	f	file:
deleteWeakGlobalReference	Jni.cpp	/^static void deleteWeakGlobalReference(jobject jobj) {$/;"	f	file:
depth	Debugger.h	/^    JdwpStepDepth depth;$/;"	m	struct:StepControl
depth	jdwp/JdwpEvent.h	/^        int         depth;          \/* JdwpStepDepth *\/$/;"	m	struct:JdwpEventMod::__anon33
dequeuePendingReference	alloc/MarkSweep.cpp	/^static Object *dequeuePendingReference(Object **list)$/;"	f	file:
descr	jdwp/JdwpHandler.cpp	/^    const char* descr;$/;"	m	struct:JdwpHandlerMap	file:
describeBlockQueue	alloc/Copying.cpp	/^static void describeBlockQueue(const HeapSource *heapSource)$/;"	f	file:
describeBlocks	alloc/Copying.cpp	/^static void describeBlocks(const HeapSource *heapSource)$/;"	f	file:
describeHeap	alloc/Copying.cpp	/^void describeHeap()$/;"	f
descriptor	oo/Class.cpp	/^    const char* descriptor;$/;"	m	struct:ClassMatchCriteria	file:
descriptor	oo/Object.h	/^    const char*     descriptor;$/;"	m	struct:ClassObject
descriptorAlloc	oo/Object.h	/^    char*           descriptorAlloc;$/;"	m	struct:ClassObject
destroy	CheckJni.cpp	/^    static void* destroy(void* dataBuf) {$/;"	f	struct:GuardedCopy
destroy	IndirectRefTable.cpp	/^void IndirectRefTable::destroy()$/;"	f	class:IndirectRefTable
destroyMarkStack	alloc/MarkSweep.cpp	/^static void destroyMarkStack(GcMarkStack *stack)$/;"	f	file:
determineCat1Const	analysis/CodeVerify.cpp	/^static char determineCat1Const(s4 value)$/;"	f	file:
dexOptForSmp	Globals.h	/^    bool        dexOptForSmp;$/;"	m	struct:DvmGlobals
dexOptMode	Globals.h	/^    DexOptimizerMode    dexOptMode;$/;"	m	struct:DvmGlobals
dfsOrder	compiler/CompilerIR.h	/^    GrowableList dfsOrder;$/;"	m	struct:CompilationUnit
digForSuperclass	analysis/CodeVerify.cpp	/^static ClassObject* digForSuperclass(ClassObject* c1, ClassObject* c2)$/;"	f	file:
directMethodCount	oo/Object.h	/^    int             directMethodCount;$/;"	m	struct:ClassObject
directMethods	oo/Object.h	/^    Method*         directMethods;$/;"	m	struct:ClassObject
directToDdms	Profile.h	/^    bool    directToDdms;$/;"	m	struct:MethodTraceState
directToDdms	hprof/Hprof.h	/^    bool directToDdms;$/;"	m	struct:hprof_context_t
directoryIsValid	analysis/DexPrepare.cpp	/^static bool directoryIsValid(const std::string& fileName)$/;"	f	file:
dirty	compiler/codegen/arm/ArmLIR.h	/^    bool dirty;                 \/\/ If live, is it dirty?$/;"	m	struct:RegisterInfo
dirty	compiler/codegen/x86/X86LIR.h	/^    bool dirty;                 \/\/ If live, is it dirty?$/;"	m	struct:RegisterInfo
dirty	hprof/Hprof.h	/^    bool dirty;$/;"	m	struct:hprof_record_t
disableExplicitGc	Globals.h	/^    bool        disableExplicitGc;$/;"	m	struct:DvmGlobals
disableJit	Globals.h	/^    bool disableJit;$/;"	m	struct:DvmJitGlobals
disableOpt	Globals.h	/^    int disableOpt;$/;"	m	struct:DvmJitGlobals
disarm	Init.cpp	/^    void disarm() {$/;"	f	class:ScopedShutdown
discardResult	compiler/Compiler.h	/^    bool discardResult;         \/\/ Used for debugging divergence and IC patching$/;"	m	struct:JitTranslationInfo
dmvCompilerTemplateEnd	compiler/template/armv5te/footer.S	/^dmvCompilerTemplateEnd:$/;"	l
dmvCompilerTemplateEnd	compiler/template/ia32/footer.S	/^dmvCompilerTemplateEnd:$/;"	l
dmvCompilerTemplateEnd	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dmvCompilerTemplateEnd:$/;"	l
dmvCompilerTemplateEnd	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dmvCompilerTemplateEnd:$/;"	l
dmvCompilerTemplateEnd	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dmvCompilerTemplateEnd:$/;"	l
dmvCompilerTemplateEnd	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dmvCompilerTemplateEnd:$/;"	l
dmvCompilerTemplateEnd	compiler/template/out/CompilerTemplateAsm-ia32.S	/^dmvCompilerTemplateEnd:$/;"	l
doAtomicTest	test/AtomicTest.cpp	/^static void doAtomicTest(int num)$/;"	f	file:
doCodeVerification	analysis/CodeVerify.cpp	/^static bool doCodeVerification(VerifierData* vdata, RegisterTable* regTable)$/;"	f	file:
doLoopBodyCodeMotion	compiler/Loop.cpp	/^static bool doLoopBodyCodeMotion(CompilationUnit *cUnit)$/;"	f	file:
doPreserve	alloc/Heap.h	/^  bool doPreserve;$/;"	m	struct:GcSpec
do_memcmp16	compiler/template/armv5te/TEMPLATE_STRING_COMPARETO.S	/^do_memcmp16:$/;"	l
do_memcmp16	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^do_memcmp16:$/;"	l
do_memcmp16	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^do_memcmp16:$/;"	l
do_memcmp16	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^do_memcmp16:$/;"	l
do_memcmp16	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^do_memcmp16:$/;"	l
do_remainder	compiler/template/armv5te/TEMPLATE_STRING_COMPARETO.S	/^do_remainder:$/;"	l
do_remainder	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^do_remainder:$/;"	l
do_remainder	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^do_remainder:$/;"	l
do_remainder	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^do_remainder:$/;"	l
do_remainder	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^do_remainder:$/;"	l
do_remainder2	compiler/template/armv5te/TEMPLATE_STRING_COMPARETO.S	/^do_remainder2:$/;"	l
do_remainder2	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^do_remainder2:$/;"	l
do_remainder2	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^do_remainder2:$/;"	l
do_remainder2	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^do_remainder2:$/;"	l
do_remainder2	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^do_remainder2:$/;"	l
domFrontier	compiler/CompilerIR.h	/^    BitVector *domFrontier;             \/\/ Dominance frontier$/;"	m	struct:BasicBlock
domPostOrderTraversal	compiler/CompilerIR.h	/^    GrowableList domPostOrderTraversal;$/;"	m	struct:CompilationUnit
dominators	compiler/CompilerIR.h	/^    BitVector *dominators;$/;"	m	struct:BasicBlock
double_jlong	shadowlib/JniUtility.h	/^union double_jlong {$/;"	u
double_jlong	shadowlib/ReQueue.h	/^union double_jlong {$/;"	u
double_jlong	shadowlib/buffpack.h	/^union double_jlong {$/;"	u
dr0	compiler/codegen/arm/ArmLIR.h	/^    dr0 = fr0 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr1	compiler/codegen/arm/ArmLIR.h	/^    dr1 = fr2 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr10	compiler/codegen/arm/ArmLIR.h	/^    dr10 = fr20 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr11	compiler/codegen/arm/ArmLIR.h	/^    dr11 = fr22 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr12	compiler/codegen/arm/ArmLIR.h	/^    dr12 = fr24 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr13	compiler/codegen/arm/ArmLIR.h	/^    dr13 = fr26 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr14	compiler/codegen/arm/ArmLIR.h	/^    dr14 = fr28 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr15	compiler/codegen/arm/ArmLIR.h	/^    dr15 = fr30 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr2	compiler/codegen/arm/ArmLIR.h	/^    dr2 = fr4 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr3	compiler/codegen/arm/ArmLIR.h	/^    dr3 = fr6 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr4	compiler/codegen/arm/ArmLIR.h	/^    dr4 = fr8 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr5	compiler/codegen/arm/ArmLIR.h	/^    dr5 = fr10 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr6	compiler/codegen/arm/ArmLIR.h	/^    dr6 = fr12 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr7	compiler/codegen/arm/ArmLIR.h	/^    dr7 = fr14 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr8	compiler/codegen/arm/ArmLIR.h	/^    dr8 = fr16 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dr9	compiler/codegen/arm/ArmLIR.h	/^    dr9 = fr18 + FP_DOUBLE,$/;"	e	enum:NativeRegisterPool
dummyForAlignment	compiler/CompilerIR.h	/^        u4 dummyForAlignment;$/;"	m	union:ChainCellCounts::__anon42
dump	IndirectRefTable.cpp	/^void IndirectRefTable::dump(const char* descr) const$/;"	f	class:IndirectRefTable
dumpBasicBlocks	analysis/VfyBasicBlock.cpp	/^static void dumpBasicBlocks(const VerifierData* vdata)$/;"	f	file:
dumpCandidateMethods	Jni.cpp	/^static void dumpCandidateMethods(ClassObject* clazz, const char* methodName, const char* signature) {$/;"	f	file:
dumpClass	oo/Class.cpp	/^static int dumpClass(void* vclazz, void* varg)$/;"	f	file:
dumpClassPath	oo/Class.cpp	/^static void dumpClassPath(const ClassPathEntry* cpe)$/;"	f	file:
dumpEvent	jdwp/JdwpEvent.cpp	/^static void dumpEvent(const JdwpEvent* pEvent)$/;"	f	file:
dumpForeach	test/TestHash.cpp	/^static void dumpForeach(HashTable* pTab)$/;"	f	file:
dumpFrames	interp/Stack.cpp	/^static void dumpFrames(const DebugOutputTarget* target, void* framePtr,$/;"	f	file:
dumpIterator	test/TestHash.cpp	/^static void dumpIterator(HashTable* pTab)$/;"	f	file:
dumpLiveState	analysis/Liveness.cpp	/^static void dumpLiveState(const VerifierData* vdata, u4 curIdx,$/;"	f	file:
dumpMarkedMethods	Profile.cpp	/^static int dumpMarkedMethods(void* vclazz, void* vfp)$/;"	f	file:
dumpMethodList	Profile.cpp	/^static void dumpMethodList(FILE* fp)$/;"	f	file:
dumpMethodStats	compiler/Utility.cpp	/^static int dumpMethodStats(void *compilerMethodStats, void *totalMethodStats)$/;"	f	file:
dumpMethods	Jni.cpp	/^static void dumpMethods(Method* methods, size_t methodCount, const char* name) {$/;"	f	file:
dumpNativeThread	Thread.cpp	/^static void dumpNativeThread(const DebugOutputTarget* target, pid_t tid) {$/;"	f	file:
dumpReferences	alloc/CardTable.cpp	/^static void dumpReferences(const Object *obj)$/;"	f	file:
dumpReferences	alloc/Verify.cpp	/^static void dumpReferences(const Object *obj)$/;"	f	file:
dumpReferencesCallback	alloc/CardTable.cpp	/^static void dumpReferencesCallback(Object *obj, void *arg)$/;"	f	file:
dumpReferencesCallback	alloc/Verify.cpp	/^static void dumpReferencesCallback(Object *obj, void *arg)$/;"	f	file:
dumpReferencesRootVisitor	alloc/CardTable.cpp	/^static void dumpReferencesRootVisitor(void *ptr, u4 threadId,$/;"	f	file:
dumpReferencesRootVisitor	alloc/Verify.cpp	/^static void dumpReferencesRootVisitor(void *ptr, u4 threadId,$/;"	f	file:
dumpReferencesVisitor	alloc/CardTable.cpp	/^static void dumpReferencesVisitor(void *pObj, void *arg)$/;"	f	file:
dumpReferencesVisitor	alloc/Verify.cpp	/^static void dumpReferencesVisitor(void *pObj, void *arg)$/;"	f	file:
dumpRegPool	compiler/codegen/RallocUtil.cpp	/^static void dumpRegPool(RegisterInfo *p, int numRegs)$/;"	f	file:
dumpRegTypes	analysis/CodeVerify.cpp	/^static void dumpRegTypes(const VerifierData* vdata,$/;"	f	file:
dumpRegisterMap	analysis/RegisterMap.cpp	/^static void dumpRegisterMap(const RegisterMap* pMap, int registersSize)$/;"	f	file:
dumpSchedStat	Thread.cpp	/^static void dumpSchedStat(const DebugOutputTarget* target, pid_t tid) {$/;"	f	file:
dumpStringTable	AllocTracker.cpp	/^static void dumpStringTable(PointerSet* strings)$/;"	f	file:
dumpThreadList	Profile.cpp	/^static void dumpThreadList(FILE* fp) {$/;"	f	file:
dumpTraceProfile	compiler/codegen/arm/Assemble.cpp	/^static int dumpTraceProfile(JitEntry *p, bool silent, bool reset,$/;"	f	file:
dumpWedgedThread	Thread.cpp	/^static void dumpWedgedThread(Thread* thread)$/;"	f	file:
dumpWhiteReferenceVisitor	alloc/CardTable.cpp	/^static void dumpWhiteReferenceVisitor(void *addr, void *arg)$/;"	f	file:
dvmAbort	Init.cpp	/^void dvmAbort()$/;"	f
dvmAbort	alloc/TEST/HeapBitmapTest/include/Dalvik.h	/^inline void dvmAbort(void) {$/;"	f
dvmAbstractMethodStub	native/InternalNative.cpp	/^void dvmAbstractMethodStub(const u4* args, JValue* pResult)$/;"	f
dvmAddBreakAddr	interp/Interp.cpp	/^void dvmAddBreakAddr(Method* method, unsigned int instrOffset)$/;"	f
dvmAddClassToHash	oo/Class.cpp	/^bool dvmAddClassToHash(ClassObject* clazz)$/;"	f
dvmAddInitiatingLoader	oo/Class.cpp	/^void dvmAddInitiatingLoader(ClassObject* clazz, Object* loader)$/;"	f
dvmAddSingleStep	interp/Interp.cpp	/^bool dvmAddSingleStep(Thread* thread, int size, int depth)$/;"	f
dvmAddToReferenceTable	ReferenceTable.cpp	/^bool dvmAddToReferenceTable(ReferenceTable* pRef, Object* obj)$/;"	f
dvmAddToSuspendCounts	interp/Interp.cpp	/^void dvmAddToSuspendCounts(Thread* thread, int delta, int dbgDelta)$/;"	f
dvmAddTrackedAlloc	alloc/Alloc.cpp	/^void dvmAddTrackedAlloc(Object* obj, Thread* self)$/;"	f
dvmAddrFromCard	alloc/CardTable.cpp	/^void *dvmAddrFromCard(const u1 *cardAddr)$/;"	f
dvmAddressSetForLine	Debugger.cpp	/^const AddressSet *dvmAddressSetForLine(const Method* method, int line)$/;"	f
dvmAddressSetGet	Debugger.h	/^INLINE bool dvmAddressSetGet(const AddressSet *pSet, u4 toGet)$/;"	f
dvmAddressSetSet	Debugger.h	/^INLINE void dvmAddressSetSet(AddressSet *pSet, u4 toSet)$/;"	f
dvmAllocArrayByClass	oo/Array.cpp	/^ArrayObject* dvmAllocArrayByClass(ClassObject* arrayClass,$/;"	f
dvmAllocAtomicCache	AtomicCache.cpp	/^AtomicCache* dvmAllocAtomicCache(int numEntries)$/;"	f
dvmAllocBit	BitVector.cpp	/^int dvmAllocBit(BitVector* pBits)$/;"	f
dvmAllocBitVector	BitVector.cpp	/^BitVector* dvmAllocBitVector(unsigned int startBits, bool expandable)$/;"	f
dvmAllocMultiArray	oo/Array.cpp	/^ArrayObject* dvmAllocMultiArray(ClassObject* arrayClass, int curDim,$/;"	f
dvmAllocObject	alloc/Alloc.cpp	/^Object* dvmAllocObject(ClassObject* clazz, int flags)$/;"	f
dvmAllocPrimitiveArray	oo/Array.cpp	/^ArrayObject* dvmAllocPrimitiveArray(char type, size_t length, int allocFlags)$/;"	f
dvmAllocRegion	Misc.cpp	/^void *dvmAllocRegion(size_t byteCount, int prot, const char *name) {$/;"	f
dvmAllocTrackerShutdown	AllocTracker.cpp	/^void dvmAllocTrackerShutdown()$/;"	f
dvmAllocTrackerStartup	AllocTracker.cpp	/^bool dvmAllocTrackerStartup()$/;"	f
dvmArmSafePointCallback	interp/Interp.cpp	/^void dvmArmSafePointCallback(Thread* thread, SafePointCallback funct,$/;"	f
dvmArrayClassElementWidth	oo/Array.cpp	/^size_t dvmArrayClassElementWidth(const ClassObject* arrayClass)$/;"	f
dvmArrayObjectSize	oo/Array.cpp	/^size_t dvmArrayObjectSize(const ArrayObject *array)$/;"	f
dvmAsmAltInstructionEnd	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmAsmAltInstructionEnd:$/;"	l
dvmAsmAltInstructionEnd	mterp/out/InterpAsm-armv5te.S	/^dvmAsmAltInstructionEnd:$/;"	l
dvmAsmAltInstructionEnd	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmAsmAltInstructionEnd:$/;"	l
dvmAsmAltInstructionEnd	mterp/out/InterpAsm-armv7-a.S	/^dvmAsmAltInstructionEnd:$/;"	l
dvmAsmAltInstructionEndCode	mterp/out/InterpAsm-x86.S	/^dvmAsmAltInstructionEndCode:$/;"	l
dvmAsmAltInstructionStart	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmAsmAltInstructionStart = .L_ALT_OP_NOP$/;"	d
dvmAsmAltInstructionStart	mterp/out/InterpAsm-armv5te.S	/^dvmAsmAltInstructionStart = .L_ALT_OP_NOP$/;"	d
dvmAsmAltInstructionStart	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmAsmAltInstructionStart = .L_ALT_OP_NOP$/;"	d
dvmAsmAltInstructionStart	mterp/out/InterpAsm-armv7-a.S	/^dvmAsmAltInstructionStart = .L_ALT_OP_NOP$/;"	d
dvmAsmAltInstructionStart	mterp/out/InterpAsm-x86.S	/^dvmAsmAltInstructionStart:$/;"	l
dvmAsmAltInstructionStartCode	mterp/out/InterpAsm-x86.S	/^dvmAsmAltInstructionStartCode = .L_ALT_OP_NOP$/;"	d
dvmAsmInstructionEnd	mterp/out/InterpAsm-allstubs.S	/^dvmAsmInstructionEnd:$/;"	l
dvmAsmInstructionEnd	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmAsmInstructionEnd:$/;"	l
dvmAsmInstructionEnd	mterp/out/InterpAsm-armv5te.S	/^dvmAsmInstructionEnd:$/;"	l
dvmAsmInstructionEnd	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmAsmInstructionEnd:$/;"	l
dvmAsmInstructionEnd	mterp/out/InterpAsm-armv7-a.S	/^dvmAsmInstructionEnd:$/;"	l
dvmAsmInstructionEnd	mterp/out/InterpAsm-x86-atom.S	/^dvmAsmInstructionEnd:$/;"	l
dvmAsmInstructionEndCode	mterp/out/InterpAsm-x86.S	/^dvmAsmInstructionEndCode:$/;"	l
dvmAsmInstructionJmpTable	mterp/out/InterpAsm-x86-atom.S	/^dvmAsmInstructionJmpTable = .LdvmAsmInstructionJmpTable$/;"	d
dvmAsmInstructionJmpTable	mterp/x86-atom/entry.S	/^dvmAsmInstructionJmpTable = .LdvmAsmInstructionJmpTable$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-allstubs.S	/^dvmAsmInstructionStart = .L_OP_NOP$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmAsmInstructionStart = .L_OP_NOP$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-armv5te.S	/^dvmAsmInstructionStart = .L_OP_NOP$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmAsmInstructionStart = .L_OP_NOP$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-armv7-a.S	/^dvmAsmInstructionStart = .L_OP_NOP$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-x86-atom.S	/^dvmAsmInstructionStart = .L_OP_NOP$/;"	d
dvmAsmInstructionStart	mterp/out/InterpAsm-x86.S	/^dvmAsmInstructionStart:$/;"	l
dvmAsmInstructionStartCode	mterp/out/InterpAsm-x86.S	/^dvmAsmInstructionStartCode = .L_OP_NOP$/;"	d
dvmAsmSisterEnd	mterp/out/InterpAsm-allstubs.S	/^dvmAsmSisterEnd:$/;"	l
dvmAsmSisterEnd	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmAsmSisterEnd:$/;"	l
dvmAsmSisterEnd	mterp/out/InterpAsm-armv5te.S	/^dvmAsmSisterEnd:$/;"	l
dvmAsmSisterEnd	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmAsmSisterEnd:$/;"	l
dvmAsmSisterEnd	mterp/out/InterpAsm-armv7-a.S	/^dvmAsmSisterEnd:$/;"	l
dvmAsmSisterEnd	mterp/out/InterpAsm-x86-atom.S	/^dvmAsmSisterEnd:$/;"	l
dvmAsmSisterStart	mterp/out/InterpAsm-allstubs.S	/^dvmAsmSisterStart:$/;"	l
dvmAsmSisterStart	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmAsmSisterStart:$/;"	l
dvmAsmSisterStart	mterp/out/InterpAsm-armv5te.S	/^dvmAsmSisterStart:$/;"	l
dvmAsmSisterStart	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmAsmSisterStart:$/;"	l
dvmAsmSisterStart	mterp/out/InterpAsm-armv7-a.S	/^dvmAsmSisterStart:$/;"	l
dvmAsmSisterStart	mterp/out/InterpAsm-x86-atom.S	/^dvmAsmSisterStart:$/;"	l
dvmAttachCurrentThread	Thread.cpp	/^bool dvmAttachCurrentThread(const JavaVMAttachArgs* pArgs, bool isDaemon)$/;"	f
dvmBitVectorIteratorInit	BitVector.cpp	/^void dvmBitVectorIteratorInit(BitVector* pBits, BitVectorIterator* iterator)$/;"	f
dvmBitVectorIteratorNext	BitVector.cpp	/^int dvmBitVectorIteratorNext(BitVectorIterator* iterator)$/;"	f
dvmBoxPrimitive	reflect/Reflect.cpp	/^DataObject* dvmBoxPrimitive(JValue value, ClassObject* returnType)$/;"	f
dvmBreakpointSetAdd	interp/Interp.cpp	/^static bool dvmBreakpointSetAdd(BreakpointSet* pSet, Method* method,$/;"	f	file:
dvmBreakpointSetAlloc	interp/Interp.cpp	/^static BreakpointSet* dvmBreakpointSetAlloc()$/;"	f	file:
dvmBreakpointSetCount	interp/Interp.cpp	/^static int dvmBreakpointSetCount(const BreakpointSet* pSet)$/;"	f	file:
dvmBreakpointSetFind	interp/Interp.cpp	/^static int dvmBreakpointSetFind(const BreakpointSet* pSet, const u2* addr)$/;"	f	file:
dvmBreakpointSetFlush	interp/Interp.cpp	/^static void dvmBreakpointSetFlush(BreakpointSet* pSet, ClassObject* clazz)$/;"	f	file:
dvmBreakpointSetFree	interp/Interp.cpp	/^static void dvmBreakpointSetFree(BreakpointSet* pSet)$/;"	f	file:
dvmBreakpointSetLock	interp/Interp.cpp	/^static void dvmBreakpointSetLock(BreakpointSet* pSet)$/;"	f	file:
dvmBreakpointSetOriginalOpcode	interp/Interp.cpp	/^static bool dvmBreakpointSetOriginalOpcode(const BreakpointSet* pSet,$/;"	f	file:
dvmBreakpointSetRemove	interp/Interp.cpp	/^static void dvmBreakpointSetRemove(BreakpointSet* pSet, Method* method,$/;"	f	file:
dvmBreakpointSetUnlock	interp/Interp.cpp	/^static void dvmBreakpointSetUnlock(BreakpointSet* pSet)$/;"	f	file:
dvmBreakpointShutdown	interp/Interp.cpp	/^void dvmBreakpointShutdown()$/;"	f
dvmBreakpointStartup	interp/Interp.cpp	/^bool dvmBreakpointStartup()$/;"	f
dvmBroadcastCond	Thread.h	/^INLINE void dvmBroadcastCond(pthread_cond_t* pCond)$/;"	f
dvmBumpNoChain	interp/Jit.cpp	/^void dvmBumpNoChain(int from)$/;"	f
dvmBumpNormal	interp/Jit.cpp	/^void dvmBumpNormal()$/;"	f
dvmBumpPunt	interp/Jit.cpp	/^void dvmBumpPunt(int from)$/;"	f
dvmCallJNIMethod	Jni.cpp	/^void dvmCallJNIMethod(const u4* args, JValue* pResult, const Method* method, Thread* self) {$/;"	f
dvmCallMethod	interp/Stack.cpp	/^void dvmCallMethod(Thread* self, const Method* method, Object* obj,$/;"	f
dvmCallMethodA	interp/Stack.cpp	/^void dvmCallMethodA(Thread* self, const Method* method, Object* obj,$/;"	f
dvmCallMethodV	interp/Stack.cpp	/^void dvmCallMethodV(Thread* self, const Method* method, Object* obj,$/;"	f
dvmCanPutArrayElement	oo/TypeCheck.cpp	/^bool dvmCanPutArrayElement(const ClassObject* objectClass,$/;"	f
dvmCardFromAddr	alloc/CardTable.cpp	/^u1 *dvmCardFromAddr(const void *addr)$/;"	f
dvmCardTableShutdown	alloc/CardTable.cpp	/^void dvmCardTableShutdown()$/;"	f
dvmCardTableStartup	alloc/CardTable.cpp	/^bool dvmCardTableStartup(size_t heapMaximumSize, size_t growthLimit)$/;"	f
dvmChangeStatus	Thread.cpp	/^ThreadStatus dvmChangeStatus(Thread* self, ThreadStatus newStatus)$/;"	f
dvmChangeThreadPriority	Thread.cpp	/^void dvmChangeThreadPriority(Thread* thread, int newPriority)$/;"	f
dvmCheckAsmConstants	mterp/Mterp.cpp	/^bool dvmCheckAsmConstants()$/;"	f
dvmCheckBefore	interp/Interp.cpp	/^void dvmCheckBefore(const u2 *pc, u4 *fp, Thread* self)$/;"	f
dvmCheckCallJNIMethod	CheckJni.cpp	/^void dvmCheckCallJNIMethod(const u4* args, JValue* pResult,$/;"	f
dvmCheckClassAccess	oo/AccessCheck.cpp	/^bool dvmCheckClassAccess(const ClassObject* accessFrom,$/;"	f
dvmCheckException	Exception.h	/^INLINE bool dvmCheckException(Thread* self) {$/;"	f
dvmCheckFieldAccess	oo/AccessCheck.cpp	/^bool dvmCheckFieldAccess(const ClassObject* accessFrom, const Field* field)$/;"	f
dvmCheckInterpStateConsistency	interp/Interp.cpp	/^void dvmCheckInterpStateConsistency()$/;"	f
dvmCheckJit	interp/Jit.cpp	/^void dvmCheckJit(const u2* pc, Thread* self)$/;"	f
dvmCheckMergeBitVectors	BitVector.cpp	/^bool dvmCheckMergeBitVectors(BitVector* dst, const BitVector* src)$/;"	f
dvmCheckMethodAccess	oo/AccessCheck.cpp	/^bool dvmCheckMethodAccess(const ClassObject* accessFrom, const Method* method)$/;"	f
dvmCheckOptHeaderAndDependencies	analysis/DexPrepare.cpp	/^bool dvmCheckOptHeaderAndDependencies(int fd, bool sourceAvail, u4 modWhen,$/;"	f
dvmCheckSelfVerification	interp/Jit.cpp	/^void dvmCheckSelfVerification(const u2* pc, Thread* self)$/;"	f
dvmCheckSuspendPending	Thread.cpp	/^bool dvmCheckSuspendPending(Thread* self)$/;"	f
dvmCheckSuspendQuick	Thread.h	/^INLINE bool dvmCheckSuspendQuick(Thread* self) {$/;"	f
dvmClassObjectSize	oo/Class.cpp	/^size_t dvmClassObjectSize(const ClassObject *clazz)$/;"	f
dvmClassPathContains	oo/Class.cpp	/^bool dvmClassPathContains(const ClassPathEntry* cpe, const char* path)$/;"	f
dvmClassShutdown	oo/Class.cpp	/^void dvmClassShutdown()$/;"	f
dvmClassStartup	oo/Class.cpp	/^bool dvmClassStartup()$/;"	f
dvmCleanupStackOverflow	interp/Stack.cpp	/^void dvmCleanupStackOverflow(Thread* self, const Object* exception)$/;"	f
dvmClearAllBits	BitVector.cpp	/^void dvmClearAllBits(BitVector* pBits)$/;"	f
dvmClearBit	BitVector.cpp	/^void dvmClearBit(BitVector* pBits, unsigned int num)$/;"	f
dvmClearBreakAddr	interp/Interp.cpp	/^void dvmClearBreakAddr(Method* method, unsigned int instrOffset)$/;"	f
dvmClearCardTable	alloc/CardTable.cpp	/^void dvmClearCardTable()$/;"	f
dvmClearException	Exception.h	/^INLINE void dvmClearException(Thread* self) {$/;"	f
dvmClearGrowthLimit	alloc/HeapSource.cpp	/^void dvmClearGrowthLimit()$/;"	f
dvmClearOptException	Exception.cpp	/^void dvmClearOptException(Thread* self)$/;"	f
dvmClearReferenceTable	ReferenceTable.cpp	/^void dvmClearReferenceTable(ReferenceTable* pRef)$/;"	f
dvmClearSingleStep	interp/Interp.cpp	/^void dvmClearSingleStep(Thread* thread)$/;"	f
dvmClearWhiteRefs	alloc/Copying.cpp	/^void dvmClearWhiteRefs(Object **list)$/;"	f
dvmCloneObject	alloc/Alloc.cpp	/^Object* dvmCloneObject(Object* obj, int flags)$/;"	f
dvmCollectGarbage	alloc/Alloc.cpp	/^void dvmCollectGarbage()$/;"	f
dvmCollectGarbageInternal	alloc/Heap.cpp	/^void dvmCollectGarbageInternal(const GcSpec* spec)$/;"	f
dvmCompareBitVectors	BitVector.cpp	/^bool dvmCompareBitVectors(const BitVector *src1, const BitVector *src2)$/;"	f
dvmCompareDescriptorAndMethodProto	oo/Class.h	/^INLINE int dvmCompareDescriptorAndMethodProto(const char* descriptor,$/;"	f
dvmCompareMethodNamesAndParameterProtos	oo/Class.cpp	/^int dvmCompareMethodNamesAndParameterProtos(const Method* method1,$/;"	f
dvmCompareMethodNamesAndProtos	oo/Class.cpp	/^int dvmCompareMethodNamesAndProtos(const Method* method1,$/;"	f
dvmCompareMethodParameterProtos	oo/Class.h	/^INLINE int dvmCompareMethodParameterProtos(const Method* method1,$/;"	f
dvmCompareMethodProtos	oo/Class.h	/^INLINE int dvmCompareMethodProtos(const Method* method1,$/;"	f
dvmCompareNameDescriptorAndMethod	oo/Class.cpp	/^int dvmCompareNameDescriptorAndMethod(const char* name,$/;"	f
dvmCompareNameProtoAndMethod	oo/Class.cpp	/^int dvmCompareNameProtoAndMethod(const char* name,$/;"	f
dvmCompileMethod	compiler/Frontend.cpp	/^bool dvmCompileMethod(const Method *method, JitTranslationInfo *info)$/;"	f
dvmCompileTrace	compiler/Frontend.cpp	/^bool dvmCompileTrace(JitTraceDescription *desc, int numMaxInsts,$/;"	f
dvmCompilerAbort	compiler/Utility.cpp	/^void dvmCompilerAbort(CompilationUnit *cUnit)$/;"	f
dvmCompilerAllocBitVector	compiler/Utility.cpp	/^BitVector* dvmCompilerAllocBitVector(unsigned int startBits, bool expandable)$/;"	f
dvmCompilerAllocFreeTemp	compiler/codegen/RallocUtil.cpp	/^extern int dvmCompilerAllocFreeTemp(CompilationUnit *cUnit)$/;"	f
dvmCompilerAllocTemp	compiler/codegen/RallocUtil.cpp	/^extern int dvmCompilerAllocTemp(CompilationUnit *cUnit)$/;"	f
dvmCompilerAllocTempDouble	compiler/codegen/RallocUtil.cpp	/^extern int dvmCompilerAllocTempDouble(CompilationUnit *cUnit)$/;"	f
dvmCompilerAllocTempFloat	compiler/codegen/RallocUtil.cpp	/^extern int dvmCompilerAllocTempFloat(CompilationUnit *cUnit)$/;"	f
dvmCompilerAllocTypedTemp	compiler/codegen/arm/Thumb/Ralloc.cpp	/^int dvmCompilerAllocTypedTemp(CompilationUnit *cUnit, bool fpHint, int regClass)$/;"	f
dvmCompilerAllocTypedTemp	compiler/codegen/arm/Thumb2/Ralloc.cpp	/^int dvmCompilerAllocTypedTemp(CompilationUnit *cUnit, bool fpHint,$/;"	f
dvmCompilerAllocTypedTempPair	compiler/codegen/arm/Thumb/Ralloc.cpp	/^int dvmCompilerAllocTypedTempPair(CompilationUnit *cUnit, bool fpHint,$/;"	f
dvmCompilerAllocTypedTempPair	compiler/codegen/arm/Thumb2/Ralloc.cpp	/^int dvmCompilerAllocTypedTempPair(CompilationUnit *cUnit,$/;"	f
dvmCompilerAnalyzeMethodBody	compiler/Frontend.cpp	/^CompilerMethodStats *dvmCompilerAnalyzeMethodBody(const Method *method,$/;"	f
dvmCompilerAppendLIR	compiler/IntermediateRep.cpp	/^void dvmCompilerAppendLIR(CompilationUnit *cUnit, LIR *lir)$/;"	f
dvmCompilerAppendMIR	compiler/IntermediateRep.cpp	/^void dvmCompilerAppendMIR(BasicBlock *bb, MIR *mir)$/;"	f
dvmCompilerApplyGlobalOptimizations	compiler/codegen/arm/GlobalOptimizations.cpp	/^void dvmCompilerApplyGlobalOptimizations(CompilationUnit *cUnit)$/;"	f
dvmCompilerApplyLocalOptimizations	compiler/codegen/arm/LocalOptimizations.cpp	/^void dvmCompilerApplyLocalOptimizations(CompilationUnit *cUnit, LIR *headLIR,$/;"	f
dvmCompilerArchDump	compiler/codegen/arm/CodegenDriver.cpp	/^void dvmCompilerArchDump(void)$/;"	f
dvmCompilerArchDump	compiler/codegen/x86/CodegenDriver.cpp	/^void dvmCompilerArchDump(void)$/;"	f
dvmCompilerArchInit	compiler/codegen/arm/CodegenDriver.cpp	/^bool dvmCompilerArchInit()$/;"	f
dvmCompilerArchInit	compiler/codegen/x86/CodegenDriver.cpp	/^bool dvmCompilerArchInit()$/;"	f
dvmCompilerArchVariantInit	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	/^bool dvmCompilerArchVariantInit(void)$/;"	f
dvmCompilerArchVariantInit	compiler/codegen/arm/armv5te/ArchVariant.cpp	/^bool dvmCompilerArchVariantInit(void)$/;"	f
dvmCompilerArchVariantInit	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	/^bool dvmCompilerArchVariantInit(void)$/;"	f
dvmCompilerArchVariantInit	compiler/codegen/arm/armv7-a/ArchVariant.cpp	/^bool dvmCompilerArchVariantInit(void)$/;"	f
dvmCompilerArchVariantInit	compiler/codegen/x86/ia32/ArchVariant.cpp	/^bool dvmCompilerArchVariantInit(void)$/;"	f
dvmCompilerArenaReset	compiler/Utility.cpp	/^void dvmCompilerArenaReset(void)$/;"	f
dvmCompilerAssembleLIR	compiler/codegen/arm/Assemble.cpp	/^void dvmCompilerAssembleLIR(CompilationUnit *cUnit, JitTranslationInfo *info)$/;"	f
dvmCompilerAssembleLIR	compiler/codegen/x86/Assemble.cpp	/^void dvmCompilerAssembleLIR(CompilationUnit *cUnit, JitTranslationInfo *info)$/;"	f
dvmCompilerBuildLoop	compiler/SSATransformation.cpp	/^bool dvmCompilerBuildLoop(CompilationUnit *cUnit)$/;"	f
dvmCompilerCacheFlush	compiler/codegen/arm/ArchUtility.cpp	/^int dvmCompilerCacheFlush(long start, long end, long flags)$/;"	f
dvmCompilerCacheFlush	compiler/codegen/x86/ArchUtility.cpp	/^int dvmCompilerCacheFlush(long start, long end, long flags)$/;"	f
dvmCompilerCanIncludeThisInstruction	compiler/Frontend.cpp	/^bool dvmCompilerCanIncludeThisInstruction(const Method *method,$/;"	f
dvmCompilerClearBit	compiler/Utility.cpp	/^bool dvmCompilerClearBit(BitVector *pBits, unsigned int num)$/;"	f
dvmCompilerClearVisitedFlag	compiler/Dataflow.cpp	/^bool dvmCompilerClearVisitedFlag(struct CompilationUnit *cUnit,$/;"	f
dvmCompilerClobber	compiler/codegen/RallocUtil.cpp	/^void dvmCompilerClobber(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerClobberAllRegs	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerClobberAllRegs(CompilationUnit *cUnit)$/;"	f
dvmCompilerClobberCallRegs	compiler/codegen/arm/ArmRallocUtil.cpp	/^extern void dvmCompilerClobberCallRegs(CompilationUnit *cUnit)$/;"	f
dvmCompilerClobberHandlerRegs	compiler/codegen/arm/ArmRallocUtil.cpp	/^extern void dvmCompilerClobberHandlerRegs(CompilationUnit *cUnit)$/;"	f
dvmCompilerClobberSReg	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerClobberSReg(CompilationUnit *cUnit, int sReg)$/;"	f
dvmCompilerCodegenDump	compiler/codegen/arm/ArchUtility.cpp	/^void dvmCompilerCodegenDump(CompilationUnit *cUnit)$/;"	f
dvmCompilerCodegenDump	compiler/codegen/x86/ArchUtility.cpp	/^void dvmCompilerCodegenDump(CompilationUnit *cUnit)$/;"	f
dvmCompilerDataFlowAnalysisDispatcher	compiler/Dataflow.cpp	/^void dvmCompilerDataFlowAnalysisDispatcher(CompilationUnit *cUnit,$/;"	f
dvmCompilerDataFlowAttributes	compiler/Dataflow.cpp	/^int dvmCompilerDataFlowAttributes[kMirOpLast] = {$/;"	v
dvmCompilerDoConstantPropagation	compiler/Dataflow.cpp	/^bool dvmCompilerDoConstantPropagation(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f
dvmCompilerDoSSAConversion	compiler/Dataflow.cpp	/^bool dvmCompilerDoSSAConversion(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f
dvmCompilerDoWork	compiler/codegen/arm/CodegenDriver.cpp	/^bool dvmCompilerDoWork(CompilerWorkOrder *work)$/;"	f
dvmCompilerDoWork	compiler/codegen/x86/CodegenDriver.cpp	/^bool dvmCompilerDoWork(CompilerWorkOrder *work)$/;"	f
dvmCompilerDrainQueue	compiler/Compiler.cpp	/^void dvmCompilerDrainQueue(void)$/;"	f
dvmCompilerDumpCompilationUnit	compiler/Utility.cpp	/^void dvmCompilerDumpCompilationUnit(CompilationUnit *cUnit)$/;"	f
dvmCompilerDumpStats	compiler/Utility.cpp	/^void dvmCompilerDumpStats(void)$/;"	f
dvmCompilerEvalLoc	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerEvalLoc(CompilationUnit *cUnit, RegLocation loc,$/;"	f
dvmCompilerFilterLoopBlocks	compiler/Loop.cpp	/^bool dvmCompilerFilterLoopBlocks(CompilationUnit *cUnit)$/;"	f
dvmCompilerFindInductionVariables	compiler/Dataflow.cpp	/^bool dvmCompilerFindInductionVariables(struct CompilationUnit *cUnit,$/;"	f
dvmCompilerFindLocalLiveIn	compiler/Dataflow.cpp	/^bool dvmCompilerFindLocalLiveIn(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f
dvmCompilerFlushAllRegs	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerFlushAllRegs(CompilationUnit *cUnit)$/;"	f
dvmCompilerFlushReg	compiler/codegen/RallocUtil.cpp	/^void dvmCompilerFlushReg(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerFlushRegImpl	compiler/codegen/arm/CodegenDriver.cpp	/^void dvmCompilerFlushRegImpl(CompilationUnit *cUnit, int rBase,$/;"	f
dvmCompilerFlushRegWide	compiler/codegen/RallocUtil.cpp	/^void dvmCompilerFlushRegWide(CompilationUnit *cUnit, int reg1, int reg2)$/;"	f
dvmCompilerFlushRegWideImpl	compiler/codegen/arm/CodegenDriver.cpp	/^void dvmCompilerFlushRegWideImpl(CompilationUnit *cUnit, int rBase,$/;"	f
dvmCompilerForceWorkEnqueue	compiler/Compiler.cpp	/^void dvmCompilerForceWorkEnqueue(const u2 *pc, WorkOrderKind kind, void* info)$/;"	f
dvmCompilerFreeTemp	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerFreeTemp(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerFullDisassembler	compiler/Dataflow.cpp	/^char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,$/;"	f
dvmCompilerGenMemBarrier	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	/^void dvmCompilerGenMemBarrier(CompilationUnit *cUnit, int barrierKind)$/;"	f
dvmCompilerGenMemBarrier	compiler/codegen/arm/armv5te/ArchVariant.cpp	/^void dvmCompilerGenMemBarrier(CompilationUnit *cUnit, int barrierKind)$/;"	f
dvmCompilerGenMemBarrier	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	/^void dvmCompilerGenMemBarrier(CompilationUnit *cUnit, int barrierKind)$/;"	f
dvmCompilerGenMemBarrier	compiler/codegen/arm/armv7-a/ArchVariant.cpp	/^void dvmCompilerGenMemBarrier(CompilationUnit *cUnit, int barrierKind)$/;"	f
dvmCompilerGenMemBarrier	compiler/codegen/x86/ia32/ArchVariant.cpp	/^void dvmCompilerGenMemBarrier(CompilationUnit *cUnit, int barrierKind)$/;"	f
dvmCompilerGetDalvikDisassembly	compiler/Dataflow.cpp	/^char *dvmCompilerGetDalvikDisassembly(const DecodedInstruction *insn,$/;"	f
dvmCompilerGetDest	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerGetDest(CompilationUnit *cUnit, MIR *mir,$/;"	f
dvmCompilerGetDestWide	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerGetDestWide(CompilationUnit *cUnit, MIR *mir,$/;"	f
dvmCompilerGetInterpretTemplate	compiler/codegen/arm/CodegenDriver.cpp	/^void *dvmCompilerGetInterpretTemplate()$/;"	f
dvmCompilerGetInterpretTemplate	compiler/codegen/x86/CodegenDriver.cpp	/^void *dvmCompilerGetInterpretTemplate()$/;"	f
dvmCompilerGetInterpretTemplateSet	compiler/codegen/arm/CodegenDriver.cpp	/^JitInstructionSetType dvmCompilerGetInterpretTemplateSet()$/;"	f
dvmCompilerGetInterpretTemplateSet	compiler/codegen/x86/CodegenDriver.cpp	/^JitInstructionSetType dvmCompilerGetInterpretTemplateSet()$/;"	f
dvmCompilerGetReturn	compiler/codegen/arm/ArmRallocUtil.cpp	/^extern RegLocation dvmCompilerGetReturn(CompilationUnit *cUnit)$/;"	f
dvmCompilerGetReturnAlt	compiler/codegen/arm/ArmRallocUtil.cpp	/^extern RegLocation dvmCompilerGetReturnAlt(CompilationUnit *cUnit)$/;"	f
dvmCompilerGetReturnWide	compiler/codegen/arm/ArmRallocUtil.cpp	/^extern RegLocation dvmCompilerGetReturnWide(CompilationUnit *cUnit)$/;"	f
dvmCompilerGetReturnWideAlt	compiler/codegen/arm/ArmRallocUtil.cpp	/^extern RegLocation dvmCompilerGetReturnWideAlt(CompilationUnit *cUnit)$/;"	f
dvmCompilerGetSSAString	compiler/Dataflow.cpp	/^char *dvmCompilerGetSSAString(CompilationUnit *cUnit, SSARepresentation *ssaRep)$/;"	f
dvmCompilerGetSrc	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerGetSrc(CompilationUnit *cUnit, MIR *mir, int num)$/;"	f
dvmCompilerGetSrcWide	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerGetSrcWide(CompilationUnit *cUnit, MIR *mir,$/;"	f
dvmCompilerHeapInit	compiler/Utility.cpp	/^bool dvmCompilerHeapInit(void)$/;"	f
dvmCompilerInitPool	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerInitPool(RegisterInfo *regs, int *regNums, int num)$/;"	f
dvmCompilerInitializeRegAlloc	compiler/codegen/arm/Thumb/Gen.cpp	/^void dvmCompilerInitializeRegAlloc(CompilationUnit *cUnit)$/;"	f
dvmCompilerInitializeRegAlloc	compiler/codegen/arm/Thumb2/Gen.cpp	/^void dvmCompilerInitializeRegAlloc(CompilationUnit *cUnit)$/;"	f
dvmCompilerInitializeRegAlloc	compiler/codegen/x86/CodegenDriver.cpp	/^void dvmCompilerInitializeRegAlloc(CompilationUnit *cUnit)$/;"	f
dvmCompilerInlineMIR	compiler/InlineTransformation.cpp	/^void dvmCompilerInlineMIR(CompilationUnit *cUnit, JitTranslationInfo *info)$/;"	f
dvmCompilerInsertBackwardChaining	compiler/Loop.cpp	/^void dvmCompilerInsertBackwardChaining(CompilationUnit *cUnit)$/;"	f
dvmCompilerInsertLIRAfter	compiler/IntermediateRep.cpp	/^void dvmCompilerInsertLIRAfter(LIR *currentLIR, LIR *newLIR)$/;"	f
dvmCompilerInsertLIRBefore	compiler/IntermediateRep.cpp	/^void dvmCompilerInsertLIRBefore(LIR *currentLIR, LIR *newLIR)$/;"	f
dvmCompilerInsertMIRAfter	compiler/IntermediateRep.cpp	/^void dvmCompilerInsertMIRAfter(BasicBlock *bb, MIR *currentMIR, MIR *newMIR)$/;"	f
dvmCompilerInstructionSet	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	/^JitInstructionSetType dvmCompilerInstructionSet(void)$/;"	f
dvmCompilerInstructionSet	compiler/codegen/arm/armv5te/ArchVariant.cpp	/^JitInstructionSetType dvmCompilerInstructionSet(void)$/;"	f
dvmCompilerInstructionSet	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	/^JitInstructionSetType dvmCompilerInstructionSet(void)$/;"	f
dvmCompilerInstructionSet	compiler/codegen/arm/armv7-a/ArchVariant.cpp	/^JitInstructionSetType dvmCompilerInstructionSet(void)$/;"	f
dvmCompilerInstructionSet	compiler/codegen/x86/ia32/ArchVariant.cpp	/^JitInstructionSetType dvmCompilerInstructionSet(void)$/;"	f
dvmCompilerIsLive	compiler/codegen/RallocUtil.cpp	/^extern RegisterInfo *dvmCompilerIsLive(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerIsTemp	compiler/codegen/RallocUtil.cpp	/^extern RegisterInfo *dvmCompilerIsTemp(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerKillNullCheckedLoc	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerKillNullCheckedLoc(CompilationUnit *cUnit,$/;"	f
dvmCompilerLiveOut	compiler/codegen/Ralloc.h	/^static inline bool dvmCompilerLiveOut(CompilationUnit *cUnit, int sReg)$/;"	f
dvmCompilerLocalRegAlloc	compiler/Ralloc.cpp	/^void dvmCompilerLocalRegAlloc(CompilationUnit *cUnit)$/;"	f
dvmCompilerLockAllTemps	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerLockAllTemps(CompilationUnit *cUnit)$/;"	f
dvmCompilerLockTemp	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerLockTemp(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerLoopOpt	compiler/Loop.cpp	/^bool dvmCompilerLoopOpt(CompilationUnit *cUnit)$/;"	f
dvmCompilerMIR2LIR	compiler/codegen/arm/CodegenDriver.cpp	/^void dvmCompilerMIR2LIR(CompilationUnit *cUnit)$/;"	f
dvmCompilerMIR2LIR	compiler/codegen/x86/CodegenDriver.cpp	/^void dvmCompilerMIR2LIR(CompilationUnit *cUnit)$/;"	f
dvmCompilerMarkAllBits	compiler/Utility.cpp	/^void dvmCompilerMarkAllBits(BitVector *pBits, bool set)$/;"	f
dvmCompilerMarkClean	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkClean(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerMarkDef	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkDef(CompilationUnit *cUnit, RegLocation rl,$/;"	f
dvmCompilerMarkDefWide	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkDefWide(CompilationUnit *cUnit, RegLocation rl,$/;"	f
dvmCompilerMarkDirty	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkDirty(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerMarkInUse	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkInUse(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerMarkLive	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkLive(CompilationUnit *cUnit, int reg, int sReg)$/;"	f
dvmCompilerMarkPair	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerMarkPair(CompilationUnit *cUnit, int lowReg, int highReg)$/;"	f
dvmCompilerMethodMIR2LIR	compiler/codegen/arm/armv5te/MethodCodegenDriver.cpp	/^void dvmCompilerMethodMIR2LIR(CompilationUnit *cUnit)$/;"	f
dvmCompilerMethodMIR2LIR	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^void dvmCompilerMethodMIR2LIR(CompilationUnit *cUnit)$/;"	f
dvmCompilerMethodSSATransformation	compiler/SSATransformation.cpp	/^void dvmCompilerMethodSSATransformation(CompilationUnit *cUnit)$/;"	f
dvmCompilerNew	compiler/Utility.cpp	/^void * dvmCompilerNew(size_t size, bool zero)$/;"	f
dvmCompilerNewBB	compiler/IntermediateRep.cpp	/^BasicBlock *dvmCompilerNewBB(BBType blockType, int blockId)$/;"	f
dvmCompilerNonLoopAnalysis	compiler/Dataflow.cpp	/^void dvmCompilerNonLoopAnalysis(CompilationUnit *cUnit)$/;"	f
dvmCompilerPatchInlineCache	compiler/codegen/arm/Assemble.cpp	/^void dvmCompilerPatchInlineCache(void)$/;"	f
dvmCompilerPatchInlineCache	compiler/codegen/x86/Assemble.cpp	/^void dvmCompilerPatchInlineCache(void)$/;"	f
dvmCompilerPerformSafePointChecks	compiler/Compiler.cpp	/^void dvmCompilerPerformSafePointChecks(void)$/;"	f
dvmCompilerPrependMIR	compiler/IntermediateRep.cpp	/^void dvmCompilerPrependMIR(BasicBlock *bb, MIR *mir)$/;"	f
dvmCompilerRegClassBySize	compiler/codegen/Ralloc.h	/^static inline RegisterClass dvmCompilerRegClassBySize(OpSize size)$/;"	f
dvmCompilerRegCopy	compiler/codegen/arm/CodegenDriver.cpp	/^ArmLIR* dvmCompilerRegCopy(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f
dvmCompilerRegCopyNoInsert	compiler/codegen/arm/CodegenDriver.cpp	/^ArmLIR* dvmCompilerRegCopyNoInsert(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f
dvmCompilerRegCopyWide	compiler/codegen/arm/CodegenDriver.cpp	/^void dvmCompilerRegCopyWide(CompilationUnit *cUnit, int destLo, int destHi,$/;"	f
dvmCompilerResetDef	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerResetDef(CompilationUnit *cUnit, int reg)$/;"	f
dvmCompilerResetDefLoc	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerResetDefLoc(CompilationUnit *cUnit, RegLocation rl)$/;"	f
dvmCompilerResetDefLocWide	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerResetDefLocWide(CompilationUnit *cUnit, RegLocation rl)$/;"	f
dvmCompilerResetDefTracking	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerResetDefTracking(CompilationUnit *cUnit)$/;"	f
dvmCompilerResetNullCheck	compiler/codegen/Ralloc.h	/^static inline void dvmCompilerResetNullCheck(CompilationUnit *cUnit)$/;"	f
dvmCompilerResetRegPool	compiler/codegen/RallocUtil.cpp	/^extern void dvmCompilerResetRegPool(CompilationUnit *cUnit)$/;"	f
dvmCompilerS2VReg	compiler/codegen/Ralloc.h	/^static inline int dvmCompilerS2VReg(CompilationUnit *cUnit, int sReg)$/;"	f
dvmCompilerSRegHi	compiler/codegen/Ralloc.h	/^static inline int dvmCompilerSRegHi(int lowSreg) {$/;"	f
dvmCompilerSSASrc	compiler/codegen/Ralloc.h	/^static inline int dvmCompilerSSASrc(MIR *mir, int num)$/;"	f
dvmCompilerSetBit	compiler/Utility.cpp	/^bool dvmCompilerSetBit(BitVector *pBits, unsigned int num)$/;"	f
dvmCompilerSetupCodeCache	compiler/Compiler.cpp	/^bool dvmCompilerSetupCodeCache(void)$/;"	f
dvmCompilerSetupResourceMasks	compiler/codegen/arm/CodegenDriver.cpp	/^void dvmCompilerSetupResourceMasks(ArmLIR *lir)$/;"	f
dvmCompilerShutdown	compiler/Compiler.cpp	/^void dvmCompilerShutdown(void)$/;"	f
dvmCompilerSortAndPrintTraceProfiles	compiler/codegen/arm/Assemble.cpp	/^void dvmCompilerSortAndPrintTraceProfiles()$/;"	f
dvmCompilerSortAndPrintTraceProfiles	compiler/codegen/x86/Assemble.cpp	/^void dvmCompilerSortAndPrintTraceProfiles()$/;"	f
dvmCompilerStartup	compiler/Compiler.cpp	/^bool dvmCompilerStartup(void)$/;"	f
dvmCompilerTargetOptHint	compiler/codegen/arm/armv5te-vfp/ArchVariant.cpp	/^int dvmCompilerTargetOptHint(int key)$/;"	f
dvmCompilerTargetOptHint	compiler/codegen/arm/armv5te/ArchVariant.cpp	/^int dvmCompilerTargetOptHint(int key)$/;"	f
dvmCompilerTargetOptHint	compiler/codegen/arm/armv7-a-neon/ArchVariant.cpp	/^int dvmCompilerTargetOptHint(int key)$/;"	f
dvmCompilerTargetOptHint	compiler/codegen/arm/armv7-a/ArchVariant.cpp	/^int dvmCompilerTargetOptHint(int key)$/;"	f
dvmCompilerTargetOptHint	compiler/codegen/x86/ia32/ArchVariant.cpp	/^int dvmCompilerTargetOptHint(int key)$/;"	f
dvmCompilerTemplateStart	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompilerTemplateStart:$/;"	l
dvmCompilerTemplateStart	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompilerTemplateStart:$/;"	l
dvmCompilerTemplateStart	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompilerTemplateStart:$/;"	l
dvmCompilerTemplateStart	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompilerTemplateStart:$/;"	l
dvmCompilerTemplateStart	compiler/template/out/CompilerTemplateAsm-ia32.S	/^dvmCompilerTemplateStart:$/;"	l
dvmCompilerUpdateGlobalState	compiler/Compiler.cpp	/^void dvmCompilerUpdateGlobalState()$/;"	f
dvmCompilerUpdateLoc	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerUpdateLoc(CompilationUnit *cUnit, RegLocation loc)$/;"	f
dvmCompilerUpdateLocWide	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerUpdateLocWide(CompilationUnit *cUnit,$/;"	f
dvmCompilerWideToNarrow	compiler/codegen/RallocUtil.cpp	/^extern RegLocation dvmCompilerWideToNarrow(CompilationUnit *cUnit,$/;"	f
dvmCompilerWorkEnqueue	compiler/Compiler.cpp	/^bool dvmCompilerWorkEnqueue(const u2 *pc, WorkOrderKind kind, void* info)$/;"	f
dvmCompiler_TEMPLATE_ADD_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_ADD_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_ADD_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_ADD_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_ADD_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_ADD_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_ADD_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_ADD_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_ADD_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_ADD_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_ADD_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_ADD_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPG_DOUBLE	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_CMPG_DOUBLE:$/;"	l
dvmCompiler_TEMPLATE_CMPG_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_CMPG_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPG_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_CMPG_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPG_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_CMPG_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPG_FLOAT	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_CMPG_FLOAT:$/;"	l
dvmCompiler_TEMPLATE_CMPG_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_CMPG_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPG_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_CMPG_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPG_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_CMPG_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPL_DOUBLE	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_CMPL_DOUBLE:$/;"	l
dvmCompiler_TEMPLATE_CMPL_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_CMPL_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPL_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_CMPL_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPL_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_CMPL_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPL_FLOAT	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_CMPL_FLOAT:$/;"	l
dvmCompiler_TEMPLATE_CMPL_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_CMPL_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPL_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_CMPL_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMPL_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_CMPL_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_CMP_LONG	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_CMP_LONG:$/;"	l
dvmCompiler_TEMPLATE_CMP_LONG	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_CMP_LONG:$/;"	l
dvmCompiler_TEMPLATE_CMP_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_CMP_LONG:$/;"	l
dvmCompiler_TEMPLATE_CMP_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_CMP_LONG:$/;"	l
dvmCompiler_TEMPLATE_DIV_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_DIV_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_DIV_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_DIV_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_DIV_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_DIV_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_DIV_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_DIV_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DIV_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_DIV_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DIV_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_DIV_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DOUBLE_TO_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_DOUBLE_TO_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DOUBLE_TO_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_DOUBLE_TO_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DOUBLE_TO_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_DOUBLE_TO_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DOUBLE_TO_INT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_DOUBLE_TO_INT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DOUBLE_TO_INT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_DOUBLE_TO_INT_VFP:$/;"	l
dvmCompiler_TEMPLATE_DOUBLE_TO_INT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_DOUBLE_TO_INT_VFP:$/;"	l
dvmCompiler_TEMPLATE_FLOAT_TO_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_FLOAT_TO_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_FLOAT_TO_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_FLOAT_TO_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_FLOAT_TO_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_FLOAT_TO_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_FLOAT_TO_INT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_FLOAT_TO_INT_VFP:$/;"	l
dvmCompiler_TEMPLATE_FLOAT_TO_INT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_FLOAT_TO_INT_VFP:$/;"	l
dvmCompiler_TEMPLATE_FLOAT_TO_INT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_FLOAT_TO_INT_VFP:$/;"	l
dvmCompiler_TEMPLATE_INTERPRET	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INTERPRET:$/;"	l
dvmCompiler_TEMPLATE_INTERPRET	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INTERPRET:$/;"	l
dvmCompiler_TEMPLATE_INTERPRET	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INTERPRET:$/;"	l
dvmCompiler_TEMPLATE_INTERPRET	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INTERPRET:$/;"	l
dvmCompiler_TEMPLATE_INTERPRET	compiler/template/out/CompilerTemplateAsm-ia32.S	/^dvmCompiler_TEMPLATE_INTERPRET:$/;"	l
dvmCompiler_TEMPLATE_INT_TO_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INT_TO_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_INT_TO_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INT_TO_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_INT_TO_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INT_TO_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_INT_TO_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INT_TO_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_INT_TO_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INT_TO_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_INT_TO_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INT_TO_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NATIVE_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_NO_OPT_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_INVOKE_METHOD_PREDICTED_CHAIN_PROF:$/;"	l
dvmCompiler_TEMPLATE_MEM_OP_DECODE	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_MEM_OP_DECODE:$/;"	l
dvmCompiler_TEMPLATE_MEM_OP_DECODE	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_MEM_OP_DECODE:$/;"	l
dvmCompiler_TEMPLATE_MEM_OP_DECODE	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_MEM_OP_DECODE:$/;"	l
dvmCompiler_TEMPLATE_MEM_OP_DECODE	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_MEM_OP_DECODE:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG:$/;"	l
dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_MONITOR_ENTER_DEBUG:$/;"	l
dvmCompiler_TEMPLATE_MUL_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_MUL_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_MUL_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_MUL_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_MUL_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_MUL_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_MUL_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_MUL_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_MUL_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_MUL_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_MUL_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_MUL_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_MUL_LONG	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_MUL_LONG:$/;"	l
dvmCompiler_TEMPLATE_MUL_LONG	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_MUL_LONG:$/;"	l
dvmCompiler_TEMPLATE_MUL_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_MUL_LONG:$/;"	l
dvmCompiler_TEMPLATE_MUL_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_MUL_LONG:$/;"	l
dvmCompiler_TEMPLATE_PERIODIC_PROFILING	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_PERIODIC_PROFILING:$/;"	l
dvmCompiler_TEMPLATE_PERIODIC_PROFILING	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_PERIODIC_PROFILING:$/;"	l
dvmCompiler_TEMPLATE_PERIODIC_PROFILING	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_PERIODIC_PROFILING:$/;"	l
dvmCompiler_TEMPLATE_PERIODIC_PROFILING	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_PERIODIC_PROFILING:$/;"	l
dvmCompiler_TEMPLATE_RETURN	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_RETURN:$/;"	l
dvmCompiler_TEMPLATE_RETURN	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_RETURN:$/;"	l
dvmCompiler_TEMPLATE_RETURN	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_RETURN:$/;"	l
dvmCompiler_TEMPLATE_RETURN	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_RETURN:$/;"	l
dvmCompiler_TEMPLATE_RETURN_PROF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_RETURN_PROF:$/;"	l
dvmCompiler_TEMPLATE_RETURN_PROF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_RETURN_PROF:$/;"	l
dvmCompiler_TEMPLATE_RETURN_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_RETURN_PROF:$/;"	l
dvmCompiler_TEMPLATE_RETURN_PROF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_RETURN_PROF:$/;"	l
dvmCompiler_TEMPLATE_SHL_LONG	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_SHL_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHL_LONG	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_SHL_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHL_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_SHL_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHL_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_SHL_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHR_LONG	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_SHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHR_LONG	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_SHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHR_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_SHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_SHR_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_SHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_SQRT_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_SQRT_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_SQRT_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_SQRT_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_SQRT_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_SQRT_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_STRING_COMPARETO	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_STRING_COMPARETO:$/;"	l
dvmCompiler_TEMPLATE_STRING_COMPARETO	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_STRING_COMPARETO:$/;"	l
dvmCompiler_TEMPLATE_STRING_COMPARETO	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_STRING_COMPARETO:$/;"	l
dvmCompiler_TEMPLATE_STRING_COMPARETO	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_STRING_COMPARETO:$/;"	l
dvmCompiler_TEMPLATE_STRING_INDEXOF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_STRING_INDEXOF:$/;"	l
dvmCompiler_TEMPLATE_STRING_INDEXOF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_STRING_INDEXOF:$/;"	l
dvmCompiler_TEMPLATE_STRING_INDEXOF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_STRING_INDEXOF:$/;"	l
dvmCompiler_TEMPLATE_STRING_INDEXOF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_STRING_INDEXOF:$/;"	l
dvmCompiler_TEMPLATE_SUB_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_SUB_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_SUB_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_SUB_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_SUB_DOUBLE_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_SUB_DOUBLE_VFP:$/;"	l
dvmCompiler_TEMPLATE_SUB_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_SUB_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_SUB_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_SUB_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_SUB_FLOAT_VFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_SUB_FLOAT_VFP:$/;"	l
dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON:$/;"	l
dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON:$/;"	l
dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON:$/;"	l
dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_THROW_EXCEPTION_COMMON:$/;"	l
dvmCompiler_TEMPLATE_USHR_LONG	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^dvmCompiler_TEMPLATE_USHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_USHR_LONG	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^dvmCompiler_TEMPLATE_USHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_USHR_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^dvmCompiler_TEMPLATE_USHR_LONG:$/;"	l
dvmCompiler_TEMPLATE_USHR_LONG	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^dvmCompiler_TEMPLATE_USHR_LONG:$/;"	l
dvmComputeExactFrameDepth	interp/Stack.cpp	/^int dvmComputeExactFrameDepth(const void* fp)$/;"	f
dvmComputeLiveness	analysis/Liveness.cpp	/^bool dvmComputeLiveness(VerifierData* vdata)$/;"	f
dvmComputeMethodArgsSize	oo/Class.h	/^INLINE int dvmComputeMethodArgsSize(const Method* method)$/;"	f
dvmComputeStringHash	UtfString.cpp	/^u4 dvmComputeStringHash(StringObject* strObj) {$/;"	f
dvmComputeUtf8Hash	UtfString.cpp	/^u4 dvmComputeUtf8Hash(const char* utf8Str)$/;"	f
dvmComputeVagueFrameDepth	interp/Stack.cpp	/^int dvmComputeVagueFrameDepth(Thread* thread, const void* fp)$/;"	f
dvmComputeVfyBasicBlocks	analysis/VfyBasicBlock.cpp	/^bool dvmComputeVfyBasicBlocks(VerifierData* vdata)$/;"	f
dvmConfigureFP	mterp/armv5te/footer.S	/^dvmConfigureFP:$/;"	l
dvmConfigureFP	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmConfigureFP:$/;"	l
dvmConfigureFP	mterp/out/InterpAsm-armv5te.S	/^dvmConfigureFP:$/;"	l
dvmConfigureFP	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmConfigureFP:$/;"	l
dvmConfigureFP	mterp/out/InterpAsm-armv7-a.S	/^dvmConfigureFP:$/;"	l
dvmContinueOptimization	analysis/DexPrepare.cpp	/^bool dvmContinueOptimization(int fd, off_t dexOffset, long dexLength,$/;"	f
dvmConvertArgument	reflect/Reflect.cpp	/^int dvmConvertArgument(DataObject* arg, ClassObject* type, s4* destPtr)$/;"	f
dvmConvertPrimitiveValue	reflect/Reflect.cpp	/^int dvmConvertPrimitiveValue(PrimitiveType srcType,$/;"	f
dvmConvertSSARegToDalvik	compiler/Dataflow.cpp	/^int dvmConvertSSARegToDalvik(const CompilationUnit *cUnit, int ssaReg)$/;"	f
dvmConvertUtf8ToUtf16	UtfString.cpp	/^void dvmConvertUtf8ToUtf16(u2* utf16Str, const char* utf8Str)$/;"	f
dvmCopyBitVector	BitVector.cpp	/^void dvmCopyBitVector(BitVector *dest, const BitVector *src)$/;"	f
dvmCopyDescriptorStringFromMethod	oo/Class.h	/^INLINE char* dvmCopyDescriptorStringFromMethod(const Method* method,$/;"	f
dvmCopyObjectArray	oo/Array.cpp	/^bool dvmCopyObjectArray(ArrayObject* dstArray, const ArrayObject* srcArray,$/;"	f
dvmCopyTraceDescriptor	compiler/codegen/arm/Assemble.cpp	/^JitTraceDescription *dvmCopyTraceDescriptor(const u2 *pc,$/;"	f
dvmCopyTraceDescriptor	compiler/codegen/x86/Assemble.cpp	/^JitTraceDescription *dvmCopyTraceDescriptor(const u2 *pc,$/;"	f
dvmCountAssignableInstancesOfClass	alloc/Alloc.cpp	/^size_t dvmCountAssignableInstancesOfClass(const ClassObject *clazz)$/;"	f
dvmCountInstancesOfClass	alloc/Alloc.cpp	/^size_t dvmCountInstancesOfClass(const ClassObject *clazz)$/;"	f
dvmCountSetBits	BitVector.cpp	/^int dvmCountSetBits(const BitVector* pBits)$/;"	f
dvmCreateCstrFromString	UtfString.cpp	/^char* dvmCreateCstrFromString(const StringObject* jstr)$/;"	f
dvmCreateFileOutputTarget	Misc.cpp	/^void dvmCreateFileOutputTarget(DebugOutputTarget* target, FILE* fp)$/;"	f
dvmCreateInlineSubsTable	analysis/Optimize.cpp	/^bool dvmCreateInlineSubsTable()$/;"	f
dvmCreateInternalThread	Thread.cpp	/^bool dvmCreateInternalThread(pthread_t* pHandle, const char* name,$/;"	f
dvmCreateInterpThread	Thread.cpp	/^bool dvmCreateInterpThread(Object* threadObj, int reqStackSize)$/;"	f
dvmCreateJNIEnv	Jni.cpp	/^JNIEnv* dvmCreateJNIEnv(Thread* self) {$/;"	f
dvmCreateLogOutputTarget	Misc.cpp	/^void dvmCreateLogOutputTarget(DebugOutputTarget* target, int priority,$/;"	f
dvmCreateMonitor	Sync.cpp	/^Monitor* dvmCreateMonitor(Object* obj)$/;"	f
dvmCreateReflectMethodObject	reflect/Reflect.cpp	/^Object* dvmCreateReflectMethodObject(const Method* meth)$/;"	f
dvmCreateReflectObjForField	reflect/Reflect.cpp	/^Object* dvmCreateReflectObjForField(const ClassObject* clazz, Field* field)$/;"	f
dvmCreateReflectObjForMethod	reflect/Reflect.cpp	/^Object* dvmCreateReflectObjForMethod(const ClassObject* clazz, Method* method)$/;"	f
dvmCreateStockExceptions	alloc/Alloc.cpp	/^bool dvmCreateStockExceptions()$/;"	f
dvmCreateStringArray	UtfString.cpp	/^ArrayObject* dvmCreateStringArray(const std::vector<std::string>& strings) {$/;"	f
dvmCreateStringFromCstr	UtfString.cpp	/^StringObject* dvmCreateStringFromCstr(const char* utf8Str) {$/;"	f
dvmCreateStringFromCstr	UtfString.cpp	/^StringObject* dvmCreateStringFromCstr(const std::string& utf8Str) {$/;"	f
dvmCreateStringFromCstrAndLength	UtfString.cpp	/^StringObject* dvmCreateStringFromCstrAndLength(const char* utf8Str,$/;"	f
dvmCreateStringFromUnicode	UtfString.cpp	/^StringObject* dvmCreateStringFromUnicode(const u2* unichars, int len)$/;"	f
dvmCreateSystemLibraryName	Native.cpp	/^char* dvmCreateSystemLibraryName(char* libName)$/;"	f
dvmCreateUninitInstanceMap	analysis/CodeVerify.cpp	/^UninitInstanceMap* dvmCreateUninitInstanceMap(const Method* meth,$/;"	f
dvmDbgActive	Debugger.cpp	/^void dvmDbgActive()$/;"	f
dvmDbgCondBroadcast	Debugger.cpp	/^void dvmDbgCondBroadcast(pthread_cond_t* pCond)$/;"	f
dvmDbgCondSignal	Debugger.cpp	/^void dvmDbgCondSignal(pthread_cond_t* pCond)$/;"	f
dvmDbgCondWait	Debugger.cpp	/^void dvmDbgCondWait(pthread_cond_t* pCond, pthread_mutex_t* pMutex)$/;"	f
dvmDbgConfigureStep	Debugger.cpp	/^bool dvmDbgConfigureStep(ObjectId threadId, JdwpStepSize size,$/;"	f
dvmDbgConnected	Debugger.cpp	/^void dvmDbgConnected()$/;"	f
dvmDbgCreateArrayObject	Debugger.cpp	/^ObjectId dvmDbgCreateArrayObject(RefTypeId arrayTypeId, u4 length)$/;"	f
dvmDbgCreateObject	Debugger.cpp	/^ObjectId dvmDbgCreateObject(RefTypeId classId)$/;"	f
dvmDbgCreateString	Debugger.cpp	/^ObjectId dvmDbgCreateString(const char* str)$/;"	f
dvmDbgDdmConnected	Debugger.cpp	/^void dvmDbgDdmConnected()$/;"	f
dvmDbgDdmDisconnected	Debugger.cpp	/^void dvmDbgDdmDisconnected()$/;"	f
dvmDbgDdmHandlePacket	Debugger.cpp	/^bool dvmDbgDdmHandlePacket(const u1* buf, int dataLen, u1** pReplyBuf,$/;"	f
dvmDbgDdmSendChunk	Debugger.cpp	/^void dvmDbgDdmSendChunk(int type, size_t len, const u1* buf)$/;"	f
dvmDbgDdmSendChunkV	Debugger.cpp	/^void dvmDbgDdmSendChunkV(int type, const struct iovec* iov, int iovcnt)$/;"	f
dvmDbgDisconnected	Debugger.cpp	/^void dvmDbgDisconnected()$/;"	f
dvmDbgExecuteMethod	Debugger.cpp	/^void dvmDbgExecuteMethod(DebugInvokeReq* pReq)$/;"	f
dvmDbgExit	Debugger.cpp	/^void dvmDbgExit(int status)$/;"	f
dvmDbgFindLoadedClassBySignature	Debugger.cpp	/^bool dvmDbgFindLoadedClassBySignature(const char* classDescriptor,$/;"	f
dvmDbgGetAccessFlags	Debugger.cpp	/^u4 dvmDbgGetAccessFlags(RefTypeId id)$/;"	f
dvmDbgGetAllThreads	Debugger.cpp	/^void dvmDbgGetAllThreads(ObjectId** ppThreadIds, u4* pThreadCount)$/;"	f
dvmDbgGetArrayElementTag	Debugger.cpp	/^u1 dvmDbgGetArrayElementTag(ObjectId arrayId)$/;"	f
dvmDbgGetArrayLength	Debugger.cpp	/^int dvmDbgGetArrayLength(ObjectId arrayId)$/;"	f
dvmDbgGetClassDescriptor	Debugger.cpp	/^const char* dvmDbgGetClassDescriptor(RefTypeId id)$/;"	f
dvmDbgGetClassInfo	Debugger.cpp	/^void dvmDbgGetClassInfo(RefTypeId classId, u1* pTypeTag, u4* pStatus,$/;"	f
dvmDbgGetClassList	Debugger.cpp	/^void dvmDbgGetClassList(u4* pNumClasses, RefTypeId** pClassRefBuf)$/;"	f
dvmDbgGetClassLoader	Debugger.cpp	/^RefTypeId dvmDbgGetClassLoader(RefTypeId id)$/;"	f
dvmDbgGetClassObject	Debugger.cpp	/^ObjectId dvmDbgGetClassObject(RefTypeId id)$/;"	f
dvmDbgGetClassObjectType	Debugger.cpp	/^u1 dvmDbgGetClassObjectType(RefTypeId refTypeId)$/;"	f
dvmDbgGetFieldBasicTag	Debugger.cpp	/^u1 dvmDbgGetFieldBasicTag(ObjectId objId, FieldId fieldId)$/;"	f
dvmDbgGetFieldValue	Debugger.cpp	/^void dvmDbgGetFieldValue(ObjectId objectId, FieldId fieldId, ExpandBuf* pReply)$/;"	f
dvmDbgGetInvokeReq	Debugger.cpp	/^DebugInvokeReq* dvmDbgGetInvokeReq()$/;"	f
dvmDbgGetLocalValue	Debugger.cpp	/^void dvmDbgGetLocalValue(ObjectId threadId, FrameId frameId, int slot,$/;"	f
dvmDbgGetMainThreadGroupId	Debugger.cpp	/^ObjectId dvmDbgGetMainThreadGroupId()$/;"	f
dvmDbgGetMethodName	Debugger.cpp	/^const char* dvmDbgGetMethodName(RefTypeId refTypeId, MethodId id)$/;"	f
dvmDbgGetObjectTag	Debugger.cpp	/^u1 dvmDbgGetObjectTag(ObjectId objectId)$/;"	f
dvmDbgGetObjectType	Debugger.cpp	/^void dvmDbgGetObjectType(ObjectId objectId, u1* pRefTypeTag,$/;"	f
dvmDbgGetObjectTypeName	Debugger.cpp	/^const char* dvmDbgGetObjectTypeName(ObjectId objectId)$/;"	f
dvmDbgGetSignature	Debugger.cpp	/^const char* dvmDbgGetSignature(RefTypeId refTypeId)$/;"	f
dvmDbgGetSourceFile	Debugger.cpp	/^const char* dvmDbgGetSourceFile(RefTypeId refTypeId)$/;"	f
dvmDbgGetStaticFieldBasicTag	Debugger.cpp	/^u1 dvmDbgGetStaticFieldBasicTag(RefTypeId refTypeId, FieldId fieldId)$/;"	f
dvmDbgGetStaticFieldValue	Debugger.cpp	/^void dvmDbgGetStaticFieldValue(RefTypeId refTypeId, FieldId fieldId,$/;"	f
dvmDbgGetSuperclass	Debugger.cpp	/^RefTypeId dvmDbgGetSuperclass(RefTypeId id)$/;"	f
dvmDbgGetSystemThreadGroupId	Debugger.cpp	/^ObjectId dvmDbgGetSystemThreadGroupId()$/;"	f
dvmDbgGetTagWidth	Debugger.cpp	/^int dvmDbgGetTagWidth(int tag)$/;"	f
dvmDbgGetThisObject	Debugger.cpp	/^bool dvmDbgGetThisObject(ObjectId threadId, FrameId frameId, ObjectId* pThisId)$/;"	f
dvmDbgGetThreadFrame	Debugger.cpp	/^bool dvmDbgGetThreadFrame(ObjectId threadId, int num, FrameId* pFrameId,$/;"	f
dvmDbgGetThreadFrameCount	Debugger.cpp	/^int dvmDbgGetThreadFrameCount(ObjectId threadId)$/;"	f
dvmDbgGetThreadGroup	Debugger.cpp	/^ObjectId dvmDbgGetThreadGroup(ObjectId threadId)$/;"	f
dvmDbgGetThreadGroupName	Debugger.cpp	/^char* dvmDbgGetThreadGroupName(ObjectId threadGroupId)$/;"	f
dvmDbgGetThreadGroupParent	Debugger.cpp	/^ObjectId dvmDbgGetThreadGroupParent(ObjectId threadGroupId)$/;"	f
dvmDbgGetThreadGroupThreads	Debugger.cpp	/^void dvmDbgGetThreadGroupThreads(ObjectId threadGroupId,$/;"	f
dvmDbgGetThreadName	Debugger.cpp	/^char* dvmDbgGetThreadName(ObjectId threadId)$/;"	f
dvmDbgGetThreadSelfId	Debugger.cpp	/^ObjectId dvmDbgGetThreadSelfId()$/;"	f
dvmDbgGetThreadStatus	Debugger.cpp	/^bool dvmDbgGetThreadStatus(ObjectId threadId, u4* pThreadStatus,$/;"	f
dvmDbgGetThreadSuspendCount	Debugger.cpp	/^u4 dvmDbgGetThreadSuspendCount(ObjectId threadId)$/;"	f
dvmDbgGetVisibleClassList	Debugger.cpp	/^void dvmDbgGetVisibleClassList(ObjectId classLoaderId, u4* pNumClasses,$/;"	f
dvmDbgInitCond	Debugger.cpp	/^void dvmDbgInitCond(pthread_cond_t* pCond)$/;"	f
dvmDbgInitMutex	Debugger.cpp	/^void dvmDbgInitMutex(pthread_mutex_t* pMutex)$/;"	f
dvmDbgInvokeMethod	Debugger.cpp	/^JdwpError dvmDbgInvokeMethod(ObjectId threadId, ObjectId objectId,$/;"	f
dvmDbgIsDebuggerConnected	Debugger.cpp	/^bool dvmDbgIsDebuggerConnected()$/;"	f
dvmDbgIsInterface	Debugger.cpp	/^bool dvmDbgIsInterface(RefTypeId id)$/;"	f
dvmDbgIsSuspended	Debugger.cpp	/^bool dvmDbgIsSuspended(ObjectId threadId)$/;"	f
dvmDbgLastDebuggerActivity	Debugger.cpp	/^s8 dvmDbgLastDebuggerActivity()$/;"	f
dvmDbgLockMutex	Debugger.cpp	/^void dvmDbgLockMutex(pthread_mutex_t* pMutex)$/;"	f
dvmDbgMatchType	Debugger.cpp	/^bool dvmDbgMatchType(RefTypeId instClassId, RefTypeId classId)$/;"	f
dvmDbgOutputAllFields	Debugger.cpp	/^void dvmDbgOutputAllFields(RefTypeId refTypeId, bool withGeneric,$/;"	f
dvmDbgOutputAllInterfaces	Debugger.cpp	/^void dvmDbgOutputAllInterfaces(RefTypeId refTypeId, ExpandBuf* pReply)$/;"	f
dvmDbgOutputAllMethods	Debugger.cpp	/^void dvmDbgOutputAllMethods(RefTypeId refTypeId, bool withGeneric,$/;"	f
dvmDbgOutputArray	Debugger.cpp	/^bool dvmDbgOutputArray(ObjectId arrayId, int firstIndex, int count,$/;"	f
dvmDbgOutputLineTable	Debugger.cpp	/^void dvmDbgOutputLineTable(RefTypeId refTypeId, MethodId methodId,$/;"	f
dvmDbgOutputVariableTable	Debugger.cpp	/^void dvmDbgOutputVariableTable(RefTypeId refTypeId, MethodId methodId,$/;"	f
dvmDbgPostClassPrepare	Debugger.cpp	/^void dvmDbgPostClassPrepare(ClassObject* clazz)$/;"	f
dvmDbgPostException	Debugger.cpp	/^void dvmDbgPostException(void* throwFp, int throwRelPc, void* catchFp,$/;"	f
dvmDbgPostLocationEvent	Debugger.cpp	/^void dvmDbgPostLocationEvent(const Method* method, int pcOffset,$/;"	f
dvmDbgPostThreadDeath	Debugger.cpp	/^void dvmDbgPostThreadDeath(Thread* thread)$/;"	f
dvmDbgPostThreadStart	Debugger.cpp	/^void dvmDbgPostThreadStart(Thread* thread)$/;"	f
dvmDbgRegisterObjectId	Debugger.cpp	/^void dvmDbgRegisterObjectId(ObjectId id)$/;"	f
dvmDbgResumeThread	Debugger.cpp	/^void dvmDbgResumeThread(ObjectId threadId)$/;"	f
dvmDbgResumeVM	Debugger.cpp	/^void dvmDbgResumeVM()$/;"	f
dvmDbgSetArrayElements	Debugger.cpp	/^bool dvmDbgSetArrayElements(ObjectId arrayId, int firstIndex, int count,$/;"	f
dvmDbgSetFieldValue	Debugger.cpp	/^void dvmDbgSetFieldValue(ObjectId objectId, FieldId fieldId, u8 value,$/;"	f
dvmDbgSetLocalValue	Debugger.cpp	/^void dvmDbgSetLocalValue(ObjectId threadId, FrameId frameId, int slot, u1 tag,$/;"	f
dvmDbgSetStaticFieldValue	Debugger.cpp	/^void dvmDbgSetStaticFieldValue(RefTypeId refTypeId, FieldId fieldId,$/;"	f
dvmDbgStringToUtf8	Debugger.cpp	/^char* dvmDbgStringToUtf8(ObjectId strId)$/;"	f
dvmDbgSuspendSelf	Debugger.cpp	/^void dvmDbgSuspendSelf()$/;"	f
dvmDbgSuspendThread	Debugger.cpp	/^void dvmDbgSuspendThread(ObjectId threadId)$/;"	f
dvmDbgSuspendVM	Debugger.cpp	/^void dvmDbgSuspendVM(bool isEvent)$/;"	f
dvmDbgThreadContinuing	Debugger.cpp	/^int dvmDbgThreadContinuing(int status)$/;"	f
dvmDbgThreadExists	Debugger.cpp	/^bool dvmDbgThreadExists(ObjectId threadId)$/;"	f
dvmDbgThreadRunning	Debugger.cpp	/^int dvmDbgThreadRunning()$/;"	f
dvmDbgThreadWaiting	Debugger.cpp	/^int dvmDbgThreadWaiting()$/;"	f
dvmDbgUnconfigureStep	Debugger.cpp	/^void dvmDbgUnconfigureStep(ObjectId threadId)$/;"	f
dvmDbgUnlockMutex	Debugger.cpp	/^void dvmDbgUnlockMutex(pthread_mutex_t* pMutex)$/;"	f
dvmDbgUnwatchLocation	Debugger.cpp	/^void dvmDbgUnwatchLocation(const JdwpLocation* pLoc)$/;"	f
dvmDbgWatchLocation	Debugger.cpp	/^bool dvmDbgWatchLocation(const JdwpLocation* pLoc)$/;"	f
dvmDdmConnected	Ddm.cpp	/^void dvmDdmConnected()$/;"	f
dvmDdmDisconnected	Ddm.cpp	/^void dvmDdmDisconnected()$/;"	f
dvmDdmGenerateThreadStats	Ddm.cpp	/^ArrayObject* dvmDdmGenerateThreadStats()$/;"	f
dvmDdmGetRecentAllocations	Ddm.cpp	/^ArrayObject* dvmDdmGetRecentAllocations()$/;"	f
dvmDdmGetStackTraceById	Ddm.cpp	/^ArrayObject* dvmDdmGetStackTraceById(u4 threadId)$/;"	f
dvmDdmHandleHpifChunk	alloc/DdmHeap.cpp	/^bool dvmDdmHandleHpifChunk(int when)$/;"	f
dvmDdmHandleHpsgNhsgChunk	alloc/DdmHeap.cpp	/^bool dvmDdmHandleHpsgNhsgChunk(int when, int what, bool native)$/;"	f
dvmDdmHandlePacket	Ddm.cpp	/^bool dvmDdmHandlePacket(const u1* buf, int dataLen, u1** pReplyBuf,$/;"	f
dvmDdmSendHeapInfo	alloc/DdmHeap.cpp	/^void dvmDdmSendHeapInfo(int reason, bool shouldLock)$/;"	f
dvmDdmSendHeapSegments	alloc/DdmHeap.cpp	/^void dvmDdmSendHeapSegments(bool shouldLock, bool native)$/;"	f
dvmDdmSendThreadNameChange	Ddm.cpp	/^void dvmDdmSendThreadNameChange(int threadId, StringObject* newName)$/;"	f
dvmDdmSendThreadNotification	Ddm.cpp	/^void dvmDdmSendThreadNotification(Thread* thread, bool started)$/;"	f
dvmDdmSetThreadNotification	Ddm.cpp	/^void dvmDdmSetThreadNotification(bool enable)$/;"	f
dvmDebugBitVector	compiler/Utility.cpp	/^void dvmDebugBitVector(char *msg, const BitVector *bv, int length)$/;"	f
dvmDebuggerOrProfilerActive	interp/InterpDefs.h	/^static inline bool dvmDebuggerOrProfilerActive()$/;"	f
dvmDebuggerShutdown	Debugger.cpp	/^void dvmDebuggerShutdown()$/;"	f
dvmDebuggerStartup	Debugger.cpp	/^bool dvmDebuggerStartup()$/;"	f
dvmDecodeIndirectRef	Jni.cpp	/^Object* dvmDecodeIndirectRef(Thread* self, jobject jobj) {$/;"	f
dvmDefineClass	oo/Class.cpp	/^ClassObject* dvmDefineClass(DvmDex* pDvmDex, const char* descriptor,$/;"	f
dvmDescriptorToDot	Misc.cpp	/^char* dvmDescriptorToDot(const char* str)$/;"	f
dvmDescriptorToName	Misc.cpp	/^char* dvmDescriptorToName(const char* str)$/;"	f
dvmDestroyJNIEnv	Jni.cpp	/^void dvmDestroyJNIEnv(JNIEnv* env) {$/;"	f
dvmDestroyMutex	Thread.h	/^INLINE void dvmDestroyMutex(pthread_mutex_t* pMutex)$/;"	f
dvmDetachCurrentThread	Thread.cpp	/^void dvmDetachCurrentThread()$/;"	f
dvmDexCacheStatus	JarFile.cpp	/^DexCacheStatus dvmDexCacheStatus(const char *fileName)$/;"	f
dvmDexChangeDex1	DvmDex.cpp	/^bool dvmDexChangeDex1(DvmDex* pDvmDex, u1* addr, u1 newVal)$/;"	f
dvmDexChangeDex2	DvmDex.cpp	/^bool dvmDexChangeDex2(DvmDex* pDvmDex, u2* addr, u2 newVal)$/;"	f
dvmDexFileFree	DvmDex.cpp	/^void dvmDexFileFree(DvmDex* pDvmDex)$/;"	f
dvmDexFileOpenFromFd	DvmDex.cpp	/^int dvmDexFileOpenFromFd(int fd, DvmDex** ppDvmDex)$/;"	f
dvmDexFileOpenPartial	DvmDex.cpp	/^int dvmDexFileOpenPartial(const void* addr, int len, DvmDex** ppDvmDex)$/;"	f
dvmDexGetResolvedClass	DvmDex.h	/^INLINE struct ClassObject* dvmDexGetResolvedClass(const DvmDex* pDvmDex,$/;"	f
dvmDexGetResolvedField	DvmDex.h	/^INLINE struct Field* dvmDexGetResolvedField(const DvmDex* pDvmDex,$/;"	f
dvmDexGetResolvedMethod	DvmDex.h	/^INLINE struct Method* dvmDexGetResolvedMethod(const DvmDex* pDvmDex,$/;"	f
dvmDexGetResolvedString	DvmDex.h	/^INLINE struct StringObject* dvmDexGetResolvedString(const DvmDex* pDvmDex,$/;"	f
dvmDexSetResolvedClass	DvmDex.h	/^INLINE void dvmDexSetResolvedClass(DvmDex* pDvmDex, u4 classIdx,$/;"	f
dvmDexSetResolvedField	DvmDex.h	/^INLINE void dvmDexSetResolvedField(DvmDex* pDvmDex, u4 fieldIdx,$/;"	f
dvmDexSetResolvedMethod	DvmDex.h	/^INLINE void dvmDexSetResolvedMethod(DvmDex* pDvmDex, u4 methodIdx,$/;"	f
dvmDexSetResolvedString	DvmDex.h	/^INLINE void dvmDexSetResolvedString(DvmDex* pDvmDex, u4 stringIdx,$/;"	f
dvmDisableAllSubMode	interp/Interp.cpp	/^void dvmDisableAllSubMode(ExecutionSubModes subMode)$/;"	f
dvmDisableAllocTracker	AllocTracker.cpp	/^void dvmDisableAllocTracker()$/;"	f
dvmDisableSubMode	interp/Interp.cpp	/^void dvmDisableSubMode(Thread* thread, ExecutionSubModes subMode)$/;"	f
dvmDoTrackAllocation	AllocTracker.cpp	/^void dvmDoTrackAllocation(ClassObject* clazz, size_t size)$/;"	f
dvmDotToDescriptor	Misc.cpp	/^char* dvmDotToDescriptor(const char* str)$/;"	f
dvmDotToSlash	Misc.cpp	/^char* dvmDotToSlash(const char* str)$/;"	f
dvmDumpAllClasses	oo/Class.cpp	/^void dvmDumpAllClasses(int flags)$/;"	f
dvmDumpAllThreads	Thread.cpp	/^void dvmDumpAllThreads(bool grabLock)$/;"	f
dvmDumpAllThreadsEx	Thread.cpp	/^void dvmDumpAllThreadsEx(const DebugOutputTarget* target, bool grabLock)$/;"	f
dvmDumpAtomicCacheStats	AtomicCache.cpp	/^void dvmDumpAtomicCacheStats(const AtomicCache* pCache)$/;"	f
dvmDumpBlockBitVector	compiler/Utility.cpp	/^void dvmDumpBlockBitVector(const GrowableList *blocks, char *msg,$/;"	f
dvmDumpBootClassPath	oo/Class.cpp	/^void dvmDumpBootClassPath()$/;"	f
dvmDumpCFG	compiler/Frontend.cpp	/^void dvmDumpCFG(CompilationUnit *cUnit, const char *dirPrefix)$/;"	f
dvmDumpClass	oo/Class.cpp	/^void dvmDumpClass(const ClassObject* clazz, int flags)$/;"	f
dvmDumpFp	mterp/armv5te/debug.cpp	/^void dvmDumpFp(void* fp, StackSaveArea* otherSaveArea)$/;"	f
dvmDumpFp	mterp/out/InterpC-armv5te-vfp.cpp	/^void dvmDumpFp(void* fp, StackSaveArea* otherSaveArea)$/;"	f
dvmDumpFp	mterp/out/InterpC-armv5te.cpp	/^void dvmDumpFp(void* fp, StackSaveArea* otherSaveArea)$/;"	f
dvmDumpFp	mterp/out/InterpC-armv7-a-neon.cpp	/^void dvmDumpFp(void* fp, StackSaveArea* otherSaveArea)$/;"	f
dvmDumpFp	mterp/out/InterpC-armv7-a.cpp	/^void dvmDumpFp(void* fp, StackSaveArea* otherSaveArea)$/;"	f
dvmDumpJniReferenceTables	Jni.cpp	/^void dvmDumpJniReferenceTables() {$/;"	f
dvmDumpLIRInsn	compiler/codegen/arm/ArchUtility.cpp	/^void dvmDumpLIRInsn(LIR *arg, unsigned char *baseAddr)$/;"	f
dvmDumpLoaderStats	oo/Class.cpp	/^void dvmDumpLoaderStats(const char* msg)$/;"	f
dvmDumpNativeStack	interp/Stack.cpp	/^void dvmDumpNativeStack(const DebugOutputTarget* target, pid_t tid)$/;"	f
dvmDumpObject	oo/Object.cpp	/^void dvmDumpObject(const Object* obj)$/;"	f
dvmDumpReferenceTable	ReferenceTable.cpp	/^void dvmDumpReferenceTable(const ReferenceTable* pRef, const char* descr)$/;"	f
dvmDumpReferenceTableContents	ReferenceTable.cpp	/^void dvmDumpReferenceTableContents(Object* const* refs, size_t count,$/;"	f
dvmDumpRegs	interp/Interp.cpp	/^void dvmDumpRegs(const Method* method, const u4* framePtr, bool inOnly)$/;"	f
dvmDumpResourceMask	compiler/codegen/arm/ArchUtility.cpp	/^void dvmDumpResourceMask(LIR *lir, u8 mask, const char *prefix)$/;"	f
dvmDumpRunningThreadStack	interp/Stack.cpp	/^void dvmDumpRunningThreadStack(const DebugOutputTarget* target, Thread* thread)$/;"	f
dvmDumpThread	Thread.cpp	/^void dvmDumpThread(Thread* thread, bool isRunning)$/;"	f
dvmDumpThreadEx	Thread.cpp	/^void dvmDumpThreadEx(const DebugOutputTarget* target, Thread* thread,$/;"	f
dvmDumpThreadStack	interp/Stack.cpp	/^void dvmDumpThreadStack(const DebugOutputTarget* target, Thread* thread)$/;"	f
dvmDumpTrackedAllocations	AllocTracker.cpp	/^void dvmDumpTrackedAllocations(bool enable)$/;"	f
dvmEmitEmulatorTrace	Profile.cpp	/^void dvmEmitEmulatorTrace(const Method* method, int action)$/;"	f
dvmEmulatorTraceStart	Profile.cpp	/^void dvmEmulatorTraceStart()$/;"	f
dvmEmulatorTraceStop	Profile.cpp	/^void dvmEmulatorTraceStop()$/;"	f
dvmEnableAllSubMode	interp/Interp.cpp	/^void dvmEnableAllSubMode(ExecutionSubModes subMode)$/;"	f
dvmEnableAllocTracker	AllocTracker.cpp	/^bool dvmEnableAllocTracker()$/;"	f
dvmEnableSubMode	interp/Interp.cpp	/^void dvmEnableSubMode(Thread* thread, ExecutionSubModes subMode)$/;"	f
dvmEncodedArrayIteratorGetNext	reflect/Annotation.cpp	/^bool dvmEncodedArrayIteratorGetNext(EncodedArrayIterator* iterator,$/;"	f
dvmEncodedArrayIteratorHasNext	reflect/Annotation.cpp	/^bool dvmEncodedArrayIteratorHasNext(const EncodedArrayIterator* iterator) {$/;"	f
dvmEncodedArrayIteratorInitialize	reflect/Annotation.cpp	/^void dvmEncodedArrayIteratorInitialize(EncodedArrayIterator* iterator,$/;"	f
dvmEnqueueClearedReferences	alloc/MarkSweep.cpp	/^void dvmEnqueueClearedReferences(Object **cleared)$/;"	f
dvmExportPC	interp/Interp.h	/^INLINE void dvmExportPC(const u2* pc, const u4* fp)$/;"	f
dvmFastMethodTraceEnter	Profile.cpp	/^void dvmFastMethodTraceEnter(const Method* method, Thread* self)$/;"	f
dvmFastMethodTraceExit	Profile.cpp	/^void dvmFastMethodTraceExit(Thread* self)$/;"	f
dvmFastNativeMethodTraceExit	Profile.cpp	/^void dvmFastNativeMethodTraceExit(const Method* method, Thread* self)$/;"	f
dvmFieldPtr	oo/ObjectInlines.h	/^INLINE JValue* dvmFieldPtr(const Object* obj, int offset) {$/;"	f
dvmFillInStackTrace	Exception.h	/^INLINE Object* dvmFillInStackTrace(Thread* thread) {$/;"	f
dvmFillInStackTraceInternal	Exception.cpp	/^void* dvmFillInStackTraceInternal(Thread* thread, bool wantObject, size_t* pCount)$/;"	f
dvmFillInStackTraceRaw	Exception.h	/^INLINE int* dvmFillInStackTraceRaw(Thread* thread, size_t* pCount) {$/;"	f
dvmFillStackTraceArray	interp/Stack.cpp	/^void dvmFillStackTraceArray(const void* fp, const Method** array, size_t length)$/;"	f
dvmFillStackTraceElements	Exception.cpp	/^void dvmFillStackTraceElements(const int* intVals, size_t stackDepth, ArrayObject* steArray)$/;"	f
dvmFindArrayClass	oo/Array.cpp	/^ClassObject* dvmFindArrayClass(const char* descriptor, Object* loader)$/;"	f
dvmFindArrayClassForElement	oo/Array.cpp	/^ClassObject* dvmFindArrayClassForElement(ClassObject* elemClassObj)$/;"	f
dvmFindCatchBlock	Exception.cpp	/^int dvmFindCatchBlock(Thread* self, int relPc, Object* exception,$/;"	f
dvmFindClass	oo/Class.cpp	/^ClassObject* dvmFindClass(const char* descriptor, Object* loader)$/;"	f
dvmFindClassByName	native/InternalNative.cpp	/^ClassObject* dvmFindClassByName(StringObject* nameObj, Object* loader,$/;"	f
dvmFindClassNoInit	oo/Class.cpp	/^ClassObject* dvmFindClassNoInit(const char* descriptor,$/;"	f
dvmFindDirectMethod	oo/Object.cpp	/^Method* dvmFindDirectMethod(const ClassObject* clazz, const char* methodName,$/;"	f
dvmFindDirectMethodByDescriptor	oo/Object.cpp	/^Method* dvmFindDirectMethodByDescriptor(const ClassObject* clazz,$/;"	f
dvmFindDirectMethodHier	oo/Object.cpp	/^Method* dvmFindDirectMethodHier(const ClassObject* clazz,$/;"	f
dvmFindDirectMethodHierByDescriptor	oo/Object.cpp	/^Method* dvmFindDirectMethodHierByDescriptor(const ClassObject* clazz,$/;"	f
dvmFindFieldHier	oo/Object.cpp	/^Field* dvmFindFieldHier(const ClassObject* clazz, const char* fieldName,$/;"	f
dvmFindFieldOffset	oo/Object.h	/^INLINE int dvmFindFieldOffset(const ClassObject* clazz,$/;"	f
dvmFindInReferenceTable	ReferenceTable.cpp	/^Object** dvmFindInReferenceTable(const ReferenceTable* pRef, Object** bottom,$/;"	f
dvmFindInlinableMethod	InlineNative.cpp	/^Method* dvmFindInlinableMethod(const char* classDescriptor,$/;"	f
dvmFindInstanceField	oo/Object.cpp	/^InstField* dvmFindInstanceField(const ClassObject* clazz,$/;"	f
dvmFindInstanceFieldHier	oo/Object.cpp	/^InstField* dvmFindInstanceFieldHier(const ClassObject* clazz,$/;"	f
dvmFindInterfaceMethodHier	oo/Object.cpp	/^Method* dvmFindInterfaceMethodHier(const ClassObject* iface,$/;"	f
dvmFindInterfaceMethodHierByDescriptor	oo/Object.cpp	/^Method* dvmFindInterfaceMethodHierByDescriptor(const ClassObject* iface,$/;"	f
dvmFindInterfaceMethodInCache	mterp/common/FindInterface.h	/^INLINE Method* dvmFindInterfaceMethodInCache(ClassObject* thisClass,$/;"	f
dvmFindLoadedClass	oo/Class.cpp	/^ClassObject* dvmFindLoadedClass(const char* descriptor)$/;"	f
dvmFindMethodHier	oo/Object.cpp	/^Method* dvmFindMethodHier(const ClassObject* clazz, const char* methodName,$/;"	f
dvmFindPrimitiveClass	oo/Class.cpp	/^ClassObject* dvmFindPrimitiveClass(char type)$/;"	f
dvmFindReferenceMembers	InitRefs.cpp	/^bool dvmFindReferenceMembers(ClassObject* classReference) {$/;"	f
dvmFindRequiredClassesAndMembers	InitRefs.cpp	/^bool dvmFindRequiredClassesAndMembers() {$/;"	f
dvmFindStaticField	oo/Object.cpp	/^StaticField* dvmFindStaticField(const ClassObject* clazz,$/;"	f
dvmFindStaticFieldHier	oo/Object.cpp	/^StaticField* dvmFindStaticFieldHier(const ClassObject* clazz,$/;"	f
dvmFindSystemClass	oo/Class.cpp	/^ClassObject* dvmFindSystemClass(const char* descriptor)$/;"	f
dvmFindSystemClassNoInit	oo/Class.cpp	/^ClassObject* dvmFindSystemClassNoInit(const char* descriptor)$/;"	f
dvmFindVirtualMethod	oo/Object.cpp	/^Method* dvmFindVirtualMethod(const ClassObject* clazz, const char* methodName,$/;"	f
dvmFindVirtualMethodByDescriptor	oo/Object.cpp	/^Method* dvmFindVirtualMethodByDescriptor(const ClassObject* clazz,$/;"	f
dvmFindVirtualMethodByName	oo/Object.cpp	/^Method* dvmFindVirtualMethodByName(const ClassObject* clazz,$/;"	f
dvmFindVirtualMethodHier	oo/Object.cpp	/^Method* dvmFindVirtualMethodHier(const ClassObject* clazz,$/;"	f
dvmFindVirtualMethodHierByDescriptor	oo/Object.cpp	/^Method* dvmFindVirtualMethodHierByDescriptor(const ClassObject* clazz,$/;"	f
dvmFixMethodFlags	native/InternalNative.cpp	/^u4 dvmFixMethodFlags(u4 flags)$/;"	f
dvmFloatToU4	Misc.h	/^INLINE u4 dvmFloatToU4(float val) {$/;"	f
dvmFlushBreakpoints	interp/Interp.cpp	/^void dvmFlushBreakpoints(ClassObject* clazz)$/;"	f
dvmFprintf	Init.cpp	/^int dvmFprintf(FILE* fp, const char* format, ...)$/;"	f
dvmFreeAtomicCache	AtomicCache.cpp	/^void dvmFreeAtomicCache(AtomicCache* cache)$/;"	f
dvmFreeBitVector	BitVector.cpp	/^void dvmFreeBitVector(BitVector* pBits)$/;"	f
dvmFreeClassInnards	oo/Class.cpp	/^void dvmFreeClassInnards(ClassObject* clazz)$/;"	f
dvmFreeDexOrJar	native/dalvik_system_DexFile.cpp	/^void dvmFreeDexOrJar(void* vptr)$/;"	f
dvmFreeInlineSubsTable	analysis/Optimize.cpp	/^void dvmFreeInlineSubsTable()$/;"	f
dvmFreeMonitorList	Sync.cpp	/^void dvmFreeMonitorList()$/;"	f
dvmFreeOutputTarget	Misc.cpp	/^void dvmFreeOutputTarget(DebugOutputTarget* target)$/;"	f
dvmFreeRegisterMap	analysis/RegisterMap.cpp	/^void dvmFreeRegisterMap(RegisterMap* pMap)$/;"	f
dvmFreeRegisterMapBuilder	analysis/RegisterMap.cpp	/^void dvmFreeRegisterMapBuilder(RegisterMapBuilder* pBuilder)$/;"	f
dvmFreeUninitInstanceMap	analysis/CodeVerify.cpp	/^void dvmFreeUninitInstanceMap(UninitInstanceMap* uninitMap)$/;"	f
dvmFreeVfyBasicBlocks	analysis/VfyBasicBlock.cpp	/^void dvmFreeVfyBasicBlocks(VerifierData* vdata)$/;"	f
dvmGcDetachDeadInternedStrings	Intern.cpp	/^void dvmGcDetachDeadInternedStrings(int (*isUnmarkedObject)(void *))$/;"	f
dvmGcPreZygoteFork	alloc/Alloc.cpp	/^bool dvmGcPreZygoteFork()$/;"	f
dvmGcShutdown	alloc/Alloc.cpp	/^void dvmGcShutdown()$/;"	f
dvmGcStartup	alloc/Alloc.cpp	/^bool dvmGcStartup()$/;"	f
dvmGcStartupAfterZygote	alloc/Alloc.cpp	/^bool dvmGcStartupAfterZygote()$/;"	f
dvmGcStartupClasses	alloc/Alloc.cpp	/^bool dvmGcStartupClasses()$/;"	f
dvmGcThreadShutdown	alloc/Alloc.cpp	/^void dvmGcThreadShutdown()$/;"	f
dvmGenerateProxyClass	reflect/Proxy.cpp	/^ClassObject* dvmGenerateProxyClass(StringObject* str, ArrayObject* interfaces,$/;"	f
dvmGenerateRegisterMapV	analysis/RegisterMap.cpp	/^RegisterMap* dvmGenerateRegisterMapV(VerifierData* vdata)$/;"	f
dvmGenerateRegisterMaps	analysis/RegisterMap.cpp	/^RegisterMapBuilder* dvmGenerateRegisterMaps(DvmDex* pDvmDex)$/;"	f
dvmGenerateTrackedAllocationReport	AllocTracker.cpp	/^bool dvmGenerateTrackedAllocationReport(u1** pData, size_t* pDataLen)$/;"	f
dvmGetAnnotationDefaultValue	reflect/Annotation.cpp	/^Object* dvmGetAnnotationDefaultValue(const Method* method)$/;"	f
dvmGetArgLong	Native.h	/^INLINE s8 dvmGetArgLong(const u4* args, int elem)$/;"	f
dvmGetBlockName	compiler/Utility.cpp	/^void dvmGetBlockName(BasicBlock *bb, char *name)$/;"	f
dvmGetBootPathResource	oo/Class.cpp	/^StringObject* dvmGetBootPathResource(const char* name, int idx)$/;"	f
dvmGetBootPathSize	oo/Class.cpp	/^int dvmGetBootPathSize()$/;"	f
dvmGetBoxedReturnType	reflect/Reflect.cpp	/^ClassObject* dvmGetBoxedReturnType(const Method* meth)$/;"	f
dvmGetBranchOffset	analysis/VerifySubs.cpp	/^bool dvmGetBranchOffset(const Method* meth, const InsnFlags* insnFlags,$/;"	f
dvmGetCaller2Class	interp/Stack.cpp	/^ClassObject* dvmGetCaller2Class(const void* curFrame)$/;"	f
dvmGetCaller3Class	interp/Stack.cpp	/^ClassObject* dvmGetCaller3Class(const void* curFrame)$/;"	f
dvmGetCallerClass	interp/Stack.cpp	/^ClassObject* dvmGetCallerClass(const void* curFrame)$/;"	f
dvmGetCallerFP	interp/Stack.cpp	/^void* dvmGetCallerFP(const void* curFrame)$/;"	f
dvmGetClassAnnotation	reflect/Annotation.cpp	/^Object* dvmGetClassAnnotation(const ClassObject* clazz,$/;"	f
dvmGetClassAnnotations	reflect/Annotation.cpp	/^ArrayObject* dvmGetClassAnnotations(const ClassObject* clazz)$/;"	f
dvmGetClassSignatureAnnotation	reflect/Annotation.cpp	/^ArrayObject* dvmGetClassSignatureAnnotation(const ClassObject* clazz)$/;"	f
dvmGetCurrentJNIMethod	Jni.cpp	/^const Method* dvmGetCurrentJNIMethod() {$/;"	f
dvmGetDeclaredClasses	reflect/Annotation.cpp	/^ArrayObject* dvmGetDeclaredClasses(const ClassObject* clazz)$/;"	f
dvmGetDeclaredConstructorOrMethod	reflect/Reflect.cpp	/^Object* dvmGetDeclaredConstructorOrMethod(ClassObject* clazz,$/;"	f
dvmGetDeclaredConstructors	reflect/Reflect.cpp	/^ArrayObject* dvmGetDeclaredConstructors(ClassObject* clazz, bool publicOnly)$/;"	f
dvmGetDeclaredField	reflect/Reflect.cpp	/^Object* dvmGetDeclaredField(ClassObject* clazz, StringObject* nameObj)$/;"	f
dvmGetDeclaredFields	reflect/Reflect.cpp	/^ArrayObject* dvmGetDeclaredFields(ClassObject* clazz, bool publicOnly)$/;"	f
dvmGetDeclaredMethods	reflect/Reflect.cpp	/^ArrayObject* dvmGetDeclaredMethods(ClassObject* clazz, bool publicOnly)$/;"	f
dvmGetDeclaringClass	reflect/Annotation.cpp	/^ClassObject* dvmGetDeclaringClass(const ClassObject* clazz)$/;"	f
dvmGetEnclosingClass	reflect/Annotation.cpp	/^ClassObject* dvmGetEnclosingClass(const ClassObject* clazz)$/;"	f
dvmGetEnclosingMethod	reflect/Annotation.cpp	/^Object* dvmGetEnclosingMethod(const ClassObject* clazz)$/;"	f
dvmGetException	Exception.h	/^INLINE Object* dvmGetException(Thread* self) {$/;"	f
dvmGetExceptionCause	Exception.cpp	/^Object* dvmGetExceptionCause(const Object* exception)$/;"	f
dvmGetExpandedRegisterMap	analysis/RegisterMap.h	/^INLINE const RegisterMap* dvmGetExpandedRegisterMap(Method* method)$/;"	f
dvmGetExpandedRegisterMap0	analysis/RegisterMap.cpp	/^const RegisterMap* dvmGetExpandedRegisterMap0(Method* method)$/;"	f
dvmGetExternalBytesAllocated	alloc/Copying.cpp	/^size_t dvmGetExternalBytesAllocated()$/;"	f
dvmGetFieldAnnotation	reflect/Annotation.cpp	/^Object* dvmGetFieldAnnotation(const ClassObject* clazz, const Field* field,$/;"	f
dvmGetFieldAnnotations	reflect/Annotation.cpp	/^ArrayObject* dvmGetFieldAnnotations(const Field* field)$/;"	f
dvmGetFieldBoolean	oo/ObjectInlines.h	/^INLINE bool dvmGetFieldBoolean(const Object* obj, int offset) {$/;"	f
dvmGetFieldBooleanVolatile	oo/ObjectInlines.h	/^INLINE bool dvmGetFieldBooleanVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldByte	oo/ObjectInlines.h	/^INLINE s1 dvmGetFieldByte(const Object* obj, int offset) {$/;"	f
dvmGetFieldByteVolatile	oo/ObjectInlines.h	/^INLINE s1 dvmGetFieldByteVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldChar	oo/ObjectInlines.h	/^INLINE u2 dvmGetFieldChar(const Object* obj, int offset) {$/;"	f
dvmGetFieldCharVolatile	oo/ObjectInlines.h	/^INLINE u2 dvmGetFieldCharVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldDouble	oo/ObjectInlines.h	/^INLINE double dvmGetFieldDouble(const Object* obj, int offset) {$/;"	f
dvmGetFieldDoubleVolatile	oo/ObjectInlines.h	/^INLINE double dvmGetFieldDoubleVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldFloat	oo/ObjectInlines.h	/^INLINE float dvmGetFieldFloat(const Object* obj, int offset) {$/;"	f
dvmGetFieldFloatVolatile	oo/ObjectInlines.h	/^INLINE float dvmGetFieldFloatVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldFromReflectObj	reflect/Reflect.cpp	/^Field* dvmGetFieldFromReflectObj(Object* obj)$/;"	f
dvmGetFieldInt	oo/ObjectInlines.h	/^INLINE s4 dvmGetFieldInt(const Object* obj, int offset) {$/;"	f
dvmGetFieldIntVolatile	oo/ObjectInlines.h	/^INLINE s4 dvmGetFieldIntVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldLong	oo/ObjectInlines.h	/^INLINE s8 dvmGetFieldLong(const Object* obj, int offset) {$/;"	f
dvmGetFieldLongVolatile	oo/ObjectInlines.h	/^INLINE s8 dvmGetFieldLongVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldObject	oo/ObjectInlines.h	/^INLINE Object* dvmGetFieldObject(const Object* obj, int offset) {$/;"	f
dvmGetFieldObjectVolatile	oo/ObjectInlines.h	/^INLINE Object* dvmGetFieldObjectVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldShort	oo/ObjectInlines.h	/^INLINE s2 dvmGetFieldShort(const Object* obj, int offset) {$/;"	f
dvmGetFieldShortVolatile	oo/ObjectInlines.h	/^INLINE s2 dvmGetFieldShortVolatile(const Object* obj, int offset) {$/;"	f
dvmGetFieldSignatureAnnotation	reflect/Annotation.cpp	/^ArrayObject* dvmGetFieldSignatureAnnotation(const Field* field)$/;"	f
dvmGetHeapDebugInfo	alloc/HeapDebug.cpp	/^int dvmGetHeapDebugInfo(HeapDebugInfoType info)$/;"	f
dvmGetInitiatingLoaderList	oo/Class.cpp	/^static InitiatingLoaderList *dvmGetInitiatingLoaderList(ClassObject* clazz)$/;"	f	file:
dvmGetInlineOpsTable	InlineNative.cpp	/^const InlineOperation* dvmGetInlineOpsTable()$/;"	f
dvmGetInlineOpsTableLength	InlineNative.cpp	/^int dvmGetInlineOpsTableLength()$/;"	f
dvmGetInnerClass	reflect/Annotation.cpp	/^bool dvmGetInnerClass(const ClassObject* clazz, StringObject** pName,$/;"	f
dvmGetInterfaces	reflect/Reflect.cpp	/^ArrayObject* dvmGetInterfaces(ClassObject* clazz)$/;"	f
dvmGetJNIEnvForThread	Jni.cpp	/^JNIEnvExt* dvmGetJNIEnvForThread() {$/;"	f
dvmGetJNIRefType	Jni.cpp	/^jobjectRefType dvmGetJNIRefType(Thread* self, jobject jobj) {$/;"	f
dvmGetJarFileCacheFileName	JarFile.h	/^INLINE const char* dvmGetJarFileCacheFileName(JarFile* pJarFile) {$/;"	f
dvmGetJarFileDex	JarFile.h	/^INLINE DvmDex* dvmGetJarFileDex(JarFile* pJarFile) {$/;"	f
dvmGetMainThreadGroup	Thread.cpp	/^Object* dvmGetMainThreadGroup()$/;"	f
dvmGetMethodAnnotation	reflect/Annotation.cpp	/^Object* dvmGetMethodAnnotation(const ClassObject* clazz, const Method* method,$/;"	f
dvmGetMethodAnnotations	reflect/Annotation.cpp	/^ArrayObject* dvmGetMethodAnnotations(const Method* method)$/;"	f
dvmGetMethodCode	oo/Object.h	/^INLINE const DexCode* dvmGetMethodCode(const Method* meth) {$/;"	f
dvmGetMethodFromReflectObj	reflect/Reflect.cpp	/^Method* dvmGetMethodFromReflectObj(Object* obj)$/;"	f
dvmGetMethodInsnsSize	oo/Object.h	/^INLINE u4 dvmGetMethodInsnsSize(const Method* meth) {$/;"	f
dvmGetMethodSignatureAnnotation	reflect/Annotation.cpp	/^ArrayObject* dvmGetMethodSignatureAnnotation(const Method* method)$/;"	f
dvmGetMethodSourceFile	oo/Object.cpp	/^const char* dvmGetMethodSourceFile(const Method* meth)$/;"	f
dvmGetMethodThrows	reflect/Annotation.cpp	/^ArrayObject* dvmGetMethodThrows(const Method* method)$/;"	f
dvmGetMonitorObject	Sync.cpp	/^Object* dvmGetMonitorObject(Monitor* mon)$/;"	f
dvmGetNumLoadedClasses	oo/Class.cpp	/^int dvmGetNumLoadedClasses()$/;"	f
dvmGetObjectLockHolder	Sync.cpp	/^Thread* dvmGetObjectLockHolder(Object* obj)$/;"	f
dvmGetOriginalOpcode	interp/Interp.cpp	/^u1 dvmGetOriginalOpcode(const u2* addr)$/;"	f
dvmGetOtherThreadCpuTimeNsec	Misc.cpp	/^u8 dvmGetOtherThreadCpuTimeNsec(pthread_t thread)$/;"	f
dvmGetOtherThreadCpuTimeUsec	Misc.h	/^INLINE u8 dvmGetOtherThreadCpuTimeUsec(pthread_t thread) {$/;"	f
dvmGetParameterAnnotations	reflect/Annotation.cpp	/^ArrayObject* dvmGetParameterAnnotations(const Method* method)$/;"	f
dvmGetRawDexFileCacheFileName	RawDexFile.h	/^INLINE const char* dvmGetRawDexFileCacheFileName(RawDexFile* pRawDexFile) {$/;"	f
dvmGetRawDexFileDex	RawDexFile.h	/^INLINE DvmDex* dvmGetRawDexFileDex(RawDexFile* pRawDexFile) {$/;"	f
dvmGetRegResourceMask	compiler/codegen/arm/CodegenCommon.cpp	/^u8 dvmGetRegResourceMask(int reg)$/;"	f
dvmGetRelativeTimeMsec	Misc.h	/^INLINE u4 dvmGetRelativeTimeMsec(void) {$/;"	f
dvmGetRelativeTimeNsec	Misc.cpp	/^u8 dvmGetRelativeTimeNsec()$/;"	f
dvmGetRelativeTimeUsec	Misc.h	/^INLINE u8 dvmGetRelativeTimeUsec(void) {$/;"	f
dvmGetStackTrace	Exception.cpp	/^ArrayObject* dvmGetStackTrace(const Object* ostackData)$/;"	f
dvmGetStackTraceRaw	Exception.cpp	/^ArrayObject* dvmGetStackTraceRaw(const int* intVals, size_t stackDepth)$/;"	f
dvmGetStaticFieldBoolean	oo/ObjectInlines.h	/^INLINE bool dvmGetStaticFieldBoolean(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldBooleanVolatile	oo/ObjectInlines.h	/^INLINE bool dvmGetStaticFieldBooleanVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldByte	oo/ObjectInlines.h	/^INLINE s1 dvmGetStaticFieldByte(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldByteVolatile	oo/ObjectInlines.h	/^INLINE s1 dvmGetStaticFieldByteVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldChar	oo/ObjectInlines.h	/^INLINE u2 dvmGetStaticFieldChar(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldCharVolatile	oo/ObjectInlines.h	/^INLINE u2 dvmGetStaticFieldCharVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldDouble	oo/ObjectInlines.h	/^INLINE double dvmGetStaticFieldDouble(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldDoubleVolatile	oo/ObjectInlines.h	/^INLINE double dvmGetStaticFieldDoubleVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldFloat	oo/ObjectInlines.h	/^INLINE float dvmGetStaticFieldFloat(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldFloatVolatile	oo/ObjectInlines.h	/^INLINE float dvmGetStaticFieldFloatVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldInt	oo/ObjectInlines.h	/^INLINE s4 dvmGetStaticFieldInt(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldIntVolatile	oo/ObjectInlines.h	/^INLINE s4 dvmGetStaticFieldIntVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldLong	oo/ObjectInlines.h	/^INLINE s8 dvmGetStaticFieldLong(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldLongVolatile	oo/ObjectInlines.h	/^INLINE s8 dvmGetStaticFieldLongVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldObject	oo/ObjectInlines.h	/^INLINE Object* dvmGetStaticFieldObject(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldObjectVolatile	oo/ObjectInlines.h	/^INLINE Object* dvmGetStaticFieldObjectVolatile(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldShort	oo/ObjectInlines.h	/^INLINE s2 dvmGetStaticFieldShort(const StaticField* sfield) {$/;"	f
dvmGetStaticFieldShortVolatile	oo/ObjectInlines.h	/^INLINE s2 dvmGetStaticFieldShortVolatile(const StaticField* sfield) {$/;"	f
dvmGetStringUtfRegion	UtfString.cpp	/^void dvmGetStringUtfRegion(const StringObject* jstr,$/;"	f
dvmGetSysThreadId	Thread.cpp	/^pid_t dvmGetSysThreadId()$/;"	f
dvmGetSystemClassLoader	oo/Class.cpp	/^Object* dvmGetSystemClassLoader()$/;"	f
dvmGetSystemThreadGroup	Thread.cpp	/^Object* dvmGetSystemThreadGroup()$/;"	f
dvmGetTargetHeapUtilization	alloc/Copying.cpp	/^float dvmGetTargetHeapUtilization()$/;"	f
dvmGetTargetHeapUtilization	alloc/HeapSource.cpp	/^float dvmGetTargetHeapUtilization()$/;"	f
dvmGetThisPtr	interp/Interp.cpp	/^Object* dvmGetThisPtr(const Method* method, const u4* fp)$/;"	f
dvmGetThreadByHandle	Thread.cpp	/^Thread* dvmGetThreadByHandle(pthread_t handle)$/;"	f
dvmGetThreadByThreadId	Thread.cpp	/^Thread* dvmGetThreadByThreadId(u4 threadId)$/;"	f
dvmGetThreadCpuTimeNsec	Misc.cpp	/^u8 dvmGetThreadCpuTimeNsec()$/;"	f
dvmGetThreadCpuTimeUsec	Misc.h	/^INLINE u8 dvmGetThreadCpuTimeUsec(void) {$/;"	f
dvmGetThreadFromThreadObject	Thread.cpp	/^Thread* dvmGetThreadFromThreadObject(Object* vmThreadObj)$/;"	f
dvmGetThreadJNIEnv	Thread.h	/^INLINE JNIEnv* dvmGetThreadJNIEnv(Thread* self) { return self->jniEnv; }$/;"	f
dvmGetThreadName	Thread.cpp	/^std::string dvmGetThreadName(Thread* thread) {$/;"	f
dvmGetThreadStats	Misc.cpp	/^bool dvmGetThreadStats(ProcStatData* pData, pid_t tid)$/;"	f
dvmGetThreadStatusStr	Thread.cpp	/^const char* dvmGetThreadStatusStr(ThreadStatus status)$/;"	f
dvmGetVirtualizedMethod	oo/Object.cpp	/^const Method* dvmGetVirtualizedMethod(const ClassObject* clazz,$/;"	f
dvmGrowableListGetElement	compiler/Utility.cpp	/^intptr_t dvmGrowableListGetElement(const GrowableList *gList, size_t idx)$/;"	f
dvmGrowableListIteratorInit	compiler/Utility.cpp	/^void dvmGrowableListIteratorInit(GrowableList *gList,$/;"	f
dvmGrowableListIteratorNext	compiler/Utility.cpp	/^intptr_t dvmGrowableListIteratorNext(GrowableListIterator *iterator)$/;"	f
dvmHandleSoftRefs	alloc/Copying.cpp	/^void dvmHandleSoftRefs(Object **list)$/;"	f
dvmHandleStackOverflow	interp/Stack.cpp	/^void dvmHandleStackOverflow(Thread* self, const Method* method)$/;"	f
dvmHashForeach	Hash.cpp	/^int dvmHashForeach(HashTable* pHashTable, HashForeachFunc func, void* arg)$/;"	f
dvmHashForeachRemove	Hash.cpp	/^int dvmHashForeachRemove(HashTable* pHashTable, HashForeachRemoveFunc func)$/;"	f
dvmHashIterBegin	Hash.h	/^INLINE void dvmHashIterBegin(HashTable* pHashTable, HashIter* pIter) {$/;"	f
dvmHashIterData	Hash.h	/^INLINE void* dvmHashIterData(HashIter* pIter) {$/;"	f
dvmHashIterDone	Hash.h	/^INLINE bool dvmHashIterDone(HashIter* pIter) {$/;"	f
dvmHashIterNext	Hash.h	/^INLINE void dvmHashIterNext(HashIter* pIter) {$/;"	f
dvmHashSize	Hash.cpp	/^size_t dvmHashSize(size_t size) {$/;"	f
dvmHashTableClear	Hash.cpp	/^void dvmHashTableClear(HashTable* pHashTable)$/;"	f
dvmHashTableCreate	Hash.cpp	/^HashTable* dvmHashTableCreate(size_t initialSize, HashFreeFunc freeFunc)$/;"	f
dvmHashTableFree	Hash.cpp	/^void dvmHashTableFree(HashTable* pHashTable)$/;"	f
dvmHashTableLock	Hash.h	/^INLINE void dvmHashTableLock(HashTable* pHashTable) {$/;"	f
dvmHashTableLookup	Hash.cpp	/^void* dvmHashTableLookup(HashTable* pHashTable, u4 itemHash, void* item,$/;"	f
dvmHashTableMemUsage	Hash.h	/^INLINE int dvmHashTableMemUsage(HashTable* pHashTable) {$/;"	f
dvmHashTableNumEntries	Hash.h	/^INLINE int dvmHashTableNumEntries(HashTable* pHashTable) {$/;"	f
dvmHashTableProbeCount	Hash.cpp	/^void dvmHashTableProbeCount(HashTable* pHashTable, HashCalcFunc calcFunc,$/;"	f
dvmHashTableRemove	Hash.cpp	/^bool dvmHashTableRemove(HashTable* pHashTable, u4 itemHash, void* item)$/;"	f
dvmHashTableUnlock	Hash.h	/^INLINE void dvmHashTableUnlock(HashTable* pHashTable) {$/;"	f
dvmHashcmpStrings	UtfString.cpp	/^int dvmHashcmpStrings(const void* vstrObj1, const void* vstrObj2)$/;"	f
dvmHeapBeginMarkStep	alloc/Copying.cpp	/^bool dvmHeapBeginMarkStep(GcMode mode)$/;"	f
dvmHeapBeginMarkStep	alloc/MarkSweep.cpp	/^bool dvmHeapBeginMarkStep(bool isPartial)$/;"	f
dvmHeapBitmapClearObjectBit	alloc/HeapBitmapInlines.h	/^static void dvmHeapBitmapClearObjectBit(HeapBitmap *hb, const void *obj)$/;"	f
dvmHeapBitmapCoversAddress	alloc/HeapBitmap.cpp	/^bool dvmHeapBitmapCoversAddress(const HeapBitmap *hb, const void *obj)$/;"	f
dvmHeapBitmapDelete	alloc/HeapBitmap.cpp	/^void dvmHeapBitmapDelete(HeapBitmap *hb)$/;"	f
dvmHeapBitmapInit	alloc/HeapBitmap.cpp	/^bool dvmHeapBitmapInit(HeapBitmap *hb, const void *base, size_t maxSize,$/;"	f
dvmHeapBitmapIsObjectBitSet	alloc/HeapBitmapInlines.h	/^static unsigned long dvmHeapBitmapIsObjectBitSet(const HeapBitmap *hb,$/;"	f
dvmHeapBitmapScanWalk	alloc/HeapBitmap.cpp	/^void dvmHeapBitmapScanWalk(HeapBitmap *bitmap,$/;"	f
dvmHeapBitmapSetAndReturnObjectBit	alloc/HeapBitmapInlines.h	/^static unsigned long dvmHeapBitmapSetAndReturnObjectBit(HeapBitmap *hb,$/;"	f
dvmHeapBitmapSetObjectBit	alloc/HeapBitmapInlines.h	/^static void dvmHeapBitmapSetObjectBit(HeapBitmap *hb, const void *obj)$/;"	f
dvmHeapBitmapSweepWalk	alloc/HeapBitmap.cpp	/^void dvmHeapBitmapSweepWalk(const HeapBitmap *liveHb, const HeapBitmap *markHb,$/;"	f
dvmHeapBitmapWalk	alloc/HeapBitmap.cpp	/^void dvmHeapBitmapWalk(const HeapBitmap *bitmap, BitmapCallback *callback,$/;"	f
dvmHeapBitmapZero	alloc/HeapBitmap.cpp	/^void dvmHeapBitmapZero(HeapBitmap *hb)$/;"	f
dvmHeapFinishMarkStep	alloc/Copying.cpp	/^void dvmHeapFinishMarkStep()$/;"	f
dvmHeapFinishMarkStep	alloc/MarkSweep.cpp	/^void dvmHeapFinishMarkStep()$/;"	f
dvmHeapMarkRootSet	alloc/Copying.cpp	/^void dvmHeapMarkRootSet()$/;"	f
dvmHeapMarkRootSet	alloc/MarkSweep.cpp	/^void dvmHeapMarkRootSet()$/;"	f
dvmHeapProcessReferences	alloc/MarkSweep.cpp	/^void dvmHeapProcessReferences(Object **softReferences, bool clearSoftRefs,$/;"	f
dvmHeapReMarkRootSet	alloc/MarkSweep.cpp	/^void dvmHeapReMarkRootSet()$/;"	f
dvmHeapReScanMarkedObjects	alloc/MarkSweep.cpp	/^void dvmHeapReScanMarkedObjects()$/;"	f
dvmHeapScanMarkedObjects	alloc/Copying.cpp	/^void dvmHeapScanMarkedObjects()$/;"	f
dvmHeapScanMarkedObjects	alloc/MarkSweep.cpp	/^void dvmHeapScanMarkedObjects(void)$/;"	f
dvmHeapScheduleFinalizations	alloc/Copying.cpp	/^void dvmHeapScheduleFinalizations()$/;"	f
dvmHeapShutdown	alloc/Heap.cpp	/^void dvmHeapShutdown()$/;"	f
dvmHeapSourceAlloc	alloc/Copying.cpp	/^void *dvmHeapSourceAlloc(size_t length)$/;"	f
dvmHeapSourceAlloc	alloc/HeapSource.cpp	/^void* dvmHeapSourceAlloc(size_t n)$/;"	f
dvmHeapSourceAllocAndGrow	alloc/Copying.cpp	/^void *dvmHeapSourceAllocAndGrow(size_t size)$/;"	f
dvmHeapSourceAllocAndGrow	alloc/HeapSource.cpp	/^void* dvmHeapSourceAllocAndGrow(size_t n)$/;"	f
dvmHeapSourceChunkSize	alloc/Copying.cpp	/^size_t dvmHeapSourceChunkSize(const void *ptr)$/;"	f
dvmHeapSourceChunkSize	alloc/HeapSource.cpp	/^size_t dvmHeapSourceChunkSize(const void *ptr)$/;"	f
dvmHeapSourceContains	alloc/Copying.cpp	/^bool dvmHeapSourceContains(const void *addr)$/;"	f
dvmHeapSourceContains	alloc/HeapSource.cpp	/^bool dvmHeapSourceContains(const void *ptr)$/;"	f
dvmHeapSourceContainsAddress	alloc/Copying.cpp	/^bool dvmHeapSourceContainsAddress(const void *ptr)$/;"	f
dvmHeapSourceContainsAddress	alloc/HeapSource.cpp	/^bool dvmHeapSourceContainsAddress(const void *ptr)$/;"	f
dvmHeapSourceFlip	alloc/Copying.cpp	/^void dvmHeapSourceFlip()$/;"	f
dvmHeapSourceFootprint	alloc/Copying.cpp	/^size_t dvmHeapSourceFootprint()$/;"	f
dvmHeapSourceFootprint	alloc/HeapSource.cpp	/^size_t dvmHeapSourceFootprint()$/;"	f
dvmHeapSourceFreeList	alloc/HeapSource.cpp	/^size_t dvmHeapSourceFreeList(size_t numPtrs, void **ptrs)$/;"	f
dvmHeapSourceGetBase	alloc/HeapSource.cpp	/^void *dvmHeapSourceGetBase()$/;"	f
dvmHeapSourceGetIdealFootprint	alloc/Copying.cpp	/^size_t dvmHeapSourceGetIdealFootprint()$/;"	f
dvmHeapSourceGetIdealFootprint	alloc/HeapSource.cpp	/^size_t dvmHeapSourceGetIdealFootprint()$/;"	f
dvmHeapSourceGetImmuneLimit	alloc/HeapSource.cpp	/^void *dvmHeapSourceGetImmuneLimit(bool isPartial)$/;"	f
dvmHeapSourceGetLiveBits	alloc/Copying.cpp	/^HeapBitmap *dvmHeapSourceGetLiveBits()$/;"	f
dvmHeapSourceGetLiveBits	alloc/HeapSource.cpp	/^HeapBitmap *dvmHeapSourceGetLiveBits()$/;"	f
dvmHeapSourceGetMarkBits	alloc/HeapSource.cpp	/^HeapBitmap *dvmHeapSourceGetMarkBits()$/;"	f
dvmHeapSourceGetMaximumSize	alloc/HeapSource.cpp	/^size_t dvmHeapSourceGetMaximumSize()$/;"	f
dvmHeapSourceGetNumHeaps	alloc/Copying.cpp	/^size_t dvmHeapSourceGetNumHeaps()$/;"	f
dvmHeapSourceGetNumHeaps	alloc/HeapSource.cpp	/^size_t dvmHeapSourceGetNumHeaps()$/;"	f
dvmHeapSourceGetObjectBitmaps	alloc/Copying.cpp	/^void dvmHeapSourceGetObjectBitmaps(HeapBitmap objBits[], HeapBitmap markBits[],$/;"	f
dvmHeapSourceGetPtrFlag	alloc/Copying.cpp	/^bool dvmHeapSourceGetPtrFlag(const void *ptr, HeapSourcePtrFlag flag)$/;"	f
dvmHeapSourceGetRegions	alloc/HeapSource.cpp	/^void dvmHeapSourceGetRegions(uintptr_t *base, uintptr_t *max, size_t numHeaps)$/;"	f
dvmHeapSourceGetValue	alloc/Copying.cpp	/^size_t dvmHeapSourceGetValue(HeapSourceValueSpec spec,$/;"	f
dvmHeapSourceGetValue	alloc/HeapSource.cpp	/^size_t dvmHeapSourceGetValue(HeapSourceValueSpec spec, size_t perHeapStats[],$/;"	f
dvmHeapSourceGrowForUtilization	alloc/Copying.cpp	/^void dvmHeapSourceGrowForUtilization()$/;"	f
dvmHeapSourceGrowForUtilization	alloc/HeapSource.cpp	/^void dvmHeapSourceGrowForUtilization()$/;"	f
dvmHeapSourceShutdown	alloc/Copying.cpp	/^void dvmHeapSourceShutdown(GcHeap **gcHeap)$/;"	f
dvmHeapSourceShutdown	alloc/HeapSource.cpp	/^void dvmHeapSourceShutdown(GcHeap **gcHeap)$/;"	f
dvmHeapSourceStartup	alloc/Copying.cpp	/^GcHeap *dvmHeapSourceStartup(size_t startSize, size_t absoluteMaxSize)$/;"	f
dvmHeapSourceStartup	alloc/HeapSource.cpp	/^GcHeap* dvmHeapSourceStartup(size_t startSize, size_t maximumSize,$/;"	f
dvmHeapSourceStartupAfterZygote	alloc/Copying.cpp	/^bool dvmHeapSourceStartupAfterZygote()$/;"	f
dvmHeapSourceStartupAfterZygote	alloc/HeapSource.cpp	/^bool dvmHeapSourceStartupAfterZygote()$/;"	f
dvmHeapSourceStartupBeforeFork	alloc/Copying.cpp	/^bool dvmHeapSourceStartupBeforeFork()$/;"	f
dvmHeapSourceStartupBeforeFork	alloc/HeapSource.cpp	/^bool dvmHeapSourceStartupBeforeFork()$/;"	f
dvmHeapSourceSwapBitmaps	alloc/HeapSource.cpp	/^void dvmHeapSourceSwapBitmaps()$/;"	f
dvmHeapSourceThreadShutdown	alloc/Copying.cpp	/^void dvmHeapSourceThreadShutdown()$/;"	f
dvmHeapSourceThreadShutdown	alloc/HeapSource.cpp	/^void dvmHeapSourceThreadShutdown()$/;"	f
dvmHeapSourceWalk	alloc/Copying.cpp	/^void dvmHeapSourceWalk(void (*callback)(const void *chunkptr, size_t chunklen,$/;"	f
dvmHeapSourceWalk	alloc/HeapSource.cpp	/^void dvmHeapSourceWalk(void(*callback)(const void *chunkptr, size_t chunklen,$/;"	f
dvmHeapSourceZeroMarkBitmap	alloc/HeapSource.cpp	/^void dvmHeapSourceZeroMarkBitmap()$/;"	f
dvmHeapStartup	alloc/Heap.cpp	/^bool dvmHeapStartup()$/;"	f
dvmHeapStartupAfterZygote	alloc/Heap.cpp	/^bool dvmHeapStartupAfterZygote()$/;"	f
dvmHeapSweepSystemWeaks	alloc/MarkSweep.cpp	/^void dvmHeapSweepSystemWeaks()$/;"	f
dvmHeapSweepUnmarkedObjects	alloc/Copying.cpp	/^void dvmHeapSweepUnmarkedObjects(GcMode mode, int *numFreed, size_t *sizeFreed)$/;"	f
dvmHeapSweepUnmarkedObjects	alloc/MarkSweep.cpp	/^void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,$/;"	f
dvmHeapThreadShutdown	alloc/Heap.cpp	/^void dvmHeapThreadShutdown()$/;"	f
dvmHoldsLock	Sync.cpp	/^bool dvmHoldsLock(Thread* thread, Object* obj)$/;"	f
dvmHumanReadableDescriptor	Misc.cpp	/^std::string dvmHumanReadableDescriptor(const char* descriptor) {$/;"	f
dvmHumanReadableField	Misc.cpp	/^std::string dvmHumanReadableField(const Field* field)$/;"	f
dvmHumanReadableMethod	Misc.cpp	/^std::string dvmHumanReadableMethod(const Method* method, bool withSignature)$/;"	f
dvmHumanReadableType	Misc.cpp	/^std::string dvmHumanReadableType(const Object* obj)$/;"	f
dvmIdentityHashCode	Sync.cpp	/^u4 dvmIdentityHashCode(Object *obj)$/;"	f
dvmImplements	oo/TypeCheck.cpp	/^int dvmImplements(const ClassObject* clazz, const ClassObject* interface)$/;"	f
dvmInSamePackage	oo/AccessCheck.cpp	/^bool dvmInSamePackage(const ClassObject* class1, const ClassObject* class2)$/;"	f
dvmInitAfterZygote	Init.cpp	/^bool dvmInitAfterZygote()$/;"	f
dvmInitBreakpoints	interp/Interp.cpp	/^void dvmInitBreakpoints()$/;"	f
dvmInitClass	oo/Class.cpp	/^bool dvmInitClass(ClassObject* clazz)$/;"	f
dvmInitGrowableList	compiler/Utility.cpp	/^void dvmInitGrowableList(GrowableList *gList, size_t initLength)$/;"	f
dvmInitInterpStack	interp/Stack.cpp	/^bool dvmInitInterpStack(Thread* thread, int stackSize)$/;"	f
dvmInitInterpreterState	interp/Interp.cpp	/^void dvmInitInterpreterState(Thread* self)$/;"	f
dvmInitMutex	Thread.h	/^INLINE void dvmInitMutex(pthread_mutex_t* pMutex)$/;"	f
dvmInitReferenceTable	ReferenceTable.cpp	/^bool dvmInitReferenceTable(ReferenceTable* pRef, int initialCount,$/;"	f
dvmInitializeInterpBreak	interp/Interp.cpp	/^void dvmInitializeInterpBreak(Thread* thread)$/;"	f
dvmInitializeSSAConversion	compiler/Dataflow.cpp	/^void dvmInitializeSSAConversion(CompilationUnit *cUnit)$/;"	f
dvmInlineNativeShutdown	InlineNative.cpp	/^void dvmInlineNativeShutdown()$/;"	f
dvmInlineNativeStartup	InlineNative.cpp	/^bool dvmInlineNativeStartup()$/;"	f
dvmInsertGrowableList	compiler/Utility.cpp	/^void dvmInsertGrowableList(GrowableList *gList, intptr_t elem)$/;"	f
dvmInsnGetWidth	analysis/CodeVerify.h	/^INLINE int dvmInsnGetWidth(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsBranchTarget	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsBranchTarget(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsChanged	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsChanged(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsGcPoint	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsGcPoint(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsInTry	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsInTry(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsOpcode	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsOpcode(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsVisited	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsVisited(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnIsVisitedOrChanged	analysis/CodeVerify.h	/^INLINE bool dvmInsnIsVisitedOrChanged(const InsnFlags* insnFlags, int addr) {$/;"	f
dvmInsnSetBranchTarget	analysis/CodeVerify.h	/^INLINE void dvmInsnSetBranchTarget(InsnFlags* insnFlags, int addr,$/;"	f
dvmInsnSetChanged	analysis/CodeVerify.h	/^INLINE void dvmInsnSetChanged(InsnFlags* insnFlags, int addr, bool changed)$/;"	f
dvmInsnSetGcPoint	analysis/CodeVerify.h	/^INLINE void dvmInsnSetGcPoint(InsnFlags* insnFlags, int addr,$/;"	f
dvmInsnSetInTry	analysis/CodeVerify.h	/^INLINE void dvmInsnSetInTry(InsnFlags* insnFlags, int addr, bool inTry)$/;"	f
dvmInsnSetVisited	analysis/CodeVerify.h	/^INLINE void dvmInsnSetVisited(InsnFlags* insnFlags, int addr, bool changed)$/;"	f
dvmInstanceof	oo/TypeCheck.h	/^INLINE int dvmInstanceof(const ClassObject* instance, const ClassObject* clazz)$/;"	f
dvmInstanceofNonTrivial	oo/TypeCheck.cpp	/^int dvmInstanceofNonTrivial(const ClassObject* instance,$/;"	f
dvmInstanceofShutdown	oo/TypeCheck.cpp	/^void dvmInstanceofShutdown()$/;"	f
dvmInstanceofStartup	oo/TypeCheck.cpp	/^bool dvmInstanceofStartup()$/;"	f
dvmInternalNativeShutdown	native/InternalNative.cpp	/^void dvmInternalNativeShutdown()$/;"	f
dvmInternalNativeStartup	native/InternalNative.cpp	/^bool dvmInternalNativeStartup()$/;"	f
dvmInterpCheckTrackedRefs	interp/Interp.cpp	/^void dvmInterpCheckTrackedRefs(Thread* self, const Method* method,$/;"	f
dvmInterpFindInterfaceMethod	interp/Interp.cpp	/^Method* dvmInterpFindInterfaceMethod(ClassObject* thisClass, u4 methodIdx,$/;"	f
dvmInterpHandleFillArrayData	interp/Interp.cpp	/^bool dvmInterpHandleFillArrayData(ArrayObject* arrayObj, const u2* arrayData)$/;"	f
dvmInterpHandlePackedSwitch	interp/Interp.cpp	/^s4 dvmInterpHandlePackedSwitch(const u2* switchData, s4 testVal)$/;"	f
dvmInterpHandleSparseSwitch	interp/Interp.cpp	/^s4 dvmInterpHandleSparseSwitch(const u2* switchData, s4 testVal)$/;"	f
dvmInterpret	interp/Interp.cpp	/^void dvmInterpret(Thread* self, const Method* method, JValue* pResult)$/;"	f
dvmInterpretPortable	mterp/out/InterpC-portable.cpp	/^void dvmInterpretPortable(Thread* self)$/;"	f
dvmInterpretPortable	mterp/portable/entry.cpp	/^void dvmInterpretPortable(Thread* self)$/;"	f
dvmIntersectBitVectors	BitVector.cpp	/^bool dvmIntersectBitVectors(BitVector *dest, const BitVector *src1,$/;"	f
dvmInvokeMethod	interp/Stack.cpp	/^Object* dvmInvokeMethod(Object* obj, const Method* method,$/;"	f
dvmIsAbstractClass	oo/Object.h	/^INLINE bool dvmIsAbstractClass(const ClassObject* clazz) {$/;"	f
dvmIsAbstractMethod	oo/Object.h	/^INLINE bool dvmIsAbstractMethod(const Method* method) {$/;"	f
dvmIsAnnotationClass	oo/Object.h	/^INLINE bool dvmIsAnnotationClass(const ClassObject* clazz) {$/;"	f
dvmIsArray	oo/Array.h	/^INLINE bool dvmIsArray(const ArrayObject* arrayObj)$/;"	f
dvmIsArrayClass	oo/Array.h	/^INLINE bool dvmIsArrayClass(const ClassObject* clazz)$/;"	f
dvmIsBitSet	BitVector.cpp	/^bool dvmIsBitSet(const BitVector* pBits, unsigned int num)$/;"	f
dvmIsBreakFrame	interp/Stack.h	/^INLINE bool dvmIsBreakFrame(const u4* fp)$/;"	f
dvmIsBytecodeMethod	oo/Object.h	/^INLINE bool dvmIsBytecodeMethod(const Method* method) {$/;"	f
dvmIsCheckedException	Exception.cpp	/^bool dvmIsCheckedException(const Object* exception)$/;"	f
dvmIsClassAnnotationPresent	reflect/Annotation.cpp	/^bool dvmIsClassAnnotationPresent(const ClassObject* clazz,$/;"	f
dvmIsClassInitialized	oo/Class.h	/^INLINE bool dvmIsClassInitialized(const ClassObject* clazz) {$/;"	f
dvmIsClassInitializing	oo/Class.cpp	/^bool dvmIsClassInitializing(const ClassObject* clazz)$/;"	f
dvmIsClassLinked	oo/Object.h	/^INLINE bool dvmIsClassLinked(const ClassObject* clazz) {$/;"	f
dvmIsClassObject	oo/Object.h	/^INLINE bool dvmIsClassObject(const Object* obj) {$/;"	f
dvmIsClassVerified	oo/Object.h	/^INLINE bool dvmIsClassVerified(const ClassObject* clazz) {$/;"	f
dvmIsConstructorMethod	oo/Object.h	/^INLINE bool dvmIsConstructorMethod(const Method* method) {$/;"	f
dvmIsDeclaredSynchronizedMethod	oo/Object.h	/^INLINE bool dvmIsDeclaredSynchronizedMethod(const Method* method) {$/;"	f
dvmIsDirectMethod	oo/Object.h	/^INLINE bool dvmIsDirectMethod(const Method* method) {$/;"	f
dvmIsFieldAnnotationPresent	reflect/Annotation.cpp	/^bool dvmIsFieldAnnotationPresent(const ClassObject* clazz,$/;"	f
dvmIsFinalClass	oo/Object.h	/^INLINE bool dvmIsFinalClass(const ClassObject* clazz) {$/;"	f
dvmIsFinalField	oo/Object.h	/^INLINE bool dvmIsFinalField(const Field* field) {$/;"	f
dvmIsFinalMethod	oo/Object.h	/^INLINE bool dvmIsFinalMethod(const Method* method) {$/;"	f
dvmIsHeapAddress	alloc/Alloc.cpp	/^bool dvmIsHeapAddress(void *address)$/;"	f
dvmIsInterfaceClass	oo/Object.h	/^INLINE bool dvmIsInterfaceClass(const ClassObject* clazz) {$/;"	f
dvmIsMethodAnnotationPresent	reflect/Annotation.cpp	/^bool dvmIsMethodAnnotationPresent(const ClassObject* clazz,$/;"	f
dvmIsMethodTraceActive	Profile.cpp	/^bool dvmIsMethodTraceActive()$/;"	f
dvmIsMirandaMethod	oo/Object.h	/^INLINE bool dvmIsMirandaMethod(const Method* method) {$/;"	f
dvmIsNativeMethod	oo/Object.h	/^INLINE bool dvmIsNativeMethod(const Method* method) {$/;"	f
dvmIsNonMovingObject	alloc/Alloc.cpp	/^bool dvmIsNonMovingObject(const Object* object)$/;"	f
dvmIsObjectArray	oo/Array.h	/^INLINE bool dvmIsObjectArray(const ArrayObject* arrayObj)$/;"	f
dvmIsObjectArrayClass	oo/Array.h	/^INLINE bool dvmIsObjectArrayClass(const ClassObject* clazz)$/;"	f
dvmIsOnThreadList	Thread.cpp	/^bool dvmIsOnThreadList(const Thread* thread)$/;"	f
dvmIsPrimitiveClass	oo/Object.h	/^INLINE bool dvmIsPrimitiveClass(const ClassObject* clazz) {$/;"	f
dvmIsPrivateMethod	oo/Object.h	/^INLINE bool dvmIsPrivateMethod(const Method* method) {$/;"	f
dvmIsProtectedField	oo/Object.h	/^INLINE bool dvmIsProtectedField(const Field* field) {$/;"	f
dvmIsPublicClass	oo/Object.h	/^INLINE bool dvmIsPublicClass(const ClassObject* clazz) {$/;"	f
dvmIsPublicMethod	oo/Object.h	/^INLINE bool dvmIsPublicMethod(const Method* method) {$/;"	f
dvmIsReferenceTableFull	ReferenceTable.h	/^INLINE size_t dvmIsReferenceTableFull(const ReferenceTable* pRef)$/;"	f
dvmIsReflectionMethod	reflect/Reflect.h	/^INLINE bool dvmIsReflectionMethod(const Method* method)$/;"	f
dvmIsStaticField	oo/Object.h	/^INLINE bool dvmIsStaticField(const Field* field) {$/;"	f
dvmIsStaticMethod	oo/Object.h	/^INLINE bool dvmIsStaticMethod(const Method* method) {$/;"	f
dvmIsSubClass	oo/TypeCheck.h	/^INLINE int dvmIsSubClass(const ClassObject* sub, const ClassObject* clazz) {$/;"	f
dvmIsSuspended	Thread.cpp	/^bool dvmIsSuspended(const Thread* thread)$/;"	f
dvmIsSynchronizedMethod	oo/Object.h	/^INLINE bool dvmIsSynchronizedMethod(const Method* method) {$/;"	f
dvmIsSyntheticMethod	oo/Object.h	/^INLINE bool dvmIsSyntheticMethod(const Method* method) {$/;"	f
dvmIsTheClassClass	oo/Object.h	/^INLINE bool dvmIsTheClassClass(const ClassObject* clazz) {$/;"	f
dvmIsValidCard	alloc/CardTable.cpp	/^bool dvmIsValidCard(const u1 *cardAddr)$/;"	f
dvmIsValidObject	alloc/Heap.cpp	/^bool dvmIsValidObject(const Object* obj)$/;"	f
dvmIsVolatileField	oo/Object.h	/^INLINE bool dvmIsVolatileField(const Field* field) {$/;"	f
dvmIsWeakInternedString	Intern.cpp	/^bool dvmIsWeakInternedString(StringObject* strObj)$/;"	f
dvmIsZygoteObject	alloc/HeapSource.cpp	/^bool dvmIsZygoteObject(const Object* obj)$/;"	f
dvmIterativeSleep	Misc.cpp	/^bool dvmIterativeSleep(int iteration, int maxTotalSleep, u8 relStartTime)$/;"	f
dvmJarFileFree	JarFile.cpp	/^void dvmJarFileFree(JarFile* pJarFile)$/;"	f
dvmJarFileOpen	JarFile.cpp	/^int dvmJarFileOpen(const char* fileName, const char* odexOutputName,$/;"	f
dvmJdwpAcceptConnection	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpAcceptConnection(JdwpState* state) {$/;"	f
dvmJdwpAddLocation	jdwp/JdwpHandler.cpp	/^void dvmJdwpAddLocation(ExpandBuf* pReply, const JdwpLocation* pLoc)$/;"	f
dvmJdwpAndroidAdbTransport	jdwp/JdwpAdb.cpp	/^const JdwpTransport* dvmJdwpAndroidAdbTransport()$/;"	f
dvmJdwpAwaitingHandshake	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpAwaitingHandshake(JdwpState* state) {$/;"	f
dvmJdwpClearWaitForEventThread	jdwp/JdwpEvent.cpp	/^void dvmJdwpClearWaitForEventThread(JdwpState* state)$/;"	f
dvmJdwpCloseConnection	jdwp/JdwpPriv.h	/^INLINE void dvmJdwpCloseConnection(JdwpState* state) {$/;"	f
dvmJdwpDdmSendChunkV	jdwp/JdwpEvent.cpp	/^void dvmJdwpDdmSendChunkV(JdwpState* state, int type, const struct iovec* iov,$/;"	f
dvmJdwpErrorStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpErrorStr(JdwpError error)$/;"	f
dvmJdwpEstablishConnection	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpEstablishConnection(JdwpState* state) {$/;"	f
dvmJdwpEventAlloc	jdwp/JdwpEvent.cpp	/^JdwpEvent* dvmJdwpEventAlloc(int numMods)$/;"	f
dvmJdwpEventFree	jdwp/JdwpEvent.cpp	/^void dvmJdwpEventFree(JdwpEvent* pEvent)$/;"	f
dvmJdwpEventKindStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpEventKindStr(JdwpEventKind kind)$/;"	f
dvmJdwpGetDebugThread	jdwp/JdwpMain.cpp	/^pthread_t dvmJdwpGetDebugThread(JdwpState* state)$/;"	f
dvmJdwpGetNowMsec	jdwp/JdwpMain.cpp	/^s8 dvmJdwpGetNowMsec()$/;"	f
dvmJdwpIsActive	jdwp/JdwpMain.cpp	/^bool dvmJdwpIsActive(JdwpState* state)$/;"	f
dvmJdwpIsConnected	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpIsConnected(JdwpState* state) {$/;"	f
dvmJdwpIsTransportDefined	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpIsTransportDefined(JdwpState* state) {$/;"	f
dvmJdwpLastDebuggerActivity	jdwp/JdwpMain.cpp	/^s8 dvmJdwpLastDebuggerActivity(JdwpState* state)$/;"	f
dvmJdwpModKindStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpModKindStr(JdwpModKind kind)$/;"	f
dvmJdwpNetFree	jdwp/JdwpPriv.h	/^INLINE void dvmJdwpNetFree(JdwpState* state) {$/;"	f
dvmJdwpNetShutdown	jdwp/JdwpPriv.h	/^INLINE void dvmJdwpNetShutdown(JdwpState* state) {$/;"	f
dvmJdwpNetStartup	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpNetStartup(JdwpState* state,$/;"	f
dvmJdwpNextEventSerial	jdwp/JdwpEvent.cpp	/^u4 dvmJdwpNextEventSerial(JdwpState* state)$/;"	f
dvmJdwpNextRequestSerial	jdwp/JdwpEvent.cpp	/^u4 dvmJdwpNextRequestSerial(JdwpState* state)$/;"	f
dvmJdwpPostClassPrepare	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostClassPrepare(JdwpState* state, int tag, RefTypeId refTypeId,$/;"	f
dvmJdwpPostClassUnload	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostClassUnload(JdwpState* state, RefTypeId refTypeId)$/;"	f
dvmJdwpPostException	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostException(JdwpState* state, const JdwpLocation* pThrowLoc,$/;"	f
dvmJdwpPostFieldAccess	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostFieldAccess(JdwpState* state, int STUFF, ObjectId thisPtr,$/;"	f
dvmJdwpPostLocationEvent	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostLocationEvent(JdwpState* state, const JdwpLocation* pLoc,$/;"	f
dvmJdwpPostThreadChange	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostThreadChange(JdwpState* state, ObjectId threadId, bool start)$/;"	f
dvmJdwpPostVMDeath	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostVMDeath(JdwpState* state)$/;"	f
dvmJdwpPostVMStart	jdwp/JdwpEvent.cpp	/^bool dvmJdwpPostVMStart(JdwpState* state, bool suspend)$/;"	f
dvmJdwpProcessIncoming	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpProcessIncoming(JdwpState* state) {$/;"	f
dvmJdwpProcessRequest	jdwp/JdwpHandler.cpp	/^void dvmJdwpProcessRequest(JdwpState* state, const JdwpReqHeader* pHeader,$/;"	f
dvmJdwpRegisterEvent	jdwp/JdwpEvent.cpp	/^JdwpError dvmJdwpRegisterEvent(JdwpState* state, JdwpEvent* pEvent)$/;"	f
dvmJdwpResetState	jdwp/JdwpMain.cpp	/^void dvmJdwpResetState(JdwpState* state)$/;"	f
dvmJdwpSendBufferedRequest	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpSendBufferedRequest(JdwpState* state,$/;"	f
dvmJdwpSendRequest	jdwp/JdwpPriv.h	/^INLINE bool dvmJdwpSendRequest(JdwpState* state, ExpandBuf* pReq) {$/;"	f
dvmJdwpSetWaitForEventThread	jdwp/JdwpEvent.cpp	/^void dvmJdwpSetWaitForEventThread(JdwpState* state, ObjectId threadId)$/;"	f
dvmJdwpShutdown	jdwp/JdwpMain.cpp	/^void dvmJdwpShutdown(JdwpState* state)$/;"	f
dvmJdwpSocketTransport	jdwp/JdwpSocket.cpp	/^const JdwpTransport* dvmJdwpSocketTransport()$/;"	f
dvmJdwpStartup	jdwp/JdwpMain.cpp	/^JdwpState* dvmJdwpStartup(const JdwpStartupParams* pParams)$/;"	f
dvmJdwpStepDepthStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpStepDepthStr(JdwpStepDepth depth)$/;"	f
dvmJdwpStepSizeStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpStepSizeStr(JdwpStepSize size)$/;"	f
dvmJdwpSuspendPolicyStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpSuspendPolicyStr(JdwpSuspendPolicy policy)$/;"	f
dvmJdwpSuspendStatusStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpSuspendStatusStr(JdwpSuspendStatus status)$/;"	f
dvmJdwpThreadStatusStr	jdwp/JdwpConstants.cpp	/^const char* dvmJdwpThreadStatusStr(JdwpThreadStatus status)$/;"	f
dvmJdwpUnregisterAll	jdwp/JdwpEvent.cpp	/^void dvmJdwpUnregisterAll(JdwpState* state)$/;"	f
dvmJdwpUnregisterEventById	jdwp/JdwpEvent.cpp	/^void dvmJdwpUnregisterEventById(JdwpState* state, u4 requestId)$/;"	f
dvmJitCalleeRestore	compiler/codegen/arm/armv5te-vfp/CallingConvention.S	/^dvmJitCalleeRestore:$/;"	l
dvmJitCalleeRestore	compiler/codegen/arm/armv5te/CallingConvention.S	/^dvmJitCalleeRestore:$/;"	l
dvmJitCalleeRestore	compiler/codegen/arm/armv7-a-neon/CallingConvention.S	/^dvmJitCalleeRestore:$/;"	l
dvmJitCalleeRestore	compiler/codegen/arm/armv7-a/CallingConvention.S	/^dvmJitCalleeRestore:$/;"	l
dvmJitCalleeRestore	compiler/codegen/x86/ia32/CallingConvention.S	/^dvmJitCalleeRestore:$/;"	l
dvmJitCalleeSave	compiler/codegen/arm/armv5te-vfp/CallingConvention.S	/^dvmJitCalleeSave:$/;"	l
dvmJitCalleeSave	compiler/codegen/arm/armv5te/CallingConvention.S	/^dvmJitCalleeSave:$/;"	l
dvmJitCalleeSave	compiler/codegen/arm/armv7-a-neon/CallingConvention.S	/^dvmJitCalleeSave:$/;"	l
dvmJitCalleeSave	compiler/codegen/arm/armv7-a/CallingConvention.S	/^dvmJitCalleeSave:$/;"	l
dvmJitCalleeSave	compiler/codegen/x86/ia32/CallingConvention.S	/^dvmJitCalleeSave:$/;"	l
dvmJitChain	compiler/codegen/arm/Assemble.cpp	/^void* dvmJitChain(void* tgtAddr, u4* branchAddr)$/;"	f
dvmJitChain	compiler/codegen/x86/Assemble.cpp	/^void* dvmJitChain(void* tgtAddr, u4* branchAddr)$/;"	f
dvmJitChangeProfileMode	interp/Jit.cpp	/^void dvmJitChangeProfileMode(TraceProfilingModes newState)$/;"	f
dvmJitCheckTraceRequest	interp/Jit.cpp	/^void dvmJitCheckTraceRequest(Thread* self)$/;"	f
dvmJitDebuggerOrProfilerActive	interp/InterpDefs.h	/^static inline bool dvmJitDebuggerOrProfilerActive()$/;"	f
dvmJitDumpTraceDesc	interp/Jit.cpp	/^void dvmJitDumpTraceDesc(JitTraceDescription *trace)$/;"	f
dvmJitEndTraceSelect	interp/Jit.cpp	/^void dvmJitEndTraceSelect(Thread* self, const u2* dPC)$/;"	f
dvmJitFindEntry	interp/Jit.cpp	/^JitEntry *dvmJitFindEntry(const u2* pc, bool isMethodEntry)$/;"	f
dvmJitGetMethodAddr	interp/Jit.cpp	/^void* dvmJitGetMethodAddr(const u2* dPC)$/;"	f
dvmJitGetMethodAddrThread	interp/Jit.cpp	/^void* dvmJitGetMethodAddrThread(const u2* dPC, Thread* self)$/;"	f
dvmJitGetTraceAddr	interp/Jit.cpp	/^void* dvmJitGetTraceAddr(const u2* dPC)$/;"	f
dvmJitGetTraceAddrThread	interp/Jit.cpp	/^void* dvmJitGetTraceAddrThread(const u2* dPC, Thread* self)$/;"	f
dvmJitHash	interp/Jit.h	/^static inline u4 dvmJitHash( const u2* p ) {$/;"	f
dvmJitHashMask	interp/Jit.h	/^static inline u4 dvmJitHashMask( const u2* p, u4 mask ) {$/;"	f
dvmJitHideTranslation	interp/InterpDefs.h	/^static inline bool dvmJitHideTranslation()$/;"	f
dvmJitInstallClassObjectPointers	compiler/codegen/arm/Assemble.cpp	/^void dvmJitInstallClassObjectPointers(CompilationUnit *cUnit, char *codeAddress)$/;"	f
dvmJitNextTraceCounter	interp/Jit.cpp	/^JitTraceCounter_t *dvmJitNextTraceCounter()$/;"	f
dvmJitResetTable	interp/Jit.cpp	/^void dvmJitResetTable()$/;"	f
dvmJitResizeJitTable	interp/Jit.cpp	/^bool dvmJitResizeJitTable( unsigned int size )$/;"	f
dvmJitResumeTranslation	mterp/armv5te/footer.S	/^dvmJitResumeTranslation:$/;"	l
dvmJitResumeTranslation	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitResumeTranslation:$/;"	l
dvmJitResumeTranslation	mterp/out/InterpAsm-armv5te.S	/^dvmJitResumeTranslation:$/;"	l
dvmJitResumeTranslation	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitResumeTranslation:$/;"	l
dvmJitResumeTranslation	mterp/out/InterpAsm-armv7-a.S	/^dvmJitResumeTranslation:$/;"	l
dvmJitScanAllClassPointers	compiler/codegen/arm/Assemble.cpp	/^void dvmJitScanAllClassPointers(void (*callback)(void *))$/;"	f
dvmJitScanAllClassPointers	compiler/codegen/x86/Assemble.cpp	/^void dvmJitScanAllClassPointers(void (*callback)(void *))$/;"	f
dvmJitSetCodeAddr	interp/Jit.cpp	/^void dvmJitSetCodeAddr(const u2* dPC, void *nPC, JitInstructionSetType set,$/;"	f
dvmJitStats	interp/Jit.cpp	/^void dvmJitStats()$/;"	f
dvmJitStopTranslationRequests	interp/Jit.cpp	/^void dvmJitStopTranslationRequests()$/;"	f
dvmJitToInterpBackwardBranch	interp/InterpState.h	/^    void (*dvmJitToInterpBackwardBranch)(void);$/;"	m	struct:JitToInterpEntries
dvmJitToInterpBackwardBranch	mterp/armv5te/footer.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpBackwardBranch	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpBackwardBranch	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpBackwardBranch	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpBackwardBranch	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpBackwardBranch	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpBackwardBranch	mterp/x86/footer.S	/^dvmJitToInterpBackwardBranch:$/;"	l
dvmJitToInterpNoChain	interp/InterpState.h	/^    void (*dvmJitToInterpNoChain)(void);$/;"	m	struct:JitToInterpEntries
dvmJitToInterpNoChain	mterp/armv5te/footer.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChain	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChain	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChain	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChain	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChain	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChain	mterp/x86/footer.S	/^dvmJitToInterpNoChain:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/armv5te/footer.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNoChainNoProfile	mterp/x86/footer.S	/^dvmJitToInterpNoChainNoProfile:$/;"	l
dvmJitToInterpNormal	interp/InterpState.h	/^    void (*dvmJitToInterpNormal)(void);$/;"	m	struct:JitToInterpEntries
dvmJitToInterpNormal	mterp/armv5te/footer.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpNormal	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpNormal	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpNormal	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpNormal	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpNormal	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpNormal	mterp/x86/footer.S	/^dvmJitToInterpNormal:$/;"	l
dvmJitToInterpPunt	interp/InterpState.h	/^    void (*dvmJitToInterpPunt)(void);$/;"	m	struct:JitToInterpEntries
dvmJitToInterpPunt	mterp/armv5te/footer.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpPunt	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpPunt	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpPunt	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpPunt	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpPunt	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpPunt	mterp/x86/footer.S	/^dvmJitToInterpPunt:$/;"	l
dvmJitToInterpSingleStep	interp/InterpState.h	/^    void (*dvmJitToInterpSingleStep)(void);$/;"	m	struct:JitToInterpEntries
dvmJitToInterpSingleStep	mterp/armv5te/footer.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpSingleStep	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpSingleStep	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpSingleStep	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpSingleStep	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpSingleStep	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpSingleStep	mterp/x86/footer.S	/^dvmJitToInterpSingleStep:$/;"	l
dvmJitToInterpTraceSelect	interp/InterpState.h	/^    void (*dvmJitToInterpTraceSelect)(void);$/;"	m	struct:JitToInterpEntries
dvmJitToInterpTraceSelect	mterp/armv5te/footer.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelect	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelect	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelect	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelect	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelect	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelect	mterp/x86/footer.S	/^dvmJitToInterpTraceSelect:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/armv5te/footer.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/out/InterpAsm-armv5te.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/out/InterpAsm-armv7-a.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/out/InterpAsm-x86.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToInterpTraceSelectNoChain	mterp/x86/footer.S	/^dvmJitToInterpTraceSelectNoChain:$/;"	l
dvmJitToPatchPredictedChain	compiler/codegen/arm/Assemble.cpp	/^const Method *dvmJitToPatchPredictedChain(const Method *method,$/;"	f
dvmJitToPatchPredictedChain	compiler/codegen/x86/Assemble.cpp	/^const Method *dvmJitToPatchPredictedChain(const Method *method,$/;"	f
dvmJitTraceProfilingOff	interp/Jit.cpp	/^void dvmJitTraceProfilingOff()$/;"	f
dvmJitTraceProfilingOn	interp/Jit.cpp	/^void dvmJitTraceProfilingOn()$/;"	f
dvmJitUnchain	compiler/codegen/x86/Assemble.cpp	/^u4* dvmJitUnchain(void* codeAddr)$/;"	f
dvmJitUnchainAll	compiler/codegen/arm/Assemble.cpp	/^void dvmJitUnchainAll()$/;"	f
dvmJitUnchainAll	compiler/codegen/x86/Assemble.cpp	/^void dvmJitUnchainAll()$/;"	f
dvmJitUpdateThreadStateAll	interp/Jit.cpp	/^void dvmJitUpdateThreadStateAll()$/;"	f
dvmJitUpdateThreadStateSingle	interp/Jit.cpp	/^void dvmJitUpdateThreadStateSingle(Thread* thread)$/;"	f
dvmJitd2l	interp/Jit.cpp	/^s8 dvmJitd2l(double d)$/;"	f
dvmJitf2l	interp/Jit.cpp	/^s8 dvmJitf2l(float f)$/;"	f
dvmJniShutdown	Jni.cpp	/^void dvmJniShutdown() {$/;"	f
dvmJniStartup	Jni.cpp	/^bool dvmJniStartup() {$/;"	f
dvmLateEnableAssertions	Init.cpp	/^void dvmLateEnableAssertions()$/;"	f
dvmLateEnableCheckedJni	Jni.cpp	/^void dvmLateEnableCheckedJni() {$/;"	f
dvmLineNumFromPC	interp/Stack.cpp	/^int dvmLineNumFromPC(const Method* method, u4 relPc)$/;"	f
dvmLinearAlloc	LinearAlloc.cpp	/^void* dvmLinearAlloc(Object* classLoader, size_t size)$/;"	f
dvmLinearAllocContains	LinearAlloc.cpp	/^bool dvmLinearAllocContains(const void* start, size_t length)$/;"	f
dvmLinearAllocCreate	LinearAlloc.cpp	/^LinearAllocHdr* dvmLinearAllocCreate(Object* classLoader)$/;"	f
dvmLinearAllocDestroy	LinearAlloc.cpp	/^void dvmLinearAllocDestroy(Object* classLoader)$/;"	f
dvmLinearAllocDump	LinearAlloc.cpp	/^void dvmLinearAllocDump(Object* classLoader)$/;"	f
dvmLinearFree	LinearAlloc.cpp	/^void dvmLinearFree(Object* classLoader, void* mem)$/;"	f
dvmLinearReadOnly	LinearAlloc.h	/^INLINE void dvmLinearReadOnly(Object* classLoader, void* mem)$/;"	f
dvmLinearReadWrite	LinearAlloc.h	/^INLINE void dvmLinearReadWrite(Object* classLoader, void* mem)$/;"	f
dvmLinearRealloc	LinearAlloc.cpp	/^void* dvmLinearRealloc(Object* classLoader, void* mem, size_t newSize)$/;"	f
dvmLinearSetReadOnly	LinearAlloc.cpp	/^void dvmLinearSetReadOnly(Object* classLoader, void* mem)$/;"	f
dvmLinearSetReadWrite	LinearAlloc.cpp	/^void dvmLinearSetReadWrite(Object* classLoader, void* mem)$/;"	f
dvmLinearStrdup	LinearAlloc.cpp	/^char* dvmLinearStrdup(Object* classLoader, const char* str)$/;"	f
dvmLinkClass	oo/Class.cpp	/^bool dvmLinkClass(ClassObject* clazz)$/;"	f
dvmLoadNativeCode	Native.cpp	/^bool dvmLoadNativeCode(const char* pathName, Object* classLoader,$/;"	f
dvmLoaderInInitiatingList	oo/Class.cpp	/^bool dvmLoaderInInitiatingList(const ClassObject* clazz, const Object* loader)$/;"	f
dvmLockHeap	alloc/Heap.cpp	/^bool dvmLockHeap()$/;"	f
dvmLockMutex	Thread.h	/^INLINE void dvmLockMutex(pthread_mutex_t* pMutex)$/;"	f
dvmLockObject	Sync.cpp	/^void dvmLockObject(Thread* self, Object *obj)$/;"	f
dvmLockThreadList	Thread.cpp	/^void dvmLockThreadList(Thread* self)$/;"	f
dvmLogExceptionStackTrace	Exception.cpp	/^void dvmLogExceptionStackTrace()$/;"	f
dvmLogRawStackTrace	Exception.cpp	/^void dvmLogRawStackTrace(const int* intVals, int stackDepth) {$/;"	f
dvmLogUnableToResolveClass	analysis/VerifySubs.cpp	/^void dvmLogUnableToResolveClass(const char* missingClassDescr,$/;"	f
dvmLogVerifyFailure	analysis/VerifySubs.cpp	/^void dvmLogVerifyFailure(const Method* meth, const char* format, ...)$/;"	f
dvmLookupClass	oo/Class.cpp	/^ClassObject* dvmLookupClass(const char* descriptor, Object* loader,$/;"	f
dvmLookupImmortalInternedString	Intern.cpp	/^StringObject* dvmLookupImmortalInternedString(StringObject* strObj)$/;"	f
dvmLookupInternalNativeMethod	native/InternalNative.cpp	/^DalvikNativeFunc dvmLookupInternalNativeMethod(const Method* method)$/;"	f
dvmLookupInternedString	Intern.cpp	/^StringObject* dvmLookupInternedString(StringObject* strObj)$/;"	f
dvmMalloc	alloc/Heap.cpp	/^void* dvmMalloc(size_t size, int flags)$/;"	f
dvmMarkCard	alloc/CardTable.cpp	/^void dvmMarkCard(const void *addr)$/;"	f
dvmMarkDirtyObjects	alloc/Copying.cpp	/^void dvmMarkDirtyObjects()$/;"	f
dvmMarkImmuneObjects	alloc/HeapSource.cpp	/^void dvmMarkImmuneObjects(const char *immuneLimit)$/;"	f
dvmMethodTraceAdd	Profile.cpp	/^void dvmMethodTraceAdd(Thread* self, const Method* method, int action)$/;"	f
dvmMethodTraceClassPrepBegin	Profile.cpp	/^void dvmMethodTraceClassPrepBegin()$/;"	f
dvmMethodTraceClassPrepEnd	Profile.cpp	/^void dvmMethodTraceClassPrepEnd()$/;"	f
dvmMethodTraceGCBegin	Profile.cpp	/^void dvmMethodTraceGCBegin()$/;"	f
dvmMethodTraceGCEnd	Profile.cpp	/^void dvmMethodTraceGCEnd()$/;"	f
dvmMethodTraceStart	Profile.cpp	/^void dvmMethodTraceStart(const char* traceFileName, int traceFd, int bufferSize,$/;"	f
dvmMethodTraceStop	Profile.cpp	/^void dvmMethodTraceStop()$/;"	f
dvmMethodTypeStr	oo/Resolve.cpp	/^const char* dvmMethodTypeStr(MethodType methodType)$/;"	f
dvmMterpCommonExceptionThrown	mterp/armv5te/footer.S	/^dvmMterpCommonExceptionThrown:$/;"	l
dvmMterpCommonExceptionThrown	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmMterpCommonExceptionThrown:$/;"	l
dvmMterpCommonExceptionThrown	mterp/out/InterpAsm-armv5te.S	/^dvmMterpCommonExceptionThrown:$/;"	l
dvmMterpCommonExceptionThrown	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmMterpCommonExceptionThrown:$/;"	l
dvmMterpCommonExceptionThrown	mterp/out/InterpAsm-armv7-a.S	/^dvmMterpCommonExceptionThrown:$/;"	l
dvmMterpDumpArmRegs	mterp/armv5te/debug.cpp	/^void dvmMterpDumpArmRegs(uint32_t r0, uint32_t r1, uint32_t r2, uint32_t r3)$/;"	f
dvmMterpDumpArmRegs	mterp/out/InterpC-armv5te-vfp.cpp	/^void dvmMterpDumpArmRegs(uint32_t r0, uint32_t r1, uint32_t r2, uint32_t r3)$/;"	f
dvmMterpDumpArmRegs	mterp/out/InterpC-armv5te.cpp	/^void dvmMterpDumpArmRegs(uint32_t r0, uint32_t r1, uint32_t r2, uint32_t r3)$/;"	f
dvmMterpDumpArmRegs	mterp/out/InterpC-armv7-a-neon.cpp	/^void dvmMterpDumpArmRegs(uint32_t r0, uint32_t r1, uint32_t r2, uint32_t r3)$/;"	f
dvmMterpDumpArmRegs	mterp/out/InterpC-armv7-a.cpp	/^void dvmMterpDumpArmRegs(uint32_t r0, uint32_t r1, uint32_t r2, uint32_t r3)$/;"	f
dvmMterpPrintMethod	mterp/armv5te/debug.cpp	/^void dvmMterpPrintMethod(Method* method)$/;"	f
dvmMterpPrintMethod	mterp/out/InterpC-armv5te-vfp.cpp	/^void dvmMterpPrintMethod(Method* method)$/;"	f
dvmMterpPrintMethod	mterp/out/InterpC-armv5te.cpp	/^void dvmMterpPrintMethod(Method* method)$/;"	f
dvmMterpPrintMethod	mterp/out/InterpC-armv7-a-neon.cpp	/^void dvmMterpPrintMethod(Method* method)$/;"	f
dvmMterpPrintMethod	mterp/out/InterpC-armv7-a.cpp	/^void dvmMterpPrintMethod(Method* method)$/;"	f
dvmMterpStd	mterp/Mterp.cpp	/^void dvmMterpStd(Thread* self)$/;"	f
dvmMterpStdBail	mterp/armv5te/entry.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/cstubs/entry.cpp	/^void dvmMterpStdBail(Thread* self)$/;"	f
dvmMterpStdBail	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/out/InterpAsm-armv5te.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/out/InterpAsm-armv7-a.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/out/InterpAsm-x86-atom.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/out/InterpAsm-x86.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/out/InterpC-allstubs.cpp	/^void dvmMterpStdBail(Thread* self)$/;"	f
dvmMterpStdBail	mterp/x86-atom/entry.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdBail	mterp/x86/entry.S	/^dvmMterpStdBail:$/;"	l
dvmMterpStdRun	mterp/armv5te/entry.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/cstubs/entry.cpp	/^void dvmMterpStdRun(Thread* self)$/;"	f
dvmMterpStdRun	mterp/out/InterpAsm-armv5te-vfp.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/out/InterpAsm-armv5te.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/out/InterpAsm-armv7-a-neon.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/out/InterpAsm-armv7-a.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/out/InterpAsm-x86-atom.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/out/InterpAsm-x86.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/out/InterpC-allstubs.cpp	/^void dvmMterpStdRun(Thread* self)$/;"	f
dvmMterpStdRun	mterp/x86-atom/entry.S	/^dvmMterpStdRun:$/;"	l
dvmMterpStdRun	mterp/x86/entry.S	/^dvmMterpStdRun:$/;"	l
dvmNameToDescriptor	Misc.cpp	/^char* dvmNameToDescriptor(const char* str)$/;"	f
dvmNativeShutdown	Native.cpp	/^void dvmNativeShutdown()$/;"	f
dvmNativeStartup	Native.cpp	/^bool dvmNativeStartup()$/;"	f
dvmNukeThread	Thread.cpp	/^void dvmNukeThread(Thread* thread)$/;"	f
dvmObjectNotify	Sync.cpp	/^void dvmObjectNotify(Thread* self, Object *obj)$/;"	f
dvmObjectNotifyAll	Sync.cpp	/^void dvmObjectNotifyAll(Thread* self, Object *obj)$/;"	f
dvmObjectSizeInHeap	alloc/Heap.cpp	/^size_t dvmObjectSizeInHeap(const Object *obj)$/;"	f
dvmObjectWait	Sync.cpp	/^void dvmObjectWait(Thread* self, Object *obj, s8 msec, s4 nsec,$/;"	f
dvmOpenCachedDexFile	analysis/DexPrepare.cpp	/^int dvmOpenCachedDexFile(const char* fileName, const char* cacheFileName,$/;"	f
dvmOptResolveClass	analysis/Optimize.cpp	/^ClassObject* dvmOptResolveClass(ClassObject* referrer, u4 classIdx,$/;"	f
dvmOptResolveInstField	analysis/Optimize.cpp	/^InstField* dvmOptResolveInstField(ClassObject* referrer, u4 ifieldIdx,$/;"	f
dvmOptResolveInterfaceMethod	analysis/Optimize.cpp	/^Method* dvmOptResolveInterfaceMethod(ClassObject* referrer, u4 methodIdx)$/;"	f
dvmOptResolveMethod	analysis/Optimize.cpp	/^Method* dvmOptResolveMethod(ClassObject* referrer, u4 methodIdx,$/;"	f
dvmOptResolveStaticField	analysis/Optimize.cpp	/^StaticField* dvmOptResolveStaticField(ClassObject* referrer, u4 sfieldIdx,$/;"	f
dvmOptimizeClass	analysis/Optimize.cpp	/^void dvmOptimizeClass(ClassObject* clazz, bool essentialOnly)$/;"	f
dvmOptimizeDexFile	analysis/DexPrepare.cpp	/^bool dvmOptimizeDexFile(int fd, off_t dexOffset, long dexLength,$/;"	f
dvmPathToAbsolutePortion	Misc.cpp	/^const char* dvmPathToAbsolutePortion(const char* path) {$/;"	f
dvmPerformInlineOp4Dbg	InlineNative.cpp	/^bool dvmPerformInlineOp4Dbg(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
dvmPerformInlineOp4Std	InlineNative.h	/^INLINE bool dvmPerformInlineOp4Std(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
dvmPlatformInvoke	arch/arm/CallEABI.S	/^dvmPlatformInvoke:$/;"	l
dvmPlatformInvoke	arch/arm/CallOldABI.S	/^dvmPlatformInvoke:$/;"	l
dvmPlatformInvoke	arch/generic/Call.cpp	/^void dvmPlatformInvoke(void* pEnv, ClassObject* clazz, int argInfo, int argc,$/;"	f
dvmPlatformInvoke	arch/sh/CallSH4ABI.S	/^dvmPlatformInvoke:$/;"	l
dvmPlatformInvoke	arch/x86-atom/Call386ABI.S	/^dvmPlatformInvoke:$/;"	l
dvmPlatformInvoke	arch/x86/Call386ABI.S	/^dvmPlatformInvoke:$/;"	l
dvmPlatformInvokeHints	arch/arm/HintsEABI.cpp	/^u4 dvmPlatformInvokeHints(const DexProto* proto)$/;"	f
dvmPlatformInvokeHints	arch/generic/Hints.cpp	/^u4 dvmPlatformInvokeHints( const DexProto* proto)$/;"	f
dvmPlatformInvokeHints	arch/x86-atom/Hints386ABI.cpp	/^u4 dvmPlatformInvokeHints(const DexProto* proto)  {$/;"	f
dvmPlatformInvokeHints	arch/x86/Hints386ABI.cpp	/^u4 dvmPlatformInvokeHints( const DexProto* proto)$/;"	f
dvmPointerSetAddEntry	PointerSet.cpp	/^bool dvmPointerSetAddEntry(PointerSet* pSet, const void* ptr)$/;"	f
dvmPointerSetAlloc	PointerSet.cpp	/^PointerSet* dvmPointerSetAlloc(int initialSize)$/;"	f
dvmPointerSetClear	PointerSet.cpp	/^void dvmPointerSetClear(PointerSet* pSet)$/;"	f
dvmPointerSetDump	PointerSet.cpp	/^void dvmPointerSetDump(const PointerSet* pSet)$/;"	f
dvmPointerSetFind	PointerSet.h	/^INLINE int dvmPointerSetFind(const PointerSet* pSet, const void* ptr) {$/;"	f
dvmPointerSetFree	PointerSet.cpp	/^void dvmPointerSetFree(PointerSet* pSet)$/;"	f
dvmPointerSetGetCount	PointerSet.cpp	/^int dvmPointerSetGetCount(const PointerSet* pSet)$/;"	f
dvmPointerSetGetEntry	PointerSet.cpp	/^const void* dvmPointerSetGetEntry(const PointerSet* pSet, int i)$/;"	f
dvmPointerSetHas	PointerSet.cpp	/^bool dvmPointerSetHas(const PointerSet* pSet, const void* ptr, int* pIndex)$/;"	f
dvmPointerSetIntersect	PointerSet.cpp	/^void dvmPointerSetIntersect(PointerSet* pSet, const void** ptrArray, int count)$/;"	f
dvmPointerSetRemoveEntry	PointerSet.cpp	/^bool dvmPointerSetRemoveEntry(PointerSet* pSet, const void* ptr)$/;"	f
dvmPopFrame	interp/Stack.cpp	/^static bool dvmPopFrame(Thread* self)$/;"	f	file:
dvmPopJniLocals	JniInternal.h	/^INLINE void dvmPopJniLocals(Thread* self, StackSaveArea* saveArea)$/;"	f
dvmPopLocalFrame	interp/Stack.cpp	/^bool dvmPopLocalFrame(Thread* self)$/;"	f
dvmPrepForDexOpt	Init.cpp	/^int dvmPrepForDexOpt(const char* bootClassPath, DexOptimizerMode dexOptMode,$/;"	f
dvmPrepMainForJni	Thread.cpp	/^bool dvmPrepMainForJni(JNIEnv* pEnv)$/;"	f
dvmPrepMainThread	Thread.cpp	/^bool dvmPrepMainThread()$/;"	f
dvmPrepareDexInMemory	analysis/DexPrepare.cpp	/^bool dvmPrepareDexInMemory(u1* addr, size_t len, DvmDex** ppDvmDex)$/;"	f
dvmPrimitiveTypeWidth	CheckJni.cpp	/^static int dvmPrimitiveTypeWidth(PrimitiveType primType) {$/;"	f	file:
dvmPrintDebugMessage	Misc.cpp	/^void dvmPrintDebugMessage(const DebugOutputTarget* target, const char* format,$/;"	f
dvmPrintExceptionStackTrace	Exception.cpp	/^void dvmPrintExceptionStackTrace()$/;"	f
dvmPrintHexDump	Misc.h	/^INLINE void dvmPrintHexDump(const void* vaddr, size_t length) {$/;"	f
dvmPrintHexDumpDbg	Misc.h	/^INLINE void dvmPrintHexDumpDbg(const void* vaddr, size_t length,const char* tag)$/;"	f
dvmPrintHexDumpEx	Misc.cpp	/^void dvmPrintHexDumpEx(int priority, const char* tag, const void* vaddr,$/;"	f
dvmPrintNativeBackTrace	Init.cpp	/^void dvmPrintNativeBackTrace() {$/;"	f
dvmPrintNativeBackTrace	Init.cpp	/^void dvmPrintNativeBackTrace()$/;"	f
dvmProfilingShutdown	Profile.cpp	/^void dvmProfilingShutdown()$/;"	f
dvmProfilingStartup	Profile.cpp	/^bool dvmProfilingStartup()$/;"	f
dvmPushInterpFrame	interp/Stack.cpp	/^static bool dvmPushInterpFrame(Thread* self, const Method* method)$/;"	f	file:
dvmPushJNIFrame	interp/Stack.cpp	/^bool dvmPushJNIFrame(Thread* self, const Method* method)$/;"	f
dvmPushLocalFrame	interp/Stack.cpp	/^bool dvmPushLocalFrame(Thread* self, const Method* method)$/;"	f
dvmQuasiAtomicCas64	Atomic.cpp	/^int dvmQuasiAtomicCas64(int64_t oldvalue, int64_t newvalue,$/;"	f
dvmQuasiAtomicRead64	Atomic.cpp	/^int64_t dvmQuasiAtomicRead64(volatile const int64_t* addr)$/;"	f
dvmQuasiAtomicSwap64	Atomic.cpp	/^int64_t dvmQuasiAtomicSwap64(int64_t newvalue, volatile int64_t* addr)$/;"	f
dvmQuasiAtomicSwap64	Atomic.cpp	/^int64_t dvmQuasiAtomicSwap64(int64_t value, volatile int64_t* addr)$/;"	f
dvmQuasiAtomicSwap64Body	Atomic.cpp	/^static inline int64_t dvmQuasiAtomicSwap64Body(int64_t newvalue,$/;"	f	file:
dvmQuasiAtomicSwap64Body	Atomic.cpp	/^static inline int64_t dvmQuasiAtomicSwap64Body(int64_t value,$/;"	f	file:
dvmQuasiAtomicSwap64Sync	Atomic.cpp	/^int64_t dvmQuasiAtomicSwap64Sync(int64_t newvalue, volatile int64_t* addr)$/;"	f
dvmQuasiAtomicSwap64Sync	Atomic.cpp	/^int64_t dvmQuasiAtomicSwap64Sync(int64_t value, volatile int64_t* addr)$/;"	f
dvmRaiseThreadPriorityIfNeeded	Thread.cpp	/^int dvmRaiseThreadPriorityIfNeeded(Thread* thread, int* pSavedThreadPrio,$/;"	f
dvmRawDexFileFree	RawDexFile.cpp	/^void dvmRawDexFileFree(RawDexFile* pRawDexFile)$/;"	f
dvmRawDexFileOpen	RawDexFile.cpp	/^int dvmRawDexFileOpen(const char* fileName, const char* odexOutputName,$/;"	f
dvmRawDexFileOpenArray	RawDexFile.cpp	/^int dvmRawDexFileOpenArray(u1* pBytes, u4 length, RawDexFile** ppRawDexFile)$/;"	f
dvmReadFieldId	jdwp/Jdwp.h	/^INLINE FieldId dvmReadFieldId(const u1** pBuf)      { return read4BE(pBuf); }$/;"	f
dvmReadFrameId	jdwp/Jdwp.h	/^INLINE FrameId dvmReadFrameId(const u1** pBuf)      { return read8BE(pBuf); }$/;"	f
dvmReadMethodId	jdwp/Jdwp.h	/^INLINE MethodId dvmReadMethodId(const u1** pBuf)    { return read4BE(pBuf); }$/;"	f
dvmReadObjectId	jdwp/Jdwp.h	/^INLINE ObjectId dvmReadObjectId(const u1** pBuf)    { return read8BE(pBuf); }$/;"	f
dvmReadRefTypeId	jdwp/Jdwp.h	/^INLINE RefTypeId dvmReadRefTypeId(const u1** pBuf)  { return read8BE(pBuf); }$/;"	f
dvmReferenceTableEntries	ReferenceTable.h	/^INLINE size_t dvmReferenceTableEntries(const ReferenceTable* pRef)$/;"	f
dvmRegisterJNIMethod	Jni.cpp	/^static bool dvmRegisterJNIMethod(ClassObject* clazz, const char* methodName,$/;"	f	file:
dvmRegisterMapDumpStats	analysis/RegisterMap.cpp	/^void dvmRegisterMapDumpStats()$/;"	f
dvmRegisterMapGetClassData	analysis/RegisterMap.cpp	/^const void* dvmRegisterMapGetClassData(const DexFile* pDexFile, u4 classIdx,$/;"	f
dvmRegisterMapGetFormat	analysis/RegisterMap.h	/^INLINE RegisterMapFormat dvmRegisterMapGetFormat(const RegisterMap* pMap) {$/;"	f
dvmRegisterMapGetLine	analysis/RegisterMap.cpp	/^const u1* dvmRegisterMapGetLine(const RegisterMap* pMap, int addr)$/;"	f
dvmRegisterMapGetNext	analysis/RegisterMap.cpp	/^const RegisterMap* dvmRegisterMapGetNext(const void** pPtr)$/;"	f
dvmRegisterMapGetNumEntries	analysis/RegisterMap.h	/^INLINE u2 dvmRegisterMapGetNumEntries(const RegisterMap* pMap) {$/;"	f
dvmRegisterMapGetOnHeap	analysis/RegisterMap.h	/^INLINE bool dvmRegisterMapGetOnHeap(const RegisterMap* pMap) {$/;"	f
dvmRegisterMapGetRegWidth	analysis/RegisterMap.h	/^INLINE u1 dvmRegisterMapGetRegWidth(const RegisterMap* pMap) {$/;"	f
dvmRegisterMapSetFormat	analysis/RegisterMap.h	/^INLINE void dvmRegisterMapSetFormat(RegisterMap* pMap, RegisterMapFormat format)$/;"	f
dvmRegisterMapSetNumEntries	analysis/RegisterMap.h	/^INLINE void dvmRegisterMapSetNumEntries(RegisterMap* pMap, u2 numEntries) {$/;"	f
dvmRegisterMapSetOnHeap	analysis/RegisterMap.h	/^INLINE void dvmRegisterMapSetOnHeap(RegisterMap* pMap, bool val) {$/;"	f
dvmRegisterMapSetRegWidth	analysis/RegisterMap.h	/^INLINE void dvmRegisterMapSetRegWidth(RegisterMap* pMap, int regWidth) {$/;"	f
dvmRegisterMapShutdown	analysis/RegisterMap.cpp	/^void dvmRegisterMapShutdown()$/;"	f
dvmRegisterMapStartup	analysis/RegisterMap.cpp	/^bool dvmRegisterMapStartup()$/;"	f
dvmRelativeCondWait	Sync.cpp	/^int dvmRelativeCondWait(pthread_cond_t* cond, pthread_mutex_t* mutex,$/;"	f
dvmReleaseJniMonitors	Jni.cpp	/^void dvmReleaseJniMonitors(Thread* self) {$/;"	f
dvmReleaseRegisterMapLine	analysis/RegisterMap.h	/^INLINE void dvmReleaseRegisterMapLine(const RegisterMap* pMap, const u1* data)$/;"	f
dvmReleaseTrackedAlloc	alloc/Alloc.cpp	/^void dvmReleaseTrackedAlloc(Object* obj, Thread* self)$/;"	f
dvmRemoveFromReferenceTable	ReferenceTable.cpp	/^bool dvmRemoveFromReferenceTable(ReferenceTable* pRef, Object** bottom,$/;"	f
dvmReportExceptionThrow	interp/Interp.cpp	/^void dvmReportExceptionThrow(Thread* self, Object* exception)$/;"	f
dvmReportInvoke	interp/Interp.cpp	/^void dvmReportInvoke(Thread* self, const Method* methodToCall)$/;"	f
dvmReportPostNativeInvoke	interp/Interp.cpp	/^void dvmReportPostNativeInvoke(const Method* methodToCall, Thread* self, u4* fp)$/;"	f
dvmReportPreNativeInvoke	interp/Interp.cpp	/^void dvmReportPreNativeInvoke(const Method* methodToCall, Thread* self, u4* fp)$/;"	f
dvmReportReturn	interp/Interp.cpp	/^void dvmReportReturn(Thread* self)$/;"	f
dvmResetThreadPriority	Thread.cpp	/^void dvmResetThreadPriority(Thread* thread, int changeFlags,$/;"	f
dvmResolveClass	oo/Resolve.cpp	/^ClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,$/;"	f
dvmResolveInlineNative	InlineNative.cpp	/^Method* dvmResolveInlineNative(int opIndex)$/;"	f
dvmResolveInstField	oo/Resolve.cpp	/^InstField* dvmResolveInstField(const ClassObject* referrer, u4 ifieldIdx)$/;"	f
dvmResolveInterfaceMethod	oo/Resolve.cpp	/^Method* dvmResolveInterfaceMethod(const ClassObject* referrer, u4 methodIdx)$/;"	f
dvmResolveMethod	oo/Resolve.cpp	/^Method* dvmResolveMethod(const ClassObject* referrer, u4 methodIdx,$/;"	f
dvmResolveNativeMethod	Native.cpp	/^void dvmResolveNativeMethod(const u4* args, JValue* pResult,$/;"	f
dvmResolveStaticField	oo/Resolve.cpp	/^StaticField* dvmResolveStaticField(const ClassObject* referrer, u4 sfieldIdx)$/;"	f
dvmResolveString	oo/Resolve.cpp	/^StringObject* dvmResolveString(const ClassObject* referrer, u4 stringIdx)$/;"	f
dvmResumeAllThreads	Thread.cpp	/^void dvmResumeAllThreads(SuspendCause why)$/;"	f
dvmResumeThread	Thread.cpp	/^void dvmResumeThread(Thread* thread)$/;"	f
dvmScavengeRoots	alloc/Copying.cpp	/^void dvmScavengeRoots()  \/* Needs a new name badly *\/$/;"	f
dvmSelfVerificationMemOpDecode	compiler/codegen/arm/Assemble.cpp	/^void dvmSelfVerificationMemOpDecode(int lr, int* sp)$/;"	f
dvmSelfVerificationRestoreState	interp/Jit.cpp	/^void* dvmSelfVerificationRestoreState(const u2* pc, u4* fp,$/;"	f
dvmSelfVerificationSaveState	interp/Jit.cpp	/^void* dvmSelfVerificationSaveState(const u2* pc, u4* fp,$/;"	f
dvmSelfVerificationShadowSpaceAlloc	interp/Jit.cpp	/^void* dvmSelfVerificationShadowSpaceAlloc(Thread* self)$/;"	f
dvmSelfVerificationShadowSpaceFree	interp/Jit.cpp	/^void dvmSelfVerificationShadowSpaceFree(Thread* self)$/;"	f
dvmSetBit	BitVector.cpp	/^void dvmSetBit(BitVector* pBits, unsigned int num)$/;"	f
dvmSetBootPathExtraDex	oo/Class.cpp	/^void dvmSetBootPathExtraDex(DvmDex* pDvmDex)$/;"	f
dvmSetClassSerialNumber	oo/Class.cpp	/^void dvmSetClassSerialNumber(ClassObject* clazz)$/;"	f
dvmSetCloseOnExec	Misc.cpp	/^bool dvmSetCloseOnExec(int fd)$/;"	f
dvmSetException	Exception.h	/^INLINE void dvmSetException(Thread* self, Object* exception)$/;"	f
dvmSetFieldBoolean	oo/ObjectInlines.h	/^INLINE void dvmSetFieldBoolean(Object* obj, int offset, bool val) {$/;"	f
dvmSetFieldBooleanVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldBooleanVolatile(Object* obj, int offset, bool val) {$/;"	f
dvmSetFieldByte	oo/ObjectInlines.h	/^INLINE void dvmSetFieldByte(Object* obj, int offset, s1 val) {$/;"	f
dvmSetFieldByteVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldByteVolatile(Object* obj, int offset, s1 val) {$/;"	f
dvmSetFieldChar	oo/ObjectInlines.h	/^INLINE void dvmSetFieldChar(Object* obj, int offset, u2 val) {$/;"	f
dvmSetFieldCharVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldCharVolatile(Object* obj, int offset, u2 val) {$/;"	f
dvmSetFieldDouble	oo/ObjectInlines.h	/^INLINE void dvmSetFieldDouble(Object* obj, int offset, double val) {$/;"	f
dvmSetFieldDoubleVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldDoubleVolatile(Object* obj, int offset, double val) {$/;"	f
dvmSetFieldFloat	oo/ObjectInlines.h	/^INLINE void dvmSetFieldFloat(Object* obj, int offset, float val) {$/;"	f
dvmSetFieldFloatVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldFloatVolatile(Object* obj, int offset, float val) {$/;"	f
dvmSetFieldId	jdwp/Jdwp.h	/^INLINE void dvmSetFieldId(u1* buf, FieldId val)     { return set4BE(buf, val); }$/;"	f
dvmSetFieldInt	oo/ObjectInlines.h	/^INLINE void dvmSetFieldInt(Object* obj, int offset, s4 val) {$/;"	f
dvmSetFieldIntVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldIntVolatile(Object* obj, int offset, s4 val) {$/;"	f
dvmSetFieldLong	oo/ObjectInlines.h	/^INLINE void dvmSetFieldLong(Object* obj, int offset, s8 val) {$/;"	f
dvmSetFieldLongVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldLongVolatile(Object* obj, int offset, s8 val) {$/;"	f
dvmSetFieldObject	oo/ObjectInlines.h	/^INLINE void dvmSetFieldObject(Object* obj, int offset, Object* val) {$/;"	f
dvmSetFieldObjectVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldObjectVolatile(Object* obj, int offset, Object* val) {$/;"	f
dvmSetFieldShort	oo/ObjectInlines.h	/^INLINE void dvmSetFieldShort(Object* obj, int offset, s2 val) {$/;"	f
dvmSetFieldShortVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetFieldShortVolatile(Object* obj, int offset, s2 val) {$/;"	f
dvmSetFinalizable	alloc/MarkSweep.cpp	/^void dvmSetFinalizable(Object *obj)$/;"	f
dvmSetFrameId	jdwp/Jdwp.h	/^INLINE void dvmSetFrameId(u1* buf, FrameId val)     { return set8BE(buf, val); }$/;"	f
dvmSetInitialBits	BitVector.cpp	/^void dvmSetInitialBits(BitVector* pBits, unsigned int numBits)$/;"	f
dvmSetJniEnvThreadId	JniInternal.h	/^INLINE void dvmSetJniEnvThreadId(JNIEnv* pEnv, Thread* self)$/;"	f
dvmSetMethodId	jdwp/Jdwp.h	/^INLINE void dvmSetMethodId(u1* buf, MethodId val)   { return set4BE(buf, val); }$/;"	f
dvmSetNativeFunc	oo/Class.cpp	/^void dvmSetNativeFunc(Method* method, DalvikBridgeFunc func,$/;"	f
dvmSetObjectArrayElement	oo/ObjectInlines.h	/^INLINE void dvmSetObjectArrayElement(const ArrayObject* obj, int index,$/;"	f
dvmSetObjectId	jdwp/Jdwp.h	/^INLINE void dvmSetObjectId(u1* buf, ObjectId val)   { return set8BE(buf, val); }$/;"	f
dvmSetRefTypeId	jdwp/Jdwp.h	/^INLINE void dvmSetRefTypeId(u1* buf, RefTypeId val) { return set8BE(buf, val); }$/;"	f
dvmSetRegisterMap	oo/Class.cpp	/^void dvmSetRegisterMap(Method* method, const RegisterMap* pMap)$/;"	f
dvmSetStaticFieldBoolean	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldBoolean(StaticField* sfield, bool val) {$/;"	f
dvmSetStaticFieldBooleanVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldBooleanVolatile(StaticField* sfield, bool val) {$/;"	f
dvmSetStaticFieldByte	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldByte(StaticField* sfield, s1 val) {$/;"	f
dvmSetStaticFieldByteVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldByteVolatile(StaticField* sfield, s1 val) {$/;"	f
dvmSetStaticFieldChar	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldChar(StaticField* sfield, u2 val) {$/;"	f
dvmSetStaticFieldCharVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldCharVolatile(StaticField* sfield, u2 val) {$/;"	f
dvmSetStaticFieldDouble	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldDouble(StaticField* sfield, double val) {$/;"	f
dvmSetStaticFieldDoubleVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldDoubleVolatile(StaticField* sfield, double val) {$/;"	f
dvmSetStaticFieldFloat	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldFloat(StaticField* sfield, float val) {$/;"	f
dvmSetStaticFieldFloatVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldFloatVolatile(StaticField* sfield, float val) {$/;"	f
dvmSetStaticFieldInt	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldInt(StaticField* sfield, s4 val) {$/;"	f
dvmSetStaticFieldIntVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldIntVolatile(StaticField* sfield, s4 val) {$/;"	f
dvmSetStaticFieldLong	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldLong(StaticField* sfield, s8 val) {$/;"	f
dvmSetStaticFieldLongVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldLongVolatile(StaticField* sfield, s8 val) {$/;"	f
dvmSetStaticFieldObject	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldObject(StaticField* sfield, Object* val) {$/;"	f
dvmSetStaticFieldObjectVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldObjectVolatile(StaticField* sfield, Object* val) {$/;"	f
dvmSetStaticFieldShort	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldShort(StaticField* sfield, s2 val) {$/;"	f
dvmSetStaticFieldShortVolatile	oo/ObjectInlines.h	/^INLINE void dvmSetStaticFieldShortVolatile(StaticField* sfield, s2 val) {$/;"	f
dvmSetTargetHeapUtilization	alloc/Copying.cpp	/^void dvmSetTargetHeapUtilization(float newTarget)$/;"	f
dvmSetTargetHeapUtilization	alloc/HeapSource.cpp	/^void dvmSetTargetHeapUtilization(float newTarget)$/;"	f
dvmSetThreadJNIEnv	Thread.h	/^INLINE void dvmSetThreadJNIEnv(Thread* self, JNIEnv* env) { self->jniEnv = env;}$/;"	f
dvmShutdown	Init.cpp	/^void dvmShutdown()$/;"	f
dvmSignalCatcherShutdown	SignalCatcher.cpp	/^void dvmSignalCatcherShutdown()$/;"	f
dvmSignalCatcherStartup	SignalCatcher.cpp	/^bool dvmSignalCatcherStartup()$/;"	f
dvmSignalCond	Thread.h	/^INLINE void dvmSignalCond(pthread_cond_t* pCond)$/;"	f
dvmSlayDaemons	Thread.cpp	/^void dvmSlayDaemons()$/;"	f
dvmSlotToField	reflect/Reflect.cpp	/^Field* dvmSlotToField(ClassObject* clazz, int slot)$/;"	f
dvmSlotToMethod	reflect/Reflect.cpp	/^Method* dvmSlotToMethod(ClassObject* clazz, int slot)$/;"	f
dvmStartAllocCounting	Profile.cpp	/^void dvmStartAllocCounting()$/;"	f
dvmStartInstructionCounting	Profile.cpp	/^void dvmStartInstructionCounting()$/;"	f
dvmStartup	Init.cpp	/^std::string dvmStartup(int argc, const char* const argv[],$/;"	f
dvmStaticFieldPtr	oo/ObjectInlines.h	/^INLINE JValue* dvmStaticFieldPtr(const StaticField* sfield) {$/;"	f
dvmStdioConverterShutdown	StdioConverter.cpp	/^void dvmStdioConverterShutdown()$/;"	f
dvmStdioConverterStartup	StdioConverter.cpp	/^bool dvmStdioConverterStartup()$/;"	f
dvmStopAllocCounting	Profile.cpp	/^void dvmStopAllocCounting()$/;"	f
dvmStopInstructionCounting	Profile.cpp	/^void dvmStopInstructionCounting()$/;"	f
dvmStringInternShutdown	Intern.cpp	/^void dvmStringInternShutdown()$/;"	f
dvmStringInternStartup	Intern.cpp	/^bool dvmStringInternStartup()$/;"	f
dvmSuspendAllThreads	Thread.cpp	/^void dvmSuspendAllThreads(SuspendCause why)$/;"	f
dvmSuspendSelf	Thread.cpp	/^void dvmSuspendSelf(bool jdwpActivity)$/;"	f
dvmSuspendThread	Thread.cpp	/^void dvmSuspendThread(Thread* thread)$/;"	f
dvmSweepMonitorList	Sync.cpp	/^void dvmSweepMonitorList(Monitor** mon, int (*isUnmarkedObject)(void*))$/;"	f
dvmTestAtomicSpeed	test/AtomicTest.cpp	/^bool dvmTestAtomicSpeed()$/;"	f
dvmTestHash	test/TestHash.cpp	/^bool dvmTestHash()$/;"	f
dvmTestIndirectRefTable	test/TestIndirectRefTable.cpp	/^bool dvmTestIndirectRefTable()$/;"	f
dvmThreadInterrupt	Sync.cpp	/^void dvmThreadInterrupt(Thread* thread)$/;"	f
dvmThreadSelf	Thread.cpp	/^Thread* dvmThreadSelf()$/;"	f
dvmThreadShutdown	Thread.cpp	/^void dvmThreadShutdown()$/;"	f
dvmThreadSleep	Sync.cpp	/^void dvmThreadSleep(u8 msec, u4 nsec)$/;"	f
dvmThreadStartup	Thread.cpp	/^bool dvmThreadStartup()$/;"	f
dvmThrowAbstractMethodError	Exception.cpp	/^void dvmThrowAbstractMethodError(const char* msg) {$/;"	f
dvmThrowArithmeticException	Exception.cpp	/^void dvmThrowArithmeticException(const char* msg) {$/;"	f
dvmThrowArrayIndexOutOfBoundsException	Exception.cpp	/^void dvmThrowArrayIndexOutOfBoundsException(int length, int index)$/;"	f
dvmThrowArrayStoreExceptionIncompatibleArrayElement	Exception.cpp	/^void dvmThrowArrayStoreExceptionIncompatibleArrayElement(s4 index, ClassObject* objectType,$/;"	f
dvmThrowArrayStoreExceptionIncompatibleArrays	Exception.cpp	/^void dvmThrowArrayStoreExceptionIncompatibleArrays(ClassObject* source, ClassObject* destination)$/;"	f
dvmThrowArrayStoreExceptionIncompatibleElement	Exception.cpp	/^void dvmThrowArrayStoreExceptionIncompatibleElement(ClassObject* objectType,$/;"	f
dvmThrowArrayStoreExceptionNotArray	Exception.cpp	/^void dvmThrowArrayStoreExceptionNotArray(ClassObject* actual, const char* label) {$/;"	f
dvmThrowChainedClassNotFoundException	Exception.cpp	/^void dvmThrowChainedClassNotFoundException(const char* name, Object* cause) {$/;"	f
dvmThrowChainedException	Exception.cpp	/^void dvmThrowChainedException(ClassObject* excepClass, const char* msg,$/;"	f
dvmThrowChainedExceptionWithClassMessage	Exception.cpp	/^void dvmThrowChainedExceptionWithClassMessage($/;"	f
dvmThrowChainedNoClassDefFoundError	Exception.cpp	/^void dvmThrowChainedNoClassDefFoundError(const char* descriptor,$/;"	f
dvmThrowClassCastException	Exception.cpp	/^void dvmThrowClassCastException(ClassObject* actual, ClassObject* desired)$/;"	f
dvmThrowClassCircularityError	Exception.cpp	/^void dvmThrowClassCircularityError(const char* descriptor) {$/;"	f
dvmThrowClassFormatError	Exception.cpp	/^void dvmThrowClassFormatError(const char* msg) {$/;"	f
dvmThrowClassNotFoundException	Exception.cpp	/^void dvmThrowClassNotFoundException(const char* name) {$/;"	f
dvmThrowException	Exception.h	/^INLINE void dvmThrowException(ClassObject* exceptionClass,$/;"	f
dvmThrowExceptionFmt	Exception.h	/^INLINE void dvmThrowExceptionFmt(ClassObject* exceptionClass,$/;"	f
dvmThrowExceptionFmtV	Exception.cpp	/^void dvmThrowExceptionFmtV(ClassObject* exceptionClass,$/;"	f
dvmThrowExceptionInInitializerError	Exception.cpp	/^void dvmThrowExceptionInInitializerError()$/;"	f
dvmThrowExceptionWithClassMessage	Exception.h	/^INLINE void dvmThrowExceptionWithClassMessage($/;"	f
dvmThrowFileNotFoundException	Exception.cpp	/^void dvmThrowFileNotFoundException(const char* msg) {$/;"	f
dvmThrowIOException	Exception.cpp	/^void dvmThrowIOException(const char* msg) {$/;"	f
dvmThrowIllegalAccessError	Exception.cpp	/^void dvmThrowIllegalAccessError(const char* msg) {$/;"	f
dvmThrowIllegalAccessException	Exception.cpp	/^void dvmThrowIllegalAccessException(const char* msg) {$/;"	f
dvmThrowIllegalArgumentException	Exception.cpp	/^void dvmThrowIllegalArgumentException(const char* msg) {$/;"	f
dvmThrowIllegalMonitorStateException	Exception.cpp	/^void dvmThrowIllegalMonitorStateException(const char* msg) {$/;"	f
dvmThrowIllegalStateException	Exception.cpp	/^void dvmThrowIllegalStateException(const char* msg) {$/;"	f
dvmThrowIllegalThreadStateException	Exception.cpp	/^void dvmThrowIllegalThreadStateException(const char* msg) {$/;"	f
dvmThrowIncompatibleClassChangeError	Exception.cpp	/^void dvmThrowIncompatibleClassChangeError(const char* msg) {$/;"	f
dvmThrowIncompatibleClassChangeErrorWithClassMessage	Exception.cpp	/^void dvmThrowIncompatibleClassChangeErrorWithClassMessage($/;"	f
dvmThrowInstantiationException	Exception.cpp	/^void dvmThrowInstantiationException(ClassObject* clazz, const char* extraDetail) {$/;"	f
dvmThrowInternalError	Exception.cpp	/^void dvmThrowInternalError(const char* msg) {$/;"	f
dvmThrowInterruptedException	Exception.cpp	/^void dvmThrowInterruptedException(const char* msg) {$/;"	f
dvmThrowLinkageError	Exception.cpp	/^void dvmThrowLinkageError(const char* msg) {$/;"	f
dvmThrowNegativeArraySizeException	Exception.cpp	/^void dvmThrowNegativeArraySizeException(s4 size) {$/;"	f
dvmThrowNoClassDefFoundError	Exception.cpp	/^void dvmThrowNoClassDefFoundError(const char* descriptor) {$/;"	f
dvmThrowNoSuchFieldError	Exception.cpp	/^void dvmThrowNoSuchFieldError(const char* msg) {$/;"	f
dvmThrowNoSuchFieldException	Exception.cpp	/^void dvmThrowNoSuchFieldException(const char* msg) {$/;"	f
dvmThrowNoSuchMethodError	Exception.cpp	/^void dvmThrowNoSuchMethodError(const char* msg) {$/;"	f
dvmThrowNullPointerException	Exception.cpp	/^void dvmThrowNullPointerException(const char* msg) {$/;"	f
dvmThrowOutOfMemoryError	Exception.cpp	/^void dvmThrowOutOfMemoryError(const char* msg) {$/;"	f
dvmThrowRuntimeException	Exception.cpp	/^void dvmThrowRuntimeException(const char* msg) {$/;"	f
dvmThrowStaleDexCacheError	Exception.cpp	/^void dvmThrowStaleDexCacheError(const char* msg) {$/;"	f
dvmThrowStringIndexOutOfBoundsExceptionWithIndex	Exception.cpp	/^void dvmThrowStringIndexOutOfBoundsExceptionWithIndex(jsize stringLength,$/;"	f
dvmThrowStringIndexOutOfBoundsExceptionWithRegion	Exception.cpp	/^void dvmThrowStringIndexOutOfBoundsExceptionWithRegion(jsize stringLength,$/;"	f
dvmThrowTypeNotPresentException	Exception.cpp	/^void dvmThrowTypeNotPresentException(const char* descriptor) {$/;"	f
dvmThrowUnsatisfiedLinkError	Exception.cpp	/^void dvmThrowUnsatisfiedLinkError(const char* msg) {$/;"	f
dvmThrowUnsatisfiedLinkError	Exception.cpp	/^void dvmThrowUnsatisfiedLinkError(const char* msg, const Method* method) {$/;"	f
dvmThrowUnsupportedOperationException	Exception.cpp	/^void dvmThrowUnsupportedOperationException(const char* msg) {$/;"	f
dvmThrowVerificationError	interp/Interp.cpp	/^void dvmThrowVerificationError(const Method* method, int kind, int ref)$/;"	f
dvmThrowVerifyError	Exception.cpp	/^void dvmThrowVerifyError(const char* descriptor) {$/;"	f
dvmThrowVirtualMachineError	Exception.cpp	/^void dvmThrowVirtualMachineError(const char* msg) {$/;"	f
dvmTrackAllocation	AllocTracker.h	41;"	d
dvmTrackExternalAllocation	alloc/Copying.cpp	/^bool dvmTrackExternalAllocation(size_t n)$/;"	f
dvmTrackExternalFree	alloc/Copying.cpp	/^void dvmTrackExternalFree(size_t n)$/;"	f
dvmTryLockMutex	Thread.h	/^INLINE int dvmTryLockMutex(pthread_mutex_t* pMutex)$/;"	f
dvmTryLockThreadList	Thread.cpp	/^bool dvmTryLockThreadList()$/;"	f
dvmU4ToFloat	Misc.h	/^INLINE float dvmU4ToFloat(u4 val) {$/;"	f
dvmUnboxObjectArray	oo/Array.cpp	/^bool dvmUnboxObjectArray(ArrayObject* dstArray, const ArrayObject* srcArray,$/;"	f
dvmUnboxPrimitive	reflect/Reflect.cpp	/^bool dvmUnboxPrimitive(Object* value, ClassObject* returnType,$/;"	f
dvmUndoDebuggerSuspensions	Thread.cpp	/^void dvmUndoDebuggerSuspensions()$/;"	f
dvmUnifyBitVectors	BitVector.cpp	/^bool dvmUnifyBitVectors(BitVector *dest, const BitVector *src1,$/;"	f
dvmUnlockCachedDexFile	analysis/DexPrepare.cpp	/^bool dvmUnlockCachedDexFile(int fd)$/;"	f
dvmUnlockHeap	alloc/Heap.cpp	/^void dvmUnlockHeap()$/;"	f
dvmUnlockMutex	Thread.h	/^INLINE void dvmUnlockMutex(pthread_mutex_t* pMutex)$/;"	f
dvmUnlockObject	Sync.cpp	/^bool dvmUnlockObject(Thread* self, Object *obj)$/;"	f
dvmUnlockThreadList	Thread.cpp	/^void dvmUnlockThreadList()$/;"	f
dvmUnregisterJNINativeMethods	Native.cpp	/^void dvmUnregisterJNINativeMethods(ClassObject* clazz)$/;"	f
dvmUpdateAtomicCache	AtomicCache.cpp	/^void dvmUpdateAtomicCache(u4 key1, u4 key2, u4 value, AtomicCacheEntry* pEntry,$/;"	f
dvmUpdateCodeUnit	analysis/Optimize.cpp	/^void dvmUpdateCodeUnit(const Method* meth, u2* ptr, u2 newVal)$/;"	f
dvmUseCheckedJniEnv	CheckJni.cpp	/^void dvmUseCheckedJniEnv(JNIEnvExt* pEnv) {$/;"	f
dvmUseCheckedJniVm	CheckJni.cpp	/^void dvmUseCheckedJniVm(JavaVMExt* pVm) {$/;"	f
dvmUseJNIBridge	Jni.cpp	/^void dvmUseJNIBridge(Method* method, void* func) {$/;"	f
dvmUtf8Len	UtfString.cpp	/^size_t dvmUtf8Len(const char* utf8Str)$/;"	f
dvmValidateBoxClasses	reflect/Reflect.cpp	/^bool dvmValidateBoxClasses()$/;"	f
dvmVerifyBitmap	alloc/Verify.cpp	/^void dvmVerifyBitmap(const HeapBitmap *bitmap)$/;"	f
dvmVerifyCardTable	alloc/CardTable.cpp	/^void dvmVerifyCardTable()$/;"	f
dvmVerifyClass	analysis/DexVerify.cpp	/^bool dvmVerifyClass(ClassObject* clazz)$/;"	f
dvmVerifyCodeFlow	analysis/CodeVerify.cpp	/^bool dvmVerifyCodeFlow(VerifierData* vdata)$/;"	f
dvmVerifyObject	alloc/Verify.cpp	/^void dvmVerifyObject(const Object *obj)$/;"	f
dvmVerifyObjectInClass	native/InternalNative.cpp	/^bool dvmVerifyObjectInClass(Object* obj, ClassObject* clazz) {$/;"	f
dvmVerifyRoots	alloc/Verify.cpp	/^void dvmVerifyRoots()$/;"	f
dvmVisitObject	alloc/Visit.cpp	/^void dvmVisitObject(Visitor *visitor, Object *obj, void *arg)$/;"	f
dvmVisitRoots	alloc/Visit.cpp	/^void dvmVisitRoots(RootVisitor *visitor, void *arg)$/;"	f
dvmWaitCond	Thread.h	/^INLINE void dvmWaitCond(pthread_cond_t* pCond, pthread_mutex_t* pMutex)$/;"	f
dvmWaitForConcurrentGcToComplete	alloc/Heap.cpp	/^void dvmWaitForConcurrentGcToComplete()$/;"	f
dvmWaitForSuspend	Thread.cpp	/^void dvmWaitForSuspend(Thread* thread)$/;"	f
dvmWantVerboseVerification	analysis/VerifySubs.cpp	/^bool dvmWantVerboseVerification(const Method* meth)$/;"	f
dvmWrapException	Exception.cpp	/^void dvmWrapException(const char* newExcepStr)$/;"	f
dvmWriteBarrierArray	alloc/WriteBarrier.h	/^INLINE void dvmWriteBarrierArray(const ArrayObject *obj,$/;"	f
dvmWriteBarrierField	alloc/WriteBarrier.h	/^INLINE void dvmWriteBarrierField(const Object *obj, void *addr)$/;"	f
dvmWriteBarrierObject	alloc/WriteBarrier.h	/^INLINE void dvmWriteBarrierObject(const Object *obj)$/;"	f
dvm_arch	Android.mk	/^    dvm_arch := $(HOST_ARCH)$/;"	m
dvm_arch	ReconfigureDvm.mk	/^dvm_arch := $(TARGET_ARCH)$/;"	m
dvm_arch_variant	Android.mk	/^    dvm_arch_variant := $(HOST_ARCH)$/;"	m
dvm_arch_variant	ReconfigureDvm.mk	/^dvm_arch_variant := $(TARGET_ARCH_VARIANT)$/;"	m
dvm_arch_variant	ReconfigureDvm.mk	/^dvm_arch_variant := x86$/;"	m
dvm_ch_usi_dag_dislre_AREDispatch	native/Test.cpp	/^const DalvikNativeMethod dvm_ch_usi_dag_dislre_AREDispatch[] = {$/;"	v
dvm_dalvik_bytecode_OpcodeInfo	native/dalvik_bytecode_OpcodeInfo.cpp	/^const DalvikNativeMethod dvm_dalvik_bytecode_OpcodeInfo[] = {$/;"	v
dvm_dalvik_system_DexFile	native/dalvik_system_DexFile.cpp	/^const DalvikNativeMethod dvm_dalvik_system_DexFile[] = {$/;"	v
dvm_dalvik_system_VMDebug	native/dalvik_system_VMDebug.cpp	/^const DalvikNativeMethod dvm_dalvik_system_VMDebug[] = {$/;"	v
dvm_dalvik_system_VMRuntime	native/dalvik_system_VMRuntime.cpp	/^const DalvikNativeMethod dvm_dalvik_system_VMRuntime[] = {$/;"	v
dvm_dalvik_system_VMStack	native/dalvik_system_VMStack.cpp	/^const DalvikNativeMethod dvm_dalvik_system_VMStack[] = {$/;"	v
dvm_dalvik_system_Zygote	native/dalvik_system_Zygote.cpp	/^const DalvikNativeMethod dvm_dalvik_system_Zygote[] = {$/;"	v
dvm_java_lang_Class	native/java_lang_Class.cpp	/^const DalvikNativeMethod dvm_java_lang_Class[] = {$/;"	v
dvm_java_lang_Double	native/java_lang_Double.cpp	/^const DalvikNativeMethod dvm_java_lang_Double[] = {$/;"	v
dvm_java_lang_Float	native/java_lang_Float.cpp	/^const DalvikNativeMethod dvm_java_lang_Float[] = {$/;"	v
dvm_java_lang_Math	native/java_lang_Math.cpp	/^const DalvikNativeMethod dvm_java_lang_Math[] = {$/;"	v
dvm_java_lang_Object	native/java_lang_Object.cpp	/^const DalvikNativeMethod dvm_java_lang_Object[] = {$/;"	v
dvm_java_lang_Runtime	native/java_lang_Runtime.cpp	/^const DalvikNativeMethod dvm_java_lang_Runtime[] = {$/;"	v
dvm_java_lang_String	native/java_lang_String.cpp	/^const DalvikNativeMethod dvm_java_lang_String[] = {$/;"	v
dvm_java_lang_System	native/java_lang_System.cpp	/^const DalvikNativeMethod dvm_java_lang_System[] = {$/;"	v
dvm_java_lang_Throwable	native/java_lang_Throwable.cpp	/^const DalvikNativeMethod dvm_java_lang_Throwable[] = {$/;"	v
dvm_java_lang_VMClassLoader	native/java_lang_VMClassLoader.cpp	/^const DalvikNativeMethod dvm_java_lang_VMClassLoader[] = {$/;"	v
dvm_java_lang_VMThread	native/java_lang_VMThread.cpp	/^const DalvikNativeMethod dvm_java_lang_VMThread[] = {$/;"	v
dvm_java_lang_reflect_AccessibleObject	native/java_lang_reflect_AccessibleObject.cpp	/^const DalvikNativeMethod dvm_java_lang_reflect_AccessibleObject[] = {$/;"	v
dvm_java_lang_reflect_Array	native/java_lang_reflect_Array.cpp	/^const DalvikNativeMethod dvm_java_lang_reflect_Array[] = {$/;"	v
dvm_java_lang_reflect_Constructor	native/java_lang_reflect_Constructor.cpp	/^const DalvikNativeMethod dvm_java_lang_reflect_Constructor[] = {$/;"	v
dvm_java_lang_reflect_Field	native/java_lang_reflect_Field.cpp	/^const DalvikNativeMethod dvm_java_lang_reflect_Field[] = {$/;"	v
dvm_java_lang_reflect_Method	native/java_lang_reflect_Method.cpp	/^const DalvikNativeMethod dvm_java_lang_reflect_Method[] = {$/;"	v
dvm_java_lang_reflect_Proxy	native/java_lang_reflect_Proxy.cpp	/^const DalvikNativeMethod dvm_java_lang_reflect_Proxy[] = {$/;"	v
dvm_java_util_concurrent_atomic_AtomicLong	native/java_util_concurrent_atomic_AtomicLong.cpp	/^const DalvikNativeMethod dvm_java_util_concurrent_atomic_AtomicLong[] = {$/;"	v
dvm_make_debug_vm	Dvm.mk	/^  dvm_make_debug_vm := $(DEBUG_DALVIK_VM)$/;"	m
dvm_make_debug_vm	Dvm.mk	/^dvm_make_debug_vm := false$/;"	m
dvm_org_apache_harmony_dalvik_NativeTestTarget	native/org_apache_harmony_dalvik_NativeTestTarget.cpp	/^const DalvikNativeMethod dvm_org_apache_harmony_dalvik_NativeTestTarget[] =$/;"	v
dvm_org_apache_harmony_dalvik_ddmc_DdmServer	native/org_apache_harmony_dalvik_ddmc_DdmServer.cpp	/^const DalvikNativeMethod dvm_org_apache_harmony_dalvik_ddmc_DdmServer[] = {$/;"	v
dvm_org_apache_harmony_dalvik_ddmc_DdmVmInternal	native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cpp	/^const DalvikNativeMethod dvm_org_apache_harmony_dalvik_ddmc_DdmVmInternal[] = {$/;"	v
dvm_os	Android.mk	/^    dvm_os := $(HOST_OS)$/;"	m
dvm_os	ReconfigureDvm.mk	/^dvm_os := $(TARGET_OS)$/;"	m
dvm_sun_misc_Unsafe	native/sun_misc_Unsafe.cpp	/^const DalvikNativeMethod dvm_sun_misc_Unsafe[] = {$/;"	v
elapsedSeconds	test/TestIndirectRefTable.cpp	/^    float elapsedSeconds() {$/;"	f	class:Stopwatch
elemList	compiler/CompilerUtility.h	/^    intptr_t *elemList;$/;"	m	struct:GrowableList
elementClass	oo/Object.h	/^    ClassObject*    elementClass;$/;"	m	struct:ClassObject
elementsLeft	reflect/Reflect.h	/^    u4 elementsLeft;                     \/* number of elements left to read *\/$/;"	m	struct:EncodedArrayIterator
emitAlign	mterp/gen-mterp.py	/^def emitAlign():$/;"	f
emitAsmHeader	compiler/template/gen-template.py	/^def emitAsmHeader(outfp, dict):$/;"	f
emitAsmHeader	mterp/gen-mterp.py	/^def emitAsmHeader(outfp, dict, prefix):$/;"	f
emitAsmStub	compiler/template/gen-template.py	/^def emitAsmStub(outfp, dict):$/;"	f
emitAsmStub	mterp/gen-mterp.py	/^def emitAsmStub(outfp, dict):$/;"	f
emitJmpTable	mterp/gen-mterp.py	/^def emitJmpTable(start_label, prefix):$/;"	f
emitSectionComment	compiler/template/gen-template.py	/^def emitSectionComment(str, fp):$/;"	f
emitSectionComment	mterp/gen-mterp.py	/^def emitSectionComment(str, fp):$/;"	f
emptyAnnoArray	reflect/Annotation.cpp	/^static ArrayObject* emptyAnnoArray()$/;"	f	file:
emptyAnnoArrayArray	reflect/Annotation.cpp	/^static ArrayObject* emptyAnnoArrayArray(int numElements)$/;"	f	file:
emulatorTraceEnableCount	Globals.h	/^    int         emulatorTraceEnableCount;$/;"	m	struct:DvmGlobals
emulatorTracePage	Globals.h	/^    void*       emulatorTracePage;$/;"	m	struct:DvmGlobals
enable	Globals.h	/^    bool    enable;             \/* enable or disable *\/$/;"	m	struct:AssertionControl
enableAssertions	Init.cpp	/^static bool enableAssertions(const char* pkgOrClass, bool enable)$/;"	f	file:
enableDebugFeatures	native/dalvik_system_Zygote.cpp	/^static void enableDebugFeatures(u4 debugFlags)$/;"	f	file:
enabled	Profile.h	/^    bool    enabled;            \/\/ is allocation tracking enabled?$/;"	m	struct:AllocProfState
encodeImmDouble	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int encodeImmDouble(int valLo, int valHi)$/;"	f	file:
encodeImmDoubleHigh	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int encodeImmDoubleHigh(int value)$/;"	f	file:
encodeImmSingle	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int encodeImmSingle(int value)$/;"	f	file:
encodeShift	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int encodeShift(int code, int amount) {$/;"	f	file:
encodedArray	reflect/Reflect.h	/^    const DexEncodedArray* encodedArray; \/* instance being iterated over *\/$/;"	m	struct:EncodedArrayIterator
end	IndirectRefTable.h	/^    iterator end() {$/;"	f	struct:IndirectRefTable
end	compiler/codegen/arm/ArmLIR.h	/^        int end;   \/* end for kFmtBitBlt, 1-bit slice end for FP regs *\/$/;"	m	struct:ArmEncodingMap::__anon39
endConditionReg	compiler/Loop.h	/^    int endConditionReg;                \/\/ vB in "vA op vB"$/;"	m	struct:LoopAnalysis
endPC	interp/Jit.h	/^    const u2* endPC;            \/* ending pc of jitted region *\/$/;"	m	struct:ShadowSpace
endShadowFP	interp/Jit.h	/^    const void* endShadowFP;    \/* ending fp in shadow space *\/$/;"	m	struct:ShadowSpace
enqueueBlock	alloc/Copying.cpp	/^static void enqueueBlock(HeapSource *heapSource, size_t block)$/;"	f	file:
enqueueFinalizerReferences	alloc/MarkSweep.cpp	/^static void enqueueFinalizerReferences(Object **list)$/;"	f	file:
enqueuePendingReference	alloc/MarkSweep.cpp	/^static void enqueuePendingReference(Object *ref, Object **list)$/;"	f	file:
enqueueReference	alloc/Copying.cpp	/^static void enqueueReference(Object *ref)$/;"	f	file:
enqueueReference	alloc/MarkSweep.cpp	/^static void enqueueReference(Object *ref)$/;"	f	file:
ensureLocalCapacity	Jni.cpp	/^static bool ensureLocalCapacity(Thread* self, int capacity) {$/;"	f	file:
ensureSpace	jdwp/ExpandBuf.cpp	/^static void ensureSpace(ExpandBuf* pBuf, int newCount)$/;"	f	file:
entries	AtomicCache.h	/^    AtomicCacheEntry*   entries;        \/* array of entries *\/$/;"	m	struct:AtomicCache
entryAlloc	AtomicCache.h	/^    void*       entryAlloc;             \/* memory allocated for entries *\/$/;"	m	struct:AtomicCache
entryBlock	compiler/CompilerIR.h	/^    BasicBlock *entryBlock;$/;"	m	struct:CompilationUnit
env	shadowlib/ReAgent.cpp	/^	JNIEnv* env;$/;"	m	union:__anon36	file:
envList	JniInternal.h	/^    JNIEnvExt*      envList;$/;"	m	struct:JavaVMExt
envListLock	JniInternal.h	/^    pthread_mutex_t envListLock;$/;"	m	struct:JavaVMExt
envThreadId	JniInternal.h	/^    u4      envThreadId;$/;"	m	struct:JNIEnvExt
equals	IndirectRefTable.h	/^    bool equals(const iref_iterator& rhs) const {$/;"	f	class:iref_iterator
err	Debugger.h	/^    JdwpError err;$/;"	m	struct:DebugInvokeReq
establish	jdwp/JdwpPriv.h	/^    bool (*establish)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
establishConnection	jdwp/JdwpAdb.cpp	/^static bool establishConnection(struct JdwpState* state)$/;"	f	file:
establishConnection	jdwp/JdwpSocket.cpp	/^static bool establishConnection(JdwpState* state)$/;"	f	file:
evalLocWide	compiler/codegen/RallocUtil.cpp	/^static RegLocation evalLocWide(CompilationUnit *cUnit, RegLocation loc,$/;"	f	file:
eventFinish	jdwp/JdwpEvent.cpp	/^static void eventFinish(JdwpState* state, ExpandBuf* pReq)$/;"	f	file:
eventKind	jdwp/JdwpEvent.h	/^    JdwpEventKind eventKind;      \/* what kind of event is this? *\/$/;"	m	struct:JdwpEvent
eventList	jdwp/JdwpPriv.h	/^    JdwpEvent*      eventList;      \/* linked list of events *\/$/;"	m	struct:JdwpState
eventLock	jdwp/JdwpPriv.h	/^    pthread_mutex_t eventLock;      \/* guards numEvents\/eventList *\/$/;"	m	struct:JdwpState
eventPrep	jdwp/JdwpEvent.cpp	/^static ExpandBuf* eventPrep()$/;"	f	file:
eventSerial	jdwp/JdwpPriv.h	/^    u4              eventSerial;$/;"	m	struct:JdwpState
eventThreadCond	jdwp/JdwpPriv.h	/^    pthread_cond_t  eventThreadCond;$/;"	m	struct:JdwpState
eventThreadId	jdwp/JdwpPriv.h	/^    ObjectId        eventThreadId;$/;"	m	struct:JdwpState
eventThreadLock	jdwp/JdwpPriv.h	/^    pthread_mutex_t eventThreadLock;$/;"	m	struct:JdwpState
event_count	shadowlib/ReQueue.h	/^		jint event_count; \/\/ count how many events accumulated$/;"	m	class:ReQueue
exAbstractMethodError	Globals.h	/^    ClassObject* exAbstractMethodError;$/;"	m	struct:DvmGlobals
exArithmeticException	Globals.h	/^    ClassObject* exArithmeticException;$/;"	m	struct:DvmGlobals
exArrayIndexOutOfBoundsException	Globals.h	/^    ClassObject* exArrayIndexOutOfBoundsException;$/;"	m	struct:DvmGlobals
exArrayStoreException	Globals.h	/^    ClassObject* exArrayStoreException;$/;"	m	struct:DvmGlobals
exClassCastException	Globals.h	/^    ClassObject* exClassCastException;$/;"	m	struct:DvmGlobals
exClassCircularityError	Globals.h	/^    ClassObject* exClassCircularityError;$/;"	m	struct:DvmGlobals
exClassFormatError	Globals.h	/^    ClassObject* exClassFormatError;$/;"	m	struct:DvmGlobals
exClassNotFoundException	Globals.h	/^    ClassObject* exClassNotFoundException;$/;"	m	struct:DvmGlobals
exError	Globals.h	/^    ClassObject* exError;$/;"	m	struct:DvmGlobals
exExceptionInInitializerError	Globals.h	/^    ClassObject* exExceptionInInitializerError;$/;"	m	struct:DvmGlobals
exFileNotFoundException	Globals.h	/^    ClassObject* exFileNotFoundException; \/* in java.io *\/$/;"	m	struct:DvmGlobals
exIOException	Globals.h	/^    ClassObject* exIOException;           \/* in java.io *\/$/;"	m	struct:DvmGlobals
exIllegalAccessError	Globals.h	/^    ClassObject* exIllegalAccessError;$/;"	m	struct:DvmGlobals
exIllegalAccessException	Globals.h	/^    ClassObject* exIllegalAccessException;$/;"	m	struct:DvmGlobals
exIllegalArgumentException	Globals.h	/^    ClassObject* exIllegalArgumentException;$/;"	m	struct:DvmGlobals
exIllegalMonitorStateException	Globals.h	/^    ClassObject* exIllegalMonitorStateException;$/;"	m	struct:DvmGlobals
exIllegalStateException	Globals.h	/^    ClassObject* exIllegalStateException;$/;"	m	struct:DvmGlobals
exIllegalThreadStateException	Globals.h	/^    ClassObject* exIllegalThreadStateException;$/;"	m	struct:DvmGlobals
exIncompatibleClassChangeError	Globals.h	/^    ClassObject* exIncompatibleClassChangeError;$/;"	m	struct:DvmGlobals
exInstantiationError	Globals.h	/^    ClassObject* exInstantiationError;$/;"	m	struct:DvmGlobals
exInstantiationException	Globals.h	/^    ClassObject* exInstantiationException;$/;"	m	struct:DvmGlobals
exInternalError	Globals.h	/^    ClassObject* exInternalError;$/;"	m	struct:DvmGlobals
exInterruptedException	Globals.h	/^    ClassObject* exInterruptedException;$/;"	m	struct:DvmGlobals
exLinkageError	Globals.h	/^    ClassObject* exLinkageError;$/;"	m	struct:DvmGlobals
exNegativeArraySizeException	Globals.h	/^    ClassObject* exNegativeArraySizeException;$/;"	m	struct:DvmGlobals
exNoClassDefFoundError	Globals.h	/^    ClassObject* exNoClassDefFoundError;$/;"	m	struct:DvmGlobals
exNoSuchFieldError	Globals.h	/^    ClassObject* exNoSuchFieldError;$/;"	m	struct:DvmGlobals
exNoSuchFieldException	Globals.h	/^    ClassObject* exNoSuchFieldException;$/;"	m	struct:DvmGlobals
exNoSuchMethodError	Globals.h	/^    ClassObject* exNoSuchMethodError;$/;"	m	struct:DvmGlobals
exNullPointerException	Globals.h	/^    ClassObject* exNullPointerException;$/;"	m	struct:DvmGlobals
exOutOfMemoryError	Globals.h	/^    ClassObject* exOutOfMemoryError;$/;"	m	struct:DvmGlobals
exRuntimeException	Globals.h	/^    ClassObject* exRuntimeException;$/;"	m	struct:DvmGlobals
exStackOverflowError	Globals.h	/^    ClassObject* exStackOverflowError;$/;"	m	struct:DvmGlobals
exStaleDexCacheError	Globals.h	/^    ClassObject* exStaleDexCacheError;    \/* in dalvik.system *\/$/;"	m	struct:DvmGlobals
exStringIndexOutOfBoundsException	Globals.h	/^    ClassObject* exStringIndexOutOfBoundsException;$/;"	m	struct:DvmGlobals
exThrowable	Globals.h	/^    ClassObject* exThrowable;$/;"	m	struct:DvmGlobals
exTypeNotPresentException	Globals.h	/^    ClassObject* exTypeNotPresentException;$/;"	m	struct:DvmGlobals
exUnsatisfiedLinkError	Globals.h	/^    ClassObject* exUnsatisfiedLinkError;$/;"	m	struct:DvmGlobals
exUnsupportedOperationException	Globals.h	/^    ClassObject* exUnsupportedOperationException;$/;"	m	struct:DvmGlobals
exVerifyError	Globals.h	/^    ClassObject* exVerifyError;$/;"	m	struct:DvmGlobals
exVirtualMachineError	Globals.h	/^    ClassObject* exVirtualMachineError;$/;"	m	struct:DvmGlobals
excepClassId	jdwp/JdwpEvent.cpp	/^    RefTypeId           excepClassId;   \/* ExceptionOnly *\/$/;"	m	struct:ModBasket	file:
exceptObj	Debugger.h	/^    ObjectId exceptObj;$/;"	m	struct:DebugInvokeReq
exception	Thread.h	/^    Object*     exception;$/;"	m	struct:Thread
exceptionOnly	jdwp/JdwpEvent.h	/^    } exceptionOnly;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon31
exceptionThrown	mterp/c/opcommon.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-armv5te-vfp.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-armv5te.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-armv7-a-neon.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-armv7-a.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-portable.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
exceptionThrown	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET_DECL(exceptionThrown);$/;"	v
executedInstrCounts	Globals.h	/^    int*        executedInstrCounts;$/;"	m	struct:DvmGlobals
executionMode	Globals.h	/^    ExecutionMode   executionMode;$/;"	m	struct:DvmGlobals
exhaustTrace	compiler/Frontend.cpp	/^static bool exhaustTrace(CompilationUnit *cUnit, BasicBlock *curBlock)$/;"	f	file:
exitBlock	compiler/CompilerIR.h	/^    BasicBlock *exitBlock;$/;"	m	struct:CompilationUnit
exitHook	Globals.h	/^    void        (*exitHook)(int);$/;"	m	struct:DvmGlobals
expandBufAdd1	jdwp/ExpandBuf.cpp	/^void expandBufAdd1(ExpandBuf* pBuf, u1 val)$/;"	f
expandBufAdd2BE	jdwp/ExpandBuf.cpp	/^void expandBufAdd2BE(ExpandBuf* pBuf, u2 val)$/;"	f
expandBufAdd4BE	jdwp/ExpandBuf.cpp	/^void expandBufAdd4BE(ExpandBuf* pBuf, u4 val)$/;"	f
expandBufAdd8BE	jdwp/ExpandBuf.cpp	/^void expandBufAdd8BE(ExpandBuf* pBuf, u8 val)$/;"	f
expandBufAddFieldId	jdwp/Jdwp.h	/^INLINE void expandBufAddFieldId(ExpandBuf* pReply, FieldId id) {$/;"	f
expandBufAddFrameId	jdwp/Jdwp.h	/^INLINE void expandBufAddFrameId(ExpandBuf* pReply, FrameId id) {$/;"	f
expandBufAddMethodId	jdwp/Jdwp.h	/^INLINE void expandBufAddMethodId(ExpandBuf* pReply, MethodId id) {$/;"	f
expandBufAddObjectId	jdwp/Jdwp.h	/^INLINE void expandBufAddObjectId(ExpandBuf* pReply, ObjectId id) {$/;"	f
expandBufAddRefTypeId	jdwp/Jdwp.h	/^INLINE void expandBufAddRefTypeId(ExpandBuf* pReply, RefTypeId id) {$/;"	f
expandBufAddSpace	jdwp/ExpandBuf.cpp	/^u1* expandBufAddSpace(ExpandBuf* pBuf, int gapSize)$/;"	f
expandBufAddUtf8String	jdwp/ExpandBuf.cpp	/^void expandBufAddUtf8String(ExpandBuf* pBuf, const u1* str)$/;"	f
expandBufAlloc	jdwp/ExpandBuf.cpp	/^ExpandBuf* expandBufAlloc()$/;"	f
expandBufFree	jdwp/ExpandBuf.cpp	/^void expandBufFree(ExpandBuf* pBuf)$/;"	f
expandBufGetBuffer	jdwp/ExpandBuf.cpp	/^u1* expandBufGetBuffer(ExpandBuf* pBuf)$/;"	f
expandBufGetLength	jdwp/ExpandBuf.cpp	/^size_t expandBufGetLength(ExpandBuf* pBuf)$/;"	f
expandGrowableList	compiler/Utility.cpp	/^static void expandGrowableList(GrowableList *gList)$/;"	f	file:
expandImmediate	compiler/codegen/arm/ArchUtility.cpp	/^static int expandImmediate(int value)$/;"	f	file:
expandable	BitVector.h	/^    bool    expandable;     \/* expand bitmap if we run out? *\/$/;"	m	struct:BitVector
exprId	jdwp/JdwpEvent.h	/^        u4          exprId;$/;"	m	struct:JdwpEventMod::__anon25
extendedMIROpNames	compiler/codegen/arm/CodegenDriver.cpp	/^static const char *extendedMIROpNames[kMirOpLast - kMirOpFirst] = {$/;"	v	file:
extractCatchHandlers	analysis/VfyBasicBlock.cpp	/^static u4 extractCatchHandlers(const DexCode* pCode, const DexTry* pTry,$/;"	f	file:
extractIndex	IndirectRefTable.h	/^    static inline u4 extractIndex(IndirectRef iref) {$/;"	f	struct:IndirectRefTable
extractMonitorEnterObject	interp/Stack.cpp	/^static bool extractMonitorEnterObject(Thread* thread, Object** pLockObj,$/;"	f	file:
extractSerial	IndirectRefTable.h	/^    static inline u4 extractSerial(IndirectRef iref) {$/;"	f	struct:IndirectRefTable
f	Common.h	/^    float   f;$/;"	m	union:JValue
f	shadowlib/JniUtility.h	/^	float f;$/;"	m	union:float_jint
f	shadowlib/ReQueue.h	/^	float f;$/;"	m	union:float_jint
f	shadowlib/buffpack.h	/^	float f;$/;"	m	union:float_jint
f2i_doconv	mterp/armv5te/OP_FLOAT_TO_INT.S	/^f2i_doconv:$/;"	l
f2i_doconv	mterp/armv6t2/OP_FLOAT_TO_INT.S	/^f2i_doconv:$/;"	l
f2i_doconv	mterp/out/InterpAsm-armv5te.S	/^f2i_doconv:$/;"	l
f2l_doconv	mterp/armv5te/OP_FLOAT_TO_LONG.S	/^f2l_doconv:$/;"	l
f2l_doconv	mterp/armv6t2/OP_FLOAT_TO_LONG.S	/^f2l_doconv:$/;"	l
f2l_doconv	mterp/out/InterpAsm-armv5te-vfp.S	/^f2l_doconv:$/;"	l
f2l_doconv	mterp/out/InterpAsm-armv5te.S	/^f2l_doconv:$/;"	l
f2l_doconv	mterp/out/InterpAsm-armv7-a-neon.S	/^f2l_doconv:$/;"	l
f2l_doconv	mterp/out/InterpAsm-armv7-a.S	/^f2l_doconv:$/;"	l
fail	AtomicCache.h	/^    int         fail;                   \/* contention failure *\/$/;"	m	struct:AtomicCache
failed	compiler/template/gen-template.py	/^    failed = True$/;"	v
failed	compiler/template/gen-template.py	/^failed = False$/;"	v
failed	mterp/gen-mterp.py	/^    failed = True$/;"	v
failed	mterp/gen-mterp.py	/^failed = False$/;"	v
failedAllocCount	Profile.h	/^    int     failedAllocCount;   \/\/ #of times an allocation failed$/;"	m	struct:AllocProfState
failedAllocSize	Profile.h	/^    int     failedAllocSize;    \/\/ cumulative size of failed allocations$/;"	m	struct:AllocProfState
failingCasTest	test/AtomicTest.cpp	/^static int failingCasTest = 0;$/;"	v	file:
fallThrough	compiler/CompilerIR.h	/^    struct BasicBlock *fallThrough;$/;"	m	struct:BasicBlock	typeref:struct:BasicBlock::BasicBlock
false	mterp/c/gotoTargets.cpp	/^    assert(false);      \/\/ should not get here$/;"	v
false	mterp/out/InterpC-allstubs.cpp	/^    assert(false);      \/\/ should not get here$/;"	v
false	mterp/out/InterpC-x86-atom.cpp	/^    assert(false);      \/\/ should not get here$/;"	v
false	mterp/out/InterpC-x86.cpp	/^    assert(false);      \/\/ should not get here$/;"	v
fastJni	oo/Object.h	/^    bool fastJni;$/;"	m	struct:Method
fd	hprof/Hprof.h	/^    int fd;$/;"	m	struct:hprof_context_t
ff	InlineNative.cpp	/^    float ff;$/;"	m	union:Convert32	file:
field	jdwp/JdwpEvent.cpp	/^    FieldId             field;          \/* FieldOnly *\/$/;"	m	struct:ModBasket	file:
fieldId	jdwp/JdwpEvent.h	/^        FieldId     fieldId;$/;"	m	struct:JdwpEventMod::__anon32
fieldIdToField	Debugger.cpp	/^static Field* fieldIdToField(RefTypeId refTypeId, FieldId id)$/;"	f	file:
fieldLoc	compiler/codegen/arm/ArmLIR.h	/^    } fieldLoc[4];$/;"	m	struct:ArmEncodingMap	typeref:struct:ArmEncodingMap::__anon39
fieldNameFromIndex	interp/Interp.cpp	/^static std::string fieldNameFromIndex(const Method* method, int ref,$/;"	f	file:
fieldOnly	jdwp/JdwpEvent.h	/^    } fieldOnly;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon32
fieldToFieldId	Debugger.cpp	/^static FieldId fieldToFieldId(const Field* field)$/;"	f	file:
fieldToSlot	reflect/Reflect.cpp	/^static int fieldToSlot(const Field* field, const ClassObject* clazz)$/;"	f	file:
file	Misc.h	/^        } file;$/;"	m	union:DebugOutputTarget::__anon16	typeref:struct:DebugOutputTarget::__anon16::__anon18
fileDataPtr	hprof/Hprof.h	/^    char *fileDataPtr;          \/\/ for open_memstream$/;"	m	struct:hprof_context_t
fileDataSize	hprof/Hprof.h	/^    size_t fileDataSize;        \/\/ for open_memstream$/;"	m	struct:hprof_context_t
fileName	hprof/Hprof.h	/^    char *fileName;$/;"	m	struct:hprof_context_t
fileName	native/dalvik_system_DexFile.cpp	/^    char*       fileName;$/;"	m	struct:DexOrJar	file:
fileName	oo/Class.h	/^    char*   fileName;$/;"	m	struct:ClassPathEntry
fillDefBlockMatrix	compiler/SSATransformation.cpp	/^static bool fillDefBlockMatrix(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
fills	AtomicCache.h	/^    int         fills;                  \/* entry was empty *\/$/;"	m	struct:AtomicCache
filterMethodByCallGraph	compiler/Frontend.cpp	/^static bool filterMethodByCallGraph(Thread *thread, const char *curMethodName)$/;"	f	file:
finalizerReferences	alloc/HeapInternal.h	/^    Object *finalizerReferences;$/;"	m	struct:GcHeap
findAnnotationSetForClass	reflect/Annotation.cpp	/^static const DexAnnotationSetItem* findAnnotationSetForClass($/;"	f	file:
findAnnotationSetForField	reflect/Annotation.cpp	/^static const DexAnnotationSetItem* findAnnotationSetForField(const Field* field)$/;"	f	file:
findAnnotationSetForMethod	reflect/Annotation.cpp	/^static const DexAnnotationSetItem* findAnnotationSetForMethod($/;"	f	file:
findAnnotationsItemForMethod	reflect/Annotation.cpp	/^static const DexParameterAnnotationsItem* findAnnotationsItemForMethod($/;"	f	file:
findBlock	compiler/Frontend.cpp	/^static BasicBlock *findBlock(CompilationUnit *cUnit,$/;"	f	file:
findBlockBoundary	compiler/Frontend.cpp	/^static inline bool findBlockBoundary(const Method *caller, MIR *insn,$/;"	f	file:
findCatchInMethod	Exception.cpp	/^static int findCatchInMethod(Thread* self, const Method* method, int relPc,$/;"	f	file:
findClassCallback	oo/Class.cpp	/^static int findClassCallback(void* vclazz, void* arg)$/;"	f	file:
findClassFromLoaderNoInit	oo/Class.cpp	/^static ClassObject* findClassFromLoaderNoInit(const char* descriptor,$/;"	f	file:
findClassNoInit	oo/Class.cpp	/^static ClassObject* findClassNoInit(const char* descriptor, Object* loader,$/;"	f	file:
findClassPointersSingleTrace	compiler/codegen/arm/Assemble.cpp	/^static void findClassPointersSingleTrace(char *base, void (*callback)(void *))$/;"	f	file:
findCommonArraySuperclass	analysis/CodeVerify.cpp	/^static ClassObject* findCommonArraySuperclass(ClassObject* c1, ClassObject* c2)$/;"	f	file:
findCommonSuperclass	analysis/CodeVerify.cpp	/^static ClassObject* findCommonSuperclass(ClassObject* c1, ClassObject* c2)$/;"	f	file:
findConstructorOrMethodInArray	reflect/Reflect.cpp	/^static Object* findConstructorOrMethodInArray(int methodsCount, Method* methods,$/;"	f	file:
findExceptionInitMethod	Exception.cpp	/^static Method* findExceptionInitMethod(ClassObject* excepClass,$/;"	f	file:
findMatchingEvents	jdwp/JdwpEvent.cpp	/^static void findMatchingEvents(JdwpState* state, JdwpEventKind eventKind,$/;"	f	file:
findMethodInLib	Native.cpp	/^static int findMethodInLib(void* vlib, void* vmethod)$/;"	f	file:
findMethodInListByDescriptor	oo/Object.cpp	/^static Method* findMethodInListByDescriptor(const ClassObject* clazz,$/;"	f	file:
findMethodInListByProto	oo/Object.cpp	/^static Method* findMethodInListByProto(const ClassObject* clazz,$/;"	f	file:
findObject	IndirectRefTable.cpp	/^static int findObject(const Object* obj, int bottomIndex, int topIndex,$/;"	f	file:
findPackedSwitchIndex	compiler/codegen/arm/CodegenDriver.cpp	/^static s8 findPackedSwitchIndex(const u2* switchData, int testVal, int pc)$/;"	f	file:
findPredecessorBlock	compiler/Loop.cpp	/^static BasicBlock *findPredecessorBlock(const CompilationUnit *cUnit,$/;"	f	file:
findSharedLibEntry	Native.cpp	/^static SharedLib* findSharedLibEntry(const char* pathName)$/;"	f	file:
findSparseSwitchIndex	compiler/codegen/arm/CodegenDriver.cpp	/^static s8 findSparseSwitchIndex(const u2* switchData, int testVal, int pc)$/;"	f	file:
finger	alloc/MarkSweep.h	/^    const void *finger;   \/\/ only used while scanning\/recursing.$/;"	m	struct:GcMarkContext
finishInvoke	jdwp/JdwpHandler.cpp	/^static JdwpError finishInvoke(JdwpState* state,$/;"	f	file:
firstAddr	analysis/VfyBasicBlock.h	/^    u4              firstAddr;      \/* address of first instruction *\/$/;"	m	struct:VfyBasicBlock
firstChainingLIR	compiler/CompilerIR.h	/^    LIR *firstChainingLIR[kChainingCellGap];$/;"	m	struct:CompilationUnit
firstLIRInsn	compiler/CompilerIR.h	/^    LIR *firstLIRInsn;$/;"	m	struct:CompilationUnit
firstMIRInsn	compiler/CompilerIR.h	/^    MIR *firstMIRInsn;$/;"	m	struct:BasicBlock
firstOffset	LinearAlloc.h	/^    int     firstOffset;        \/* for chasing through *\/$/;"	m	struct:LinearAllocHdr
flags	Profile.h	/^    int     flags;$/;"	m	struct:MethodTraceState
flags	compiler/codegen/arm/ArmLIR.h	/^    int flags;$/;"	m	struct:ArmEncodingMap
flags	compiler/codegen/arm/ArmLIR.h	/^    } flags;$/;"	m	struct:ArmLIR	typeref:struct:ArmLIR::__anon40
float_jint	shadowlib/JniUtility.h	/^union float_jint {$/;"	u
float_jint	shadowlib/ReQueue.h	/^union float_jint {$/;"	u
float_jint	shadowlib/buffpack.h	/^union float_jint {$/;"	u
flushAllRegsBody	compiler/codegen/RallocUtil.cpp	/^static void flushAllRegsBody(CompilationUnit *cUnit, RegisterInfo *info,$/;"	f	file:
flush_hpsg_chunk	alloc/DdmHeap.cpp	/^static void flush_hpsg_chunk(HeapChunkContext *ctx)$/;"	f	file:
fmt	compiler/codegen/arm/ArmLIR.h	/^    const char* fmt;$/;"	m	struct:ArmEncodingMap
fnPtr	Native.h	/^    DalvikNativeFunc  fnPtr;$/;"	m	struct:DalvikNativeMethod
forceCopy	Globals.h	/^    bool forceCopy;$/;"	m	struct:DvmJniGlobals
forkAndSpecializeCommon	native/dalvik_system_Zygote.cpp	/^static pid_t forkAndSpecializeCommon(const u4* args, bool isSystemServer)$/;"	f	file:
format	analysis/RegisterMap.h	/^    u1      format;         \/* enum RegisterMapFormat; MUST be first entry *\/$/;"	m	struct:RegisterMap
forward_to_svm	shadowlib/ReAgent.cpp	/^int forward_to_svm(char* buff, int len){$/;"	f
fp	Misc.h	/^            FILE* fp;$/;"	m	struct:DebugOutputTarget::__anon16::__anon18
fp	compiler/CompilerIR.h	/^    unsigned fp:1;      \/\/ Hint for float\/double$/;"	m	struct:RegLocation
fp	interp/Jit.h	/^    u4* fp;                     \/* starting fp of jitted region *\/$/;"	m	struct:ShadowSpace
fp	mterp/cstubs/enddefs.cpp	5;"	d	file:
fp	mterp/cstubs/stubdefs.cpp	27;"	d	file:
fp	mterp/out/InterpC-allstubs.cpp	397;"	d	file:
fp	mterp/out/InterpC-allstubs.cpp	4053;"	d	file:
fp	mterp/out/InterpC-armv5te-vfp.cpp	1160;"	d	file:
fp	mterp/out/InterpC-armv5te-vfp.cpp	397;"	d	file:
fp	mterp/out/InterpC-armv5te.cpp	1160;"	d	file:
fp	mterp/out/InterpC-armv5te.cpp	397;"	d	file:
fp	mterp/out/InterpC-armv7-a-neon.cpp	1160;"	d	file:
fp	mterp/out/InterpC-armv7-a-neon.cpp	397;"	d	file:
fp	mterp/out/InterpC-armv7-a.cpp	1160;"	d	file:
fp	mterp/out/InterpC-armv7-a.cpp	397;"	d	file:
fp	mterp/out/InterpC-x86-atom.cpp	2292;"	d	file:
fp	mterp/out/InterpC-x86-atom.cpp	397;"	d	file:
fp	mterp/out/InterpC-x86.cpp	2234;"	d	file:
fp	mterp/out/InterpC-x86.cpp	397;"	d	file:
fpDef	compiler/Dataflow.h	/^    bool *fpDef;$/;"	m	struct:SSARepresentation
fpRegCopy	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *fpRegCopy(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f	file:
fpTemps	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int fpTemps[] = {fr16, fr17, fr18, fr19, fr20, fr21, fr22, fr23,$/;"	v	file:
fpUse	compiler/Dataflow.h	/^    bool *fpUse;$/;"	m	struct:SSARepresentation
fr0	compiler/codegen/arm/ArmLIR.h	/^    fr0  =  0 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr1	compiler/codegen/arm/ArmLIR.h	/^    fr1  =  1 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr10	compiler/codegen/arm/ArmLIR.h	/^    fr10 = 10 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr11	compiler/codegen/arm/ArmLIR.h	/^    fr11 = 11 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr12	compiler/codegen/arm/ArmLIR.h	/^    fr12 = 12 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr13	compiler/codegen/arm/ArmLIR.h	/^    fr13 = 13 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr14	compiler/codegen/arm/ArmLIR.h	/^    fr14 = 14 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr15	compiler/codegen/arm/ArmLIR.h	/^    fr15 = 15 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr16	compiler/codegen/arm/ArmLIR.h	/^    fr16 = 16 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr17	compiler/codegen/arm/ArmLIR.h	/^    fr17 = 17 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr18	compiler/codegen/arm/ArmLIR.h	/^    fr18 = 18 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr19	compiler/codegen/arm/ArmLIR.h	/^    fr19 = 19 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr2	compiler/codegen/arm/ArmLIR.h	/^    fr2  =  2 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr20	compiler/codegen/arm/ArmLIR.h	/^    fr20 = 20 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr21	compiler/codegen/arm/ArmLIR.h	/^    fr21 = 21 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr22	compiler/codegen/arm/ArmLIR.h	/^    fr22 = 22 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr23	compiler/codegen/arm/ArmLIR.h	/^    fr23 = 23 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr24	compiler/codegen/arm/ArmLIR.h	/^    fr24 = 24 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr25	compiler/codegen/arm/ArmLIR.h	/^    fr25 = 25 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr26	compiler/codegen/arm/ArmLIR.h	/^    fr26 = 26 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr27	compiler/codegen/arm/ArmLIR.h	/^    fr27 = 27 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr28	compiler/codegen/arm/ArmLIR.h	/^    fr28 = 28 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr29	compiler/codegen/arm/ArmLIR.h	/^    fr29 = 29 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr3	compiler/codegen/arm/ArmLIR.h	/^    fr3  =  3 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr30	compiler/codegen/arm/ArmLIR.h	/^    fr30 = 30 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr31	compiler/codegen/arm/ArmLIR.h	/^    fr31 = 31 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr4	compiler/codegen/arm/ArmLIR.h	/^    fr4  =  4 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr5	compiler/codegen/arm/ArmLIR.h	/^    fr5  =  5 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr6	compiler/codegen/arm/ArmLIR.h	/^    fr6  =  6 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr7	compiler/codegen/arm/ArmLIR.h	/^    fr7  =  7 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr8	compiler/codegen/arm/ArmLIR.h	/^    fr8  =  8 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
fr9	compiler/codegen/arm/ArmLIR.h	/^    fr9  =  9 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
frag	interp/InterpState.h	/^        JitCodeDesc frag;$/;"	m	union:JitTraceRun::__anon23
frameDepth	Debugger.h	/^    int frameDepth;$/;"	m	struct:StepControl
frameIdToFrame	Debugger.cpp	/^static u4* frameIdToFrame(FrameId id)$/;"	f	file:
frameToFrameId	Debugger.cpp	/^static FrameId frameToFrameId(const void* frame)$/;"	f	file:
free	jdwp/JdwpPriv.h	/^    void (*free)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
freeAssertionCtrl	Init.cpp	/^static void freeAssertionCtrl()$/;"	f	file:
freeCount	Profile.h	/^    int     freeCount;          \/\/ #of objects freed$/;"	m	struct:AllocProfState
freeCpeArray	oo/Class.cpp	/^static void freeCpeArray(ClassPathEntry* cpe)$/;"	f	file:
freeFunc	Hash.h	/^    HashFreeFunc freeFunc;$/;"	m	struct:HashTable
freeMarkStack	alloc/HeapSource.cpp	/^static void freeMarkStack(GcMarkStack *stack)$/;"	f	file:
freeMethodInnards	oo/Class.cpp	/^static void freeMethodInnards(Method* meth)$/;"	f	file:
freeMonitor	Sync.cpp	/^static void freeMonitor(Monitor *mon)$/;"	f	file:
freeRegisterLineInnards	analysis/CodeVerify.cpp	/^static void freeRegisterLineInnards(VerifierData* vdata)$/;"	f	file:
freeSharedLibEntry	Native.cpp	/^static void freeSharedLibEntry(void* ptr)$/;"	f	file:
freeSize	Profile.h	/^    int     freeSize;           \/\/ cumulative size of freed objects$/;"	m	struct:AllocProfState
freeThread	Thread.cpp	/^static void freeThread(Thread* thread)$/;"	f	file:
freshLoc	compiler/Ralloc.cpp	/^static const RegLocation freshLoc = {kLocDalvikFrame, 0, 0, INVALID_REG,$/;"	v	file:
fromData	CheckJni.cpp	/^    static inline const GuardedCopy* fromData(const void* dataBuf) {$/;"	f	struct:GuardedCopy
fromSpaceContains	alloc/Copying.cpp	/^static bool fromSpaceContains(const void *addr)$/;"	f	file:
fullSuspendCheck	Thread.cpp	/^static bool fullSuspendCheck(Thread* self)$/;"	f	file:
func	InlineNative.h	/^    InlineOp4Func   func;               \/* MUST be first entry *\/$/;"	m	struct:InlineOperation
func	Thread.h	/^    InternalThreadStart func;$/;"	m	struct:InternalStartArgs
func	jdwp/JdwpHandler.cpp	/^    JdwpRequestHandler  func;$/;"	m	struct:JdwpHandlerMap	file:
funcArg	Thread.h	/^    void*       funcArg;$/;"	m	struct:InternalStartArgs
funcTable	JniInternal.h	/^    const struct JNIInvokeInterface* funcTable;     \/* must be first *\/$/;"	m	struct:JavaVMExt	typeref:struct:JavaVMExt::JNIInvokeInterface
funcTable	JniInternal.h	/^    const struct JNINativeInterface* funcTable;     \/* must be first *\/$/;"	m	struct:JNIEnvExt	typeref:struct:JNIEnvExt::JNINativeInterface
gCallbackArg	alloc/TEST/HeapBitmapTest/main.c	/^static void *gCallbackArg = NULL;$/;"	v	file:
gCheckInvokeInterface	CheckJni.cpp	/^static const struct JNIInvokeInterface gCheckInvokeInterface = {$/;"	v	typeref:struct:JNIInvokeInterface	file:
gCheckNativeInterface	CheckJni.cpp	/^static const struct JNINativeInterface gCheckNativeInterface = {$/;"	v	typeref:struct:JNINativeInterface	file:
gClassHashTable	hprof/HprofClass.cpp	/^static HashTable *gClassHashTable;$/;"	v	file:
gClearedPtrs	alloc/TEST/HeapBitmapTest/main.c	/^static bool gClearedPtrs[NUM_XOR_PTRS];$/;"	v	file:
gDebugVerbose	analysis/CodeVerify.cpp	/^static bool gDebugVerbose = false;$/;"	v	file:
gDvm	Init.cpp	/^struct DvmGlobals gDvm;$/;"	v	typeref:struct:DvmGlobals
gDvmICHitCount	Init.cpp	/^int gDvmICHitCount;$/;"	v
gDvmInlineOpsTable	InlineNative.cpp	/^const InlineOperation gDvmInlineOpsTable[] = {$/;"	v
gDvmJit	Init.cpp	/^struct DvmJitGlobals gDvmJit;$/;"	v	typeref:struct:DvmJitGlobals
gDvmJni	Init.cpp	/^struct DvmJniGlobals gDvmJni;$/;"	v	typeref:struct:DvmJniGlobals
gDvmMergeTab	analysis/CodeVerify.cpp	/^const char gDvmMergeTab[kRegTypeMAX][kRegTypeMAX] =$/;"	v
gDvmNativeMethodSet	native/InternalNative.cpp	/^static DalvikNativeClass gDvmNativeMethodSet[] = {$/;"	v	file:
gHandlerMap	jdwp/JdwpHandler.cpp	/^static const JdwpHandlerMap gHandlerMap[] = {$/;"	v	file:
gHs	alloc/HeapSource.cpp	/^static HeapSource *gHs = NULL;$/;"	v	file:
gInvokeInterface	Jni.cpp	/^static const struct JNIInvokeInterface gInvokeInterface = {$/;"	v	typeref:struct:JNIInvokeInterface	file:
gNativeInterface	Jni.cpp	/^static const struct JNINativeInterface gNativeInterface = {$/;"	v	typeref:struct:JNINativeInterface	file:
gNumPtrs	alloc/TEST/HeapBitmapTest/main.c	/^static size_t gNumPtrs;$/;"	v	file:
gSeenPtrs	alloc/TEST/HeapBitmapTest/main.c	/^static bool gSeenPtrs[NUM_XOR_PTRS];$/;"	v	file:
gStringHashTable	hprof/HprofString.cpp	/^static HashTable *gStringHashTable;$/;"	v	file:
gXorPtrs	alloc/TEST/HeapBitmapTest/main.c	/^static void *gXorPtrs[NUM_XOR_PTRS];$/;"	v	file:
gatherMethods	reflect/Proxy.cpp	/^static bool gatherMethods(ArrayObject* interfaces, Method*** pMethods,$/;"	f	file:
gcCount	Profile.h	/^    int     gcCount;            \/\/ #of times an allocation triggered a GC$/;"	m	struct:AllocProfState
gcDaemonShutdown	alloc/HeapSource.cpp	/^static void gcDaemonShutdown()$/;"	f	file:
gcDaemonStartup	alloc/HeapSource.cpp	/^static bool gcDaemonStartup()$/;"	f	file:
gcDaemonThread	alloc/HeapSource.cpp	/^static void *gcDaemonThread(void* arg)$/;"	f	file:
gcForMalloc	alloc/Heap.cpp	/^static void gcForMalloc(bool clearSoftReferences)$/;"	f	file:
gcGapCount	analysis/RegisterMap.cpp	/^    int gcGapCount;$/;"	m	struct:MapStats	file:
gcHeap	Globals.h	/^    GcHeap*     gcHeap;$/;"	m	struct:DvmGlobals
gcHeapCond	Globals.h	/^    pthread_cond_t gcHeapCond;$/;"	m	struct:DvmGlobals
gcHeapLock	Globals.h	/^    pthread_mutex_t gcHeapLock;$/;"	m	struct:DvmGlobals
gcPointGap	analysis/RegisterMap.cpp	/^    int gcPointGap[kMaxGcPointGap];$/;"	m	struct:MapStats	file:
gcRunning	alloc/HeapInternal.h	/^    bool gcRunning;$/;"	m	struct:GcHeap
gcScanState	hprof/Hprof.h	/^    u1 gcScanState;$/;"	m	struct:hprof_context_t
gcThread	alloc/HeapSource.cpp	/^    pthread_t gcThread;$/;"	m	struct:HeapSource	file:
gcThreadCond	alloc/HeapSource.cpp	/^    pthread_cond_t gcThreadCond;$/;"	m	struct:HeapSource	file:
gcThreadMutex	alloc/HeapSource.cpp	/^    pthread_mutex_t gcThreadMutex;$/;"	m	struct:HeapSource	file:
gcThreadSerialNumber	hprof/Hprof.h	/^    u4 gcThreadSerialNumber;$/;"	m	struct:hprof_context_t
gcThreadShutdown	alloc/HeapSource.cpp	/^    bool gcThreadShutdown;$/;"	m	struct:HeapSource	file:
gcThreadTrimNeeded	alloc/HeapSource.cpp	/^    bool gcThreadTrimNeeded;$/;"	m	struct:HeapSource	file:
genArithOp	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genArithOp(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genArithOpDouble	compiler/codegen/arm/FP/Thumb2VFP.cpp	/^static bool genArithOpDouble(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpDouble	compiler/codegen/arm/FP/ThumbPortableFP.cpp	/^static bool genArithOpDouble(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpDouble	compiler/codegen/arm/FP/ThumbVFP.cpp	/^static bool genArithOpDouble(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpDoublePortable	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genArithOpDoublePortable(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpFloat	compiler/codegen/arm/FP/Thumb2VFP.cpp	/^static bool genArithOpFloat(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpFloat	compiler/codegen/arm/FP/ThumbPortableFP.cpp	/^static bool genArithOpFloat(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpFloat	compiler/codegen/arm/FP/ThumbVFP.cpp	/^static bool genArithOpFloat(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpFloatPortable	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genArithOpFloatPortable(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpInt	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genArithOpInt(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArithOpLong	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genArithOpLong(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArrayGet	compiler/codegen/arm/CodegenDriver.cpp	/^static void genArrayGet(CompilationUnit *cUnit, MIR *mir, OpSize size,$/;"	f	file:
genArrayObjectPut	compiler/codegen/arm/CodegenDriver.cpp	/^static void genArrayObjectPut(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genArrayPut	compiler/codegen/arm/CodegenDriver.cpp	/^static void genArrayPut(CompilationUnit *cUnit, MIR *mir, OpSize size,$/;"	f	file:
genBarrier	compiler/codegen/arm/CodegenCommon.cpp	/^static void genBarrier(CompilationUnit *cUnit)$/;"	f	file:
genBoundsCheck	compiler/codegen/arm/ArchFactory.cpp	/^static TGT_LIR *genBoundsCheck(CompilationUnit *cUnit, int rIndex,$/;"	f	file:
genCheckCommon	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *genCheckCommon(CompilationUnit *cUnit, int dOffset,$/;"	f	file:
genCmpFP	compiler/codegen/arm/FP/Thumb2VFP.cpp	/^static bool genCmpFP(CompilationUnit *cUnit, MIR *mir, RegLocation rlDest,$/;"	f	file:
genCmpFP	compiler/codegen/arm/FP/ThumbPortableFP.cpp	/^static bool genCmpFP(CompilationUnit *cUnit, MIR *mir, RegLocation rlDest,$/;"	f	file:
genCmpFP	compiler/codegen/arm/FP/ThumbVFP.cpp	/^static bool genCmpFP(CompilationUnit *cUnit, MIR *mir, RegLocation rlDest,$/;"	f	file:
genCmpImmBranch	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *genCmpImmBranch(CompilationUnit *cUnit,$/;"	f	file:
genCmpImmBranch	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *genCmpImmBranch(CompilationUnit *cUnit,$/;"	f	file:
genCmpLong	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genCmpLong(CompilationUnit *cUnit, MIR *mir, RegLocation rlDest,$/;"	f	file:
genCmpLong	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genCmpLong(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genConditionalBranch	compiler/codegen/arm/CodegenDriver.cpp	/^static ArmLIR *genConditionalBranch(CompilationUnit *cUnit,$/;"	f	file:
genConversion	compiler/codegen/arm/FP/Thumb2VFP.cpp	/^static bool genConversion(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genConversion	compiler/codegen/arm/FP/ThumbPortableFP.cpp	/^static bool genConversion(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genConversion	compiler/codegen/arm/FP/ThumbVFP.cpp	/^static bool genConversion(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genConversionCall	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genConversionCall(CompilationUnit *cUnit, MIR *mir, void *funct,$/;"	f	file:
genConversionPortable	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genConversionPortable(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genDispatchToHandler	compiler/codegen/arm/ArchFactory.cpp	/^static void genDispatchToHandler(CompilationUnit *cUnit, TemplateOpcode opcode)$/;"	f	file:
genExportPC	compiler/codegen/arm/Thumb/Gen.cpp	/^static ArmLIR *genExportPC(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genExportPC	compiler/codegen/arm/Thumb2/Gen.cpp	/^static ArmLIR *genExportPC(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genHoistedChecks	compiler/Loop.cpp	/^static void genHoistedChecks(CompilationUnit *cUnit)$/;"	f	file:
genHoistedChecksForCountDownLoop	compiler/codegen/arm/CodegenDriver.cpp	/^static void genHoistedChecksForCountDownLoop(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genHoistedChecksForCountUpLoop	compiler/codegen/arm/CodegenDriver.cpp	/^static void genHoistedChecksForCountUpLoop(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genHoistedLowerBoundCheck	compiler/codegen/arm/CodegenDriver.cpp	/^static void genHoistedLowerBoundCheck(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genIGet	compiler/codegen/arm/CodegenDriver.cpp	/^static void genIGet(CompilationUnit *cUnit, MIR *mir, OpSize size,$/;"	f	file:
genIGetWide	compiler/codegen/arm/CodegenDriver.cpp	/^static void genIGetWide(CompilationUnit *cUnit, MIR *mir, int fieldOffset)$/;"	f	file:
genIPut	compiler/codegen/arm/CodegenDriver.cpp	/^static void genIPut(CompilationUnit *cUnit, MIR *mir, OpSize size,$/;"	f	file:
genIPutWide	compiler/codegen/arm/CodegenDriver.cpp	/^static void genIPutWide(CompilationUnit *cUnit, MIR *mir, int fieldOffset)$/;"	f	file:
genIT	compiler/codegen/arm/Thumb2/Gen.cpp	/^static ArmLIR *genIT(CompilationUnit *cUnit, ArmConditionCode code,$/;"	f	file:
genInlineSqrt	compiler/codegen/arm/FP/Thumb2VFP.cpp	/^static bool genInlineSqrt(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlineSqrt	compiler/codegen/arm/FP/ThumbPortableFP.cpp	/^static bool genInlineSqrt(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlineSqrt	compiler/codegen/arm/FP/ThumbVFP.cpp	/^static bool genInlineSqrt(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedAbsDouble	compiler/codegen/arm/Thumb/Gen.cpp	/^static bool genInlinedAbsDouble(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedAbsDouble	compiler/codegen/arm/Thumb2/Gen.cpp	/^static bool genInlinedAbsDouble(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedAbsFloat	compiler/codegen/arm/Thumb/Gen.cpp	/^static bool genInlinedAbsFloat(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedAbsFloat	compiler/codegen/arm/Thumb2/Gen.cpp	/^static bool genInlinedAbsFloat(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedAbsInt	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedAbsInt(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedAbsLong	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedAbsLong(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedCompareTo	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedCompareTo(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedFastIndexOf	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedFastIndexOf(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedIntFloatConversion	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedIntFloatConversion(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedLongDoubleConversion	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedLongDoubleConversion(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedMinMaxInt	compiler/codegen/arm/Thumb/Gen.cpp	/^static bool genInlinedMinMaxInt(CompilationUnit *cUnit, MIR *mir, bool isMin)$/;"	f	file:
genInlinedMinMaxInt	compiler/codegen/arm/Thumb2/Gen.cpp	/^static bool genInlinedMinMaxInt(CompilationUnit *cUnit, MIR *mir, bool isMin)$/;"	f	file:
genInlinedStringCharAt	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedStringCharAt(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedStringIsEmpty	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedStringIsEmpty(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInlinedStringIsEmptyOrLength	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedStringIsEmptyOrLength(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genInlinedStringLength	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genInlinedStringLength(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInterpSingleStep	compiler/codegen/arm/CodegenDriver.cpp	/^static void genInterpSingleStep(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genInvokeSingletonCommon	compiler/codegen/arm/CodegenDriver.cpp	/^static void genInvokeSingletonCommon(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genInvokeSingletonWholeMethod	compiler/codegen/arm/CodegenDriver.cpp	/^static void genInvokeSingletonWholeMethod(CompilationUnit *cUnit,$/;"	f	file:
genInvokeVirtualCommon	compiler/codegen/arm/CodegenDriver.cpp	/^static void genInvokeVirtualCommon(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genInvokeVirtualWholeMethod	compiler/codegen/arm/CodegenDriver.cpp	/^static void genInvokeVirtualWholeMethod(CompilationUnit *cUnit,$/;"	f	file:
genLandingPadForMispredictedCallee	compiler/codegen/arm/CodegenDriver.cpp	/^static void genLandingPadForMispredictedCallee(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genLong3Addr	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genLong3Addr(CompilationUnit *cUnit, MIR *mir, OpKind firstOp,$/;"	f	file:
genLong3Addr	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genLong3Addr(CompilationUnit *cUnit, MIR *mir, OpKind firstOp,$/;"	f	file:
genMethodInflateAndPunt	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static void genMethodInflateAndPunt(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genMonitor	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genMonitor(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genMonitor	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genMonitor(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genMonitorEnter	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genMonitorEnter(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genMonitorExit	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genMonitorExit(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genMonitorPortable	compiler/codegen/arm/CodegenDriver.cpp	/^static void genMonitorPortable(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genMulLong	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genMulLong(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
genMulLong	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genMulLong(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
genMultiplyByTwoBitMultiplier	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genMultiplyByTwoBitMultiplier(CompilationUnit *cUnit,$/;"	f	file:
genMultiplyByTwoBitMultiplier	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genMultiplyByTwoBitMultiplier(CompilationUnit *cUnit,$/;"	f	file:
genNegDouble	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genNegDouble(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
genNegDouble	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genNegDouble(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
genNegFloat	compiler/codegen/arm/Thumb/Gen.cpp	/^static void genNegFloat(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
genNegFloat	compiler/codegen/arm/Thumb2/Gen.cpp	/^static void genNegFloat(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
genNullCheck	compiler/codegen/arm/ArchFactory.cpp	/^static TGT_LIR *genNullCheck(CompilationUnit *cUnit, int sReg, int mReg,$/;"	f	file:
genProcessArgsNoRange	compiler/codegen/arm/CodegenDriver.cpp	/^static void genProcessArgsNoRange(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genProcessArgsRange	compiler/codegen/arm/CodegenDriver.cpp	/^static void genProcessArgsRange(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genPuntToInterp	compiler/codegen/arm/CodegenDriver.cpp	/^static void genPuntToInterp(CompilationUnit *cUnit, unsigned int offset)$/;"	f	file:
genRegCopy	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR* genRegCopy(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f	file:
genRegCopy	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR* genRegCopy(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f	file:
genRegCopyNoInsert	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR* genRegCopyNoInsert(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f	file:
genRegCopyNoInsert	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR* genRegCopyNoInsert(CompilationUnit *cUnit, int rDest, int rSrc)$/;"	f	file:
genRegCopyWide	compiler/codegen/arm/Thumb/Factory.cpp	/^static void genRegCopyWide(CompilationUnit *cUnit, int destLo, int destHi,$/;"	f	file:
genRegCopyWide	compiler/codegen/arm/Thumb2/Factory.cpp	/^static void genRegCopyWide(CompilationUnit *cUnit, int destLo, int destHi,$/;"	f	file:
genRegImmCheck	compiler/codegen/arm/ArchFactory.cpp	/^static TGT_LIR *genRegImmCheck(CompilationUnit *cUnit,$/;"	f	file:
genRegRegCheck	compiler/codegen/arm/ArchFactory.cpp	/^static TGT_LIR *genRegRegCheck(CompilationUnit *cUnit,$/;"	f	file:
genReturnCommon	compiler/codegen/arm/CodegenDriver.cpp	/^static void genReturnCommon(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genSelfVerificationPostBranch	compiler/codegen/arm/Thumb/Factory.cpp	/^static void genSelfVerificationPostBranch(CompilationUnit *cUnit,$/;"	f	file:
genSelfVerificationPostBranch	compiler/codegen/arm/Thumb2/Factory.cpp	/^static void genSelfVerificationPostBranch(CompilationUnit *cUnit,$/;"	f	file:
genSelfVerificationPreBranch	compiler/codegen/arm/Thumb/Factory.cpp	/^static void genSelfVerificationPreBranch(CompilationUnit *cUnit,$/;"	f	file:
genSelfVerificationPreBranch	compiler/codegen/arm/Thumb2/Factory.cpp	/^static void genSelfVerificationPreBranch(CompilationUnit *cUnit,$/;"	f	file:
genShiftOpLong	compiler/codegen/arm/CodegenDriver.cpp	/^static bool genShiftOpLong(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
genSuspendPoll	Globals.h	/^    bool               genSuspendPoll;$/;"	m	struct:DvmJitGlobals
genSuspendPoll	compiler/codegen/arm/CodegenDriver.cpp	/^static void genSuspendPoll(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genTraceProfileEntry	compiler/codegen/arm/Thumb/Gen.cpp	/^static int genTraceProfileEntry(CompilationUnit *cUnit)$/;"	f	file:
genTraceProfileEntry	compiler/codegen/arm/Thumb2/Gen.cpp	/^static int genTraceProfileEntry(CompilationUnit *cUnit)$/;"	f	file:
genTrap	compiler/codegen/arm/CodegenDriver.cpp	/^static inline ArmLIR *genTrap(CompilationUnit *cUnit, int dOffset,$/;"	f	file:
genUnconditionalBranch	compiler/codegen/arm/CodegenDriver.cpp	/^static ArmLIR *genUnconditionalBranch(CompilationUnit *cUnit, ArmLIR *target)$/;"	f	file:
genValidationForPredictedInline	compiler/codegen/arm/CodegenDriver.cpp	/^static void genValidationForPredictedInline(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
genZeroCheck	compiler/codegen/arm/ArchFactory.cpp	/^static TGT_LIR *genZeroCheck(CompilationUnit *cUnit, int mReg,$/;"	f	file:
generateBaseOutput	AllocTracker.cpp	/^static size_t generateBaseOutput(u1* ptr, size_t baseLen,$/;"	f	file:
generateRegisterMaps	Globals.h	/^    bool        generateRegisterMaps;$/;"	m	struct:DvmGlobals
generate_alt_table	mterp/gen-mterp.py	/^generate_alt_table = False$/;"	v
generic	compiler/codegen/arm/ArmLIR.h	/^    LIR generic;$/;"	m	struct:ArmLIR
generic	compiler/codegen/x86/X86LIR.h	/^    LIR generic;$/;"	m	struct:X86LIR
get	IndirectRefTable.cpp	/^Object* IndirectRefTable::get(IndirectRef iref) const {$/;"	f	class:IndirectRefTable
get1	Bits.h	/^INLINE u1 get1(unsigned const char* pSrc)$/;"	f
get2BE	Bits.h	/^INLINE u2 get2BE(unsigned char const* pSrc)$/;"	f
get2LE	Bits.h	/^INLINE u2 get2LE(unsigned char const* pSrc)$/;"	f
get4BE	Bits.h	/^INLINE u4 get4BE(unsigned char const* pSrc)$/;"	f
get4LE	Bits.h	/^INLINE u4 get4LE(unsigned char const* pSrc)$/;"	f
get8BE	Bits.h	/^INLINE u8 get8BE(unsigned char const* pSrc)$/;"	f
get8LE	Bits.h	/^INLINE u8 get8LE(unsigned char const* pSrc)$/;"	f
getAllocLimit	alloc/HeapSource.cpp	/^static size_t getAllocLimit(const HeapSource *hs)$/;"	f	file:
getAnnoDirectory	reflect/Annotation.cpp	/^static const DexAnnotationsDirectoryItem* getAnnoDirectory(DexFile* pDexFile,$/;"	f	file:
getAnnotationItemFromAnnotationSet	reflect/Annotation.cpp	/^static const DexAnnotationItem* getAnnotationItemFromAnnotationSet($/;"	f	file:
getAnnotationObjectFromAnnotationSet	reflect/Annotation.cpp	/^static Object* getAnnotationObjectFromAnnotationSet(const ClassObject* clazz,$/;"	f	file:
getAnnotationValue	reflect/Annotation.cpp	/^static Object* getAnnotationValue(const ClassObject* clazz,$/;"	f	file:
getBlockHeader	LinearAlloc.cpp	/^static inline u4* getBlockHeader(void* mem)$/;"	f	file:
getBoxedType	reflect/Reflect.cpp	/^static PrimitiveType getBoxedType(DataObject* arg)$/;"	f	file:
getCacheFileName	analysis/DexPrepare.cpp	/^static const char* getCacheFileName(const ClassPathEntry* cpe)$/;"	f	file:
getCaughtExceptionType	analysis/CodeVerify.cpp	/^static ClassObject* getCaughtExceptionType(const Method* meth, int insnIdx,$/;"	f	file:
getChainCellCountsPointer	compiler/codegen/arm/Assemble.cpp	/^static inline ChainCellCounts* getChainCellCountsPointer(const char *base)$/;"	f	file:
getChainCellSize	compiler/codegen/arm/Assemble.cpp	/^static inline u4 getChainCellSize(const ChainCellCounts* pChainCellCounts)$/;"	f	file:
getClassDepth	analysis/CodeVerify.cpp	/^static int getClassDepth(ClassObject* clazz)$/;"	f	file:
getClassFromRegister	analysis/CodeVerify.cpp	/^static ClassObject* getClassFromRegister(const RegisterLine* registerLine,$/;"	f	file:
getClockOverhead	Profile.cpp	/^static u4 getClockOverhead()$/;"	f	file:
getCodeAddrCommon	interp/Jit.cpp	/^void* getCodeAddrCommon(const u2* dPC, bool methodEntry)$/;"	f
getDestSSAName	compiler/codegen/RallocUtil.cpp	/^static inline int getDestSSAName(MIR *mir, int num)$/;"	f	file:
getDoubleFromArray	mterp/c/header.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-allstubs.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-armv5te-vfp.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-armv5te.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-armv7-a-neon.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-armv7-a.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-portable.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-x86-atom.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getDoubleFromArray	mterp/out/InterpC-x86.cpp	/^static inline double getDoubleFromArray(const u4* ptr, int idx)$/;"	f	file:
getElementCount	ReferenceTable.cpp	/^static size_t getElementCount(const Object* obj)$/;"	f	file:
getExceptionMessage	Exception.cpp	/^static StringObject* getExceptionMessage(Object* exception)$/;"	f	file:
getFfiType	arch/generic/Call.cpp	/^static ffi_type* getFfiType(char sigType)$/;"	f	file:
getFieldClass	analysis/CodeVerify.cpp	/^static ClassObject* getFieldClass(const Method* meth, const Field* field)$/;"	f	file:
getFieldIdx	reflect/Annotation.cpp	/^static u4 getFieldIdx(const Field* field)$/;"	f	file:
getFieldValue	native/java_lang_reflect_Field.cpp	/^static void getFieldValue(const Field* field, Object* obj, JValue* value)$/;"	f	file:
getFileDescriptor	native/dalvik_system_VMDebug.cpp	/^static int getFileDescriptor(Object* obj)$/;"	f	file:
getFileNameSuffix	oo/Class.cpp	/^static void getFileNameSuffix(const char* fileName, char* suffixBuf, size_t suffixBufLen)$/;"	f	file:
getForward	alloc/Copying.cpp	/^static void* getForward(const void *fromObj)$/;"	f	file:
getGlobalSubDict	compiler/template/gen-template.py	/^def getGlobalSubDict():$/;"	f
getGlobalSubDict	mterp/gen-mterp.py	/^def getGlobalSubDict():$/;"	f
getHeader	LinearAlloc.cpp	/^static inline LinearAllocHdr* getHeader(Object* classLoader)$/;"	f	file:
getInstField	analysis/CodeVerify.cpp	/^static InstField* getInstField(const Method* meth,$/;"	f	file:
getInstFieldValue	native/java_lang_reflect_Field.cpp	/^static void getInstFieldValue(const InstField* ifield, Object* obj,$/;"	f	file:
getInvocationThis	analysis/CodeVerify.cpp	/^static RegType getInvocationThis(const RegisterLine* registerLine,$/;"	f	file:
getLocWide	compiler/codegen/RallocUtil.cpp	/^static RegLocation getLocWide(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
getLongFromArray	mterp/c/header.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-allstubs.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-armv5te-vfp.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-armv5te.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-armv7-a-neon.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-armv7-a.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-portable.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-x86-atom.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getLongFromArray	mterp/out/InterpC-x86.cpp	/^static inline s8 getLongFromArray(const u4* ptr, int idx)$/;"	f	file:
getMaximumSize	alloc/HeapSource.cpp	/^static size_t getMaximumSize(const HeapSource *hs)$/;"	f	file:
getMethodIdx	reflect/Annotation.cpp	/^static u4 getMethodIdx(const Method* method)$/;"	f	file:
getMethodReturnType	analysis/CodeVerify.cpp	/^static RegType getMethodReturnType(const Method* meth)$/;"	f	file:
getMethodSourceFile	AllocTracker.cpp	/^static const char* getMethodSourceFile(const Method* method)$/;"	f	file:
getModTimeAndSize	RawDexFile.cpp	/^static int getModTimeAndSize(int fd, u4* modTime, size_t* size)$/;"	f	file:
getOpcodeList	compiler/template/gen-template.py	/^def getOpcodeList():$/;"	f
getOpcodeList	mterp/gen-mterp.py	/^def getOpcodeList():$/;"	f
getPermanentString	alloc/Copying.cpp	/^static void* getPermanentString(const StringObject *obj)$/;"	f	file:
getPrettyClassNameId	hprof/HprofClass.cpp	/^static int getPrettyClassNameId(const char *descriptor) {$/;"	f	file:
getProfileCount	compiler/codegen/arm/Assemble.cpp	/^static inline JitTraceCounter_t getProfileCount(const JitEntry *entry)$/;"	f	file:
getReferenceFlags	alloc/Copying.cpp	/^static int getReferenceFlags(const Object *obj)$/;"	f	file:
getRegInfo	compiler/codegen/RallocUtil.cpp	/^static RegisterInfo *getRegInfo(CompilationUnit *cUnit, int reg)$/;"	f	file:
getRegMaskCommon	compiler/codegen/arm/CodegenCommon.cpp	/^static inline u8 getRegMaskCommon(int reg)$/;"	f	file:
getRegisterLine	analysis/CodeVerify.cpp	/^static inline RegisterLine* getRegisterLine(const RegisterTable* regTable,$/;"	f	file:
getRegisterType	analysis/CodeVerify.cpp	/^static inline RegType getRegisterType(const RegisterLine* registerLine, u4 vsrc)$/;"	f	file:
getRelativeTimeNsec	test/AtomicTest.cpp	/^static int64_t getRelativeTimeNsec()$/;"	f	file:
getReturnTypeBasicTag	Debugger.cpp	/^static u1 getReturnTypeBasicTag(const Method* method)$/;"	f	file:
getSSAName	compiler/Dataflow.cpp	/^char *getSSAName(const CompilationUnit *cUnit, int ssaReg, char *name)$/;"	f
getSchedulerGroup	Thread.cpp	/^static int getSchedulerGroup(int tid, char* buf, size_t bufLen)$/;"	f	file:
getSchedulerStats	Thread.cpp	/^static void getSchedulerStats(SchedulerStats* stats, pid_t tid) {$/;"	f	file:
getSignature	analysis/DexPrepare.cpp	/^static const u1* getSignature(const ClassPathEntry* cpe)$/;"	f	file:
getSignatureValue	reflect/Annotation.cpp	/^static ArrayObject* getSignatureValue(const ClassObject* clazz,$/;"	f	file:
getSkeleton	compiler/codegen/arm/Assemble.cpp	/^static u4 getSkeleton(ArmOpcode op)$/;"	f	file:
getSoftFootprint	alloc/HeapSource.cpp	/^static size_t getSoftFootprint(bool includeActive)$/;"	f	file:
getStackFrames	AllocTracker.cpp	/^static void getStackFrames(Thread* self, AllocRecord* pRec)$/;"	f	file:
getStaticField	analysis/CodeVerify.cpp	/^static StaticField* getStaticField(const Method* meth, int fieldIdx,$/;"	f	file:
getStaticFieldValue	native/java_lang_reflect_Field.cpp	/^static void getStaticFieldValue(const StaticField* sfield, JValue* value)$/;"	f	file:
getStaticThreadGroup	Thread.cpp	/^static Object* getStaticThreadGroup(const char* fieldName)$/;"	f	file:
getStopwatchClock	Profile.cpp	/^static inline u8 getStopwatchClock()$/;"	f	file:
getSuspendCauseStr	Thread.cpp	/^static const char* getSuspendCauseStr(SuspendCause why)$/;"	f	file:
getThisObject	Debugger.cpp	/^static Object* getThisObject(const u4* framePtr)$/;"	f	file:
getThreadCpuTimeInUsec	Profile.cpp	/^static inline u8 getThreadCpuTimeInUsec()$/;"	f	file:
getTimeNsec	shadowlib/ReAgent.cpp	/^int64_t getTimeNsec(){$/;"	f
getTraceBase	compiler/codegen/arm/Assemble.cpp	/^static inline char *getTraceBase(const JitEntry *p)$/;"	f	file:
getTraceBuf	native/dalvik_system_VMStack.cpp	/^static int* getTraceBuf(Object* targetThreadObj, size_t* pStackDepth)$/;"	f	file:
getTraceDescriptionPointer	compiler/codegen/arm/Assemble.cpp	/^static JitTraceDescription* getTraceDescriptionPointer(const char *base)$/;"	f	file:
getTraceDescriptionSize	compiler/codegen/arm/Assemble.cpp	/^static int getTraceDescriptionSize(const JitTraceDescription *desc)$/;"	f	file:
getUninitInstance	analysis/CodeVerify.cpp	/^static ClassObject* getUninitInstance(const UninitInstanceMap* uninitMap,$/;"	f	file:
getUtilizationTarget	alloc/HeapSource.cpp	/^static size_t getUtilizationTarget(size_t liveSize, size_t targetUtilization)$/;"	f	file:
getWallTimeInUsec	Profile.cpp	/^static inline u8 getWallTimeInUsec()$/;"	f	file:
get_bits	shadowlib/Netref.h	/^static inline uint64_t get_bits(uint64_t from, uint64_t bit_mask,$/;"	f
get_socket	shadowlib/ReAgent.cpp	/^int get_socket(){$/;"	f
gl_mtx	shadowlib/Lock.h	/^		pthread_mutex_t gl_mtx;$/;"	m	class:LockBuffer
gl_mtx	shadowlib/Map.h	/^		pthread_mutex_t gl_mtx;$/;"	m	class:Map
gl_mtx	shadowlib/ReAgent.cpp	/^static pthread_mutex_t gl_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
gl_mtx	shadowlib/ReProtocol.h	/^		pthread_mutex_t gl_mtx;$/;"	m	class:ReProtocol
gl_svm_socket	shadowlib/ReAgent.cpp	/^int gl_svm_socket = -1;$/;"	v
group	Thread.cpp	/^    char group[32];$/;"	m	struct:SchedulerStats	file:
group	Thread.h	/^    Object*     group;$/;"	m	struct:InternalStartArgs
growthLimit	alloc/HeapSource.cpp	/^    size_t growthLimit;$/;"	m	struct:HeapSource	file:
guaranteeRecordAppend	hprof/HprofOutput.cpp	/^static inline int guaranteeRecordAppend(hprof_record_t *rec, size_t nmore)$/;"	f	file:
haltCompilerThread	Globals.h	/^    bool               haltCompilerThread;$/;"	m	struct:DvmJitGlobals
haltSignalCatcher	Globals.h	/^    bool        haltSignalCatcher;$/;"	m	struct:DvmGlobals
haltStdioConverter	Globals.h	/^    bool            haltStdioConverter;$/;"	m	struct:DvmGlobals
handle	Native.cpp	/^    void*       handle;             \/* from dlopen *\/$/;"	m	struct:SharedLib	file:
handle	Thread.h	/^    pthread_t   handle;$/;"	m	struct:Thread
handleAR_GetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleAR_GetValues(JdwpState* state,$/;"	f	file:
handleAR_Length	jdwp/JdwpHandler.cpp	/^static JdwpError handleAR_Length(JdwpState* state,$/;"	f	file:
handleAR_SetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleAR_SetValues(JdwpState* state,$/;"	f	file:
handleAT_newInstance	jdwp/JdwpHandler.cpp	/^static JdwpError handleAT_newInstance(JdwpState* state,$/;"	f	file:
handleBackwardBranchChainingCell	compiler/codegen/arm/CodegenDriver.cpp	/^static void handleBackwardBranchChainingCell(CompilationUnit *cUnit,$/;"	f	file:
handleCLR_VisibleClasses	jdwp/JdwpHandler.cpp	/^static JdwpError handleCLR_VisibleClasses(JdwpState* state,$/;"	f	file:
handleCOR_ReflectedType	jdwp/JdwpHandler.cpp	/^static JdwpError handleCOR_ReflectedType(JdwpState* state,$/;"	f	file:
handleCT_InvokeMethod	jdwp/JdwpHandler.cpp	/^static JdwpError handleCT_InvokeMethod(JdwpState* state,$/;"	f	file:
handleCT_NewInstance	jdwp/JdwpHandler.cpp	/^static JdwpError handleCT_NewInstance(JdwpState* state,$/;"	f	file:
handleCT_SetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleCT_SetValues(JdwpState* state,$/;"	f	file:
handleCT_Superclass	jdwp/JdwpHandler.cpp	/^static JdwpError handleCT_Superclass(JdwpState* state,$/;"	f	file:
handleDDM_Chunk	jdwp/JdwpHandler.cpp	/^static JdwpError handleDDM_Chunk(JdwpState* state,$/;"	f	file:
handleDef	compiler/Dataflow.cpp	/^static inline void handleDef(BitVector *defV, int dalvikRegId)$/;"	f	file:
handleER_Clear	jdwp/JdwpHandler.cpp	/^static JdwpError handleER_Clear(JdwpState* state,$/;"	f	file:
handleER_Set	jdwp/JdwpHandler.cpp	/^static JdwpError handleER_Set(JdwpState* state,$/;"	f	file:
handleEasyDivide	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleEasyDivide(CompilationUnit *cUnit, Opcode dalvikOpcode,$/;"	f	file:
handleEasyMultiply	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleEasyMultiply(CompilationUnit *cUnit,$/;"	f	file:
handleExecuteInline	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleExecuteInline(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleExecuteInlineC	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleExecuteInlineC(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleExtendedMIR	compiler/codegen/arm/CodegenDriver.cpp	/^static void handleExtendedMIR(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt10t_Fmt20t_Fmt30t	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt10t_Fmt20t_Fmt30t(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
handleFmt10x	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt10x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt11n_Fmt31i	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt11n_Fmt31i(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt11x	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt11x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt12x	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt12x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt20bc	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt20bc(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt21c_Fmt31c	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt21c_Fmt31c(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt21h	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt21h(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt21s	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt21s(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt21t	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt21t(CompilationUnit *cUnit, MIR *mir, BasicBlock *bb,$/;"	f	file:
handleFmt22b_Fmt22s	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt22b_Fmt22s(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt22c	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt22c(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt22cs	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt22cs(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt22t	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt22t(CompilationUnit *cUnit, MIR *mir, BasicBlock *bb,$/;"	f	file:
handleFmt22x_Fmt32x	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt22x_Fmt32x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt23x	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt23x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt31t	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt31t(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleFmt35c_3rc	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt35c_3rc(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
handleFmt35ms_3rms	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt35ms_3rms(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
handleFmt51l	compiler/codegen/arm/CodegenDriver.cpp	/^static bool handleFmt51l(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleHotChainingCell	compiler/codegen/arm/CodegenDriver.cpp	/^static void handleHotChainingCell(CompilationUnit *cUnit,$/;"	f	file:
handleInvokePredictedChainingCell	compiler/codegen/arm/CodegenDriver.cpp	/^static void handleInvokePredictedChainingCell(CompilationUnit *cUnit)$/;"	f	file:
handleInvokeSingletonChainingCell	compiler/codegen/arm/CodegenDriver.cpp	/^static void handleInvokeSingletonChainingCell(CompilationUnit *cUnit,$/;"	f	file:
handleJdwpOption	Init.cpp	/^static bool handleJdwpOption(const char* name, const char* value)$/;"	f	file:
handleLiveInUse	compiler/Dataflow.cpp	/^static inline void handleLiveInUse(BitVector *useV, BitVector *defV,$/;"	f	file:
handleM_LineTable	jdwp/JdwpHandler.cpp	/^static JdwpError handleM_LineTable(JdwpState* state,$/;"	f	file:
handleM_VariableTableWithGeneric	jdwp/JdwpHandler.cpp	/^static JdwpError handleM_VariableTableWithGeneric(JdwpState* state,$/;"	f	file:
handleMethodExecuteInline	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodExecuteInline(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt10t_Fmt20t_Fmt30t	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt10t_Fmt20t_Fmt30t(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
handleMethodFmt10x	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt10x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt11n_Fmt31i	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt11n_Fmt31i(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt11x	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt11x(CompilationUnit *cUnit, MIR *mir, BasicBlock *bb,$/;"	f	file:
handleMethodFmt12x	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt12x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt20bc	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt20bc(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt21c_Fmt31c	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt21c_Fmt31c(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt21h	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt21h(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt21s	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt21s(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt21t	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt21t(CompilationUnit *cUnit, MIR *mir, BasicBlock *bb,$/;"	f	file:
handleMethodFmt22b_Fmt22s	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt22b_Fmt22s(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt22c	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt22c(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt22cs	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt22cs(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt22t	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt22t(CompilationUnit *cUnit, MIR *mir, BasicBlock *bb,$/;"	f	file:
handleMethodFmt22x_Fmt32x	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt22x_Fmt32x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt23x	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt23x(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt31t	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt31t(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMethodFmt35c_3rc	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt35c_3rc(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
handleMethodFmt35ms_3rms	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt35ms_3rms(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
handleMethodFmt51l	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool handleMethodFmt51l(CompilationUnit *cUnit, MIR *mir)$/;"	f	file:
handleMonitorEnter	analysis/CodeVerify.cpp	/^void handleMonitorEnter(RegisterLine* workLine, u4 regIdx, u4 insnIdx,$/;"	f
handleMonitorExit	analysis/CodeVerify.cpp	/^void handleMonitorExit(RegisterLine* workLine, u4 regIdx, u4 insnIdx,$/;"	f
handleNormalChainingCell	compiler/codegen/arm/CodegenDriver.cpp	/^static void handleNormalChainingCell(CompilationUnit *cUnit,$/;"	f	file:
handleOR_DisableCollection	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_DisableCollection(JdwpState* state,$/;"	f	file:
handleOR_EnableCollection	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_EnableCollection(JdwpState* state,$/;"	f	file:
handleOR_GetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_GetValues(JdwpState* state,$/;"	f	file:
handleOR_InvokeMethod	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_InvokeMethod(JdwpState* state,$/;"	f	file:
handleOR_IsCollected	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_IsCollected(JdwpState* state,$/;"	f	file:
handleOR_ReferenceType	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_ReferenceType(JdwpState* state,$/;"	f	file:
handleOR_SetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleOR_SetValues(JdwpState* state,$/;"	f	file:
handlePCReconstruction	compiler/codegen/arm/CodegenDriver.cpp	/^static void handlePCReconstruction(CompilationUnit *cUnit,$/;"	f	file:
handlePacket	jdwp/JdwpAdb.cpp	/^static bool handlePacket(JdwpState* state)$/;"	f	file:
handlePacket	jdwp/JdwpSocket.cpp	/^static bool handlePacket(JdwpState* state)$/;"	f	file:
handleRT_ClassLoader	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_ClassLoader(JdwpState* state,$/;"	f	file:
handleRT_ClassObject	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_ClassObject(JdwpState* state,$/;"	f	file:
handleRT_FieldsWithGeneric	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_FieldsWithGeneric(JdwpState* state,$/;"	f	file:
handleRT_GetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_GetValues(JdwpState* state,$/;"	f	file:
handleRT_Interfaces	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_Interfaces(JdwpState* state,$/;"	f	file:
handleRT_MethodsWithGeneric	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_MethodsWithGeneric(JdwpState* state,$/;"	f	file:
handleRT_Modifiers	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_Modifiers(JdwpState* state,$/;"	f	file:
handleRT_Signature	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_Signature(JdwpState* state,$/;"	f	file:
handleRT_SignatureWithGeneric	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_SignatureWithGeneric(JdwpState* state,$/;"	f	file:
handleRT_SourceDebugExtension	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_SourceDebugExtension(JdwpState* state,$/;"	f	file:
handleRT_SourceFile	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_SourceFile(JdwpState* state,$/;"	f	file:
handleRT_Status	jdwp/JdwpHandler.cpp	/^static JdwpError handleRT_Status(JdwpState* state,$/;"	f	file:
handleSF_GetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleSF_GetValues(JdwpState* state,$/;"	f	file:
handleSF_SetValues	jdwp/JdwpHandler.cpp	/^static JdwpError handleSF_SetValues(JdwpState* state,$/;"	f	file:
handleSF_ThisObject	jdwp/JdwpHandler.cpp	/^static JdwpError handleSF_ThisObject(JdwpState* state,$/;"	f	file:
handleSR_Value	jdwp/JdwpHandler.cpp	/^static JdwpError handleSR_Value(JdwpState* state,$/;"	f	file:
handleSSADef	compiler/Dataflow.cpp	/^static void handleSSADef(CompilationUnit *cUnit, int *defs, int dalvikReg,$/;"	f	file:
handleSSAUse	compiler/Dataflow.cpp	/^static void handleSSAUse(CompilationUnit *cUnit, int *uses, int dalvikReg,$/;"	f	file:
handleSigQuit	SignalCatcher.cpp	/^static void handleSigQuit()$/;"	f	file:
handleSigUsr1	SignalCatcher.cpp	/^static void handleSigUsr1()$/;"	f	file:
handleSigUsr2	SignalCatcher.cpp	/^static void handleSigUsr2()$/;"	f	file:
handleTGR_Children	jdwp/JdwpHandler.cpp	/^static JdwpError handleTGR_Children(JdwpState* state,$/;"	f	file:
handleTGR_Name	jdwp/JdwpHandler.cpp	/^static JdwpError handleTGR_Name(JdwpState* state,$/;"	f	file:
handleTGR_Parent	jdwp/JdwpHandler.cpp	/^static JdwpError handleTGR_Parent(JdwpState* state,$/;"	f	file:
handleTR_CurrentContendedMonitor	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_CurrentContendedMonitor(JdwpState* state,$/;"	f	file:
handleTR_FrameCount	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_FrameCount(JdwpState* state,$/;"	f	file:
handleTR_Frames	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_Frames(JdwpState* state,$/;"	f	file:
handleTR_Name	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_Name(JdwpState* state,$/;"	f	file:
handleTR_Resume	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_Resume(JdwpState* state,$/;"	f	file:
handleTR_Status	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_Status(JdwpState* state,$/;"	f	file:
handleTR_Suspend	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_Suspend(JdwpState* state,$/;"	f	file:
handleTR_SuspendCount	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_SuspendCount(JdwpState* state,$/;"	f	file:
handleTR_ThreadGroup	jdwp/JdwpHandler.cpp	/^static JdwpError handleTR_ThreadGroup(JdwpState* state,$/;"	f	file:
handleVM_AllClassesWithGeneric	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_AllClassesWithGeneric(JdwpState* state,$/;"	f	file:
handleVM_AllThreads	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_AllThreads(JdwpState* state,$/;"	f	file:
handleVM_Capabilities	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_Capabilities(JdwpState* state,$/;"	f	file:
handleVM_CapabilitiesNew	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_CapabilitiesNew(JdwpState* state,$/;"	f	file:
handleVM_ClassPaths	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_ClassPaths(JdwpState* state,$/;"	f	file:
handleVM_ClassesBySignature	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_ClassesBySignature(JdwpState* state,$/;"	f	file:
handleVM_CreateString	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_CreateString(JdwpState* state,$/;"	f	file:
handleVM_Dispose	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_Dispose(JdwpState* state,$/;"	f	file:
handleVM_Exit	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_Exit(JdwpState* state,$/;"	f	file:
handleVM_IDSizes	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_IDSizes(JdwpState* state,$/;"	f	file:
handleVM_Resume	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_Resume(JdwpState* state,$/;"	f	file:
handleVM_Suspend	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_Suspend(JdwpState* state,$/;"	f	file:
handleVM_TopLevelThreadGroups	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_TopLevelThreadGroups(JdwpState* state,$/;"	f	file:
handleVM_Version	jdwp/JdwpHandler.cpp	/^static JdwpError handleVM_Version(JdwpState* state, const u1* buf,$/;"	f	file:
handler_size_bits	compiler/template/gen-template.py	/^handler_size_bits = -1000$/;"	v
handler_size_bits	mterp/gen-mterp.py	/^handler_size_bits = -1000$/;"	v
handler_size_bytes	compiler/template/gen-template.py	/^handler_size_bytes = -1000$/;"	v
handler_size_bytes	mterp/gen-mterp.py	/^handler_size_bytes = -1000$/;"	v
hasClassLiterals	compiler/CompilerIR.h	/^    bool hasClassLiterals;              \/\/ Contains class ptrs used as literals$/;"	m	struct:CompilationUnit
hasDexExtension	native/dalvik_system_DexFile.cpp	/^static bool hasDexExtension(const char* name) {$/;"	f	file:
hasGcThread	alloc/HeapSource.cpp	/^    bool hasGcThread;$/;"	m	struct:HeapSource	file:
hasInvoke	compiler/CompilerIR.h	/^    bool hasInvoke;                     \/\/ Contains an invoke instruction$/;"	m	struct:CompilationUnit
hasLoop	compiler/CompilerIR.h	/^    bool hasLoop;                       \/\/ Contains a loop$/;"	m	struct:CompilationUnit
hasNewChain	Globals.h	/^    volatile bool hasNewChain;$/;"	m	struct:DvmJitGlobals
hashValue	Hash.h	/^    u4 hashValue;$/;"	m	struct:HashEntry
hashcmpClassByClass	oo/Class.cpp	/^static int hashcmpClassByClass(const void* vclazz, const void* vaddclazz)$/;"	f	file:
hashcmpClassByCrit	oo/Class.cpp	/^static int hashcmpClassByCrit(const void* vclazz, const void* vcrit)$/;"	f	file:
hashcmpDexOrJar	native/dalvik_system_DexFile.cpp	/^static int hashcmpDexOrJar(const void* tableVal, const void* newVal)$/;"	f	file:
hashcmpNameStr	Native.cpp	/^static int hashcmpNameStr(const void* ventry, const void* vname)$/;"	f	file:
hashcmpSharedLib	Native.cpp	/^static int hashcmpSharedLib(const void* ventry, const void* vnewEntry)$/;"	f	file:
haveFullPacket	jdwp/JdwpAdb.cpp	/^static bool haveFullPacket(JdwpNetState* netState)$/;"	f	file:
haveFullPacket	jdwp/JdwpSocket.cpp	/^static bool haveFullPacket(JdwpNetState* netState)$/;"	f	file:
headIndex	AllocTracker.cpp	/^inline static int headIndex()$/;"	f	file:
headerSize	compiler/CompilerIR.h	/^    int headerSize;                     \/\/ bytes before the first code ptr$/;"	m	struct:CompilationUnit
heapAllocAndGrow	alloc/HeapSource.cpp	/^static void* heapAllocAndGrow(HeapSource *hs, Heap *heap, size_t n)$/;"	f	file:
heapBase	alloc/HeapSource.cpp	/^    char *heapBase;$/;"	m	struct:HeapSource	file:
heapGrowthLimit	Globals.h	/^    size_t      heapGrowthLimit;$/;"	m	struct:DvmGlobals
heapLength	alloc/HeapSource.cpp	/^    size_t heapLength;$/;"	m	struct:HeapSource	file:
heapMaximumSize	Globals.h	/^    size_t      heapMaximumSize;$/;"	m	struct:DvmGlobals
heapMemOp	compiler/CompilerIR.h	/^    bool heapMemOp;                     \/\/ Mark mem ops for self verification$/;"	m	struct:CompilationUnit
heapSource	alloc/HeapInternal.h	/^    HeapSource *heapSource;$/;"	m	struct:GcHeap
heapSpace	interp/Jit.h	/^    ShadowHeap heapSpace[HEAP_SPACE]; \/* copy of heap space *\/$/;"	m	struct:ShadowSpace
heapSpaceTail	interp/Jit.h	/^    ShadowHeap* heapSpaceTail;        \/* tail pointer to heapSpace *\/$/;"	m	struct:ShadowSpace
heapStartingSize	Globals.h	/^    size_t      heapStartingSize;$/;"	m	struct:DvmGlobals
heap_chunk_callback	alloc/DdmHeap.cpp	/^static void heap_chunk_callback(const void *chunkptr, size_t chunklen,$/;"	f	file:
heaps	alloc/HeapSource.cpp	/^    Heap heaps[HEAP_SOURCE_MAX_HEAP_COUNT];$/;"	m	struct:HeapSource	file:
hidden	compiler/CompilerIR.h	/^    bool hidden;$/;"	m	struct:BasicBlock
highReg	compiler/CompilerIR.h	/^    u1 highReg:6;       \/\/ 2nd physical register (if wide)$/;"	m	struct:RegLocation
hint	interp/InterpState.h	/^    JitHint hint:7;          \/\/ Hint to apply to final code of run$/;"	m	struct:JitCodeDesc
hits	AtomicCache.h	/^    int         hits;                   \/* found entry in cache *\/$/;"	m	struct:AtomicCache
host	jdwp/Jdwp.h	/^    char        host[64];$/;"	m	struct:JdwpStartupParams
host_smp_flag	Android.mk	/^host_smp_flag := -DANDROID_SMP=1$/;"	m
hprofAddIdListToRecord	hprof/Hprof.h	214;"	d
hprofAddIdToRecord	hprof/Hprof.h	213;"	d
hprofAddU1ListToRecord	hprof/HprofOutput.cpp	/^int hprofAddU1ListToRecord(hprof_record_t *rec, const u1 *values,$/;"	f
hprofAddU1ToRecord	hprof/HprofOutput.cpp	/^int hprofAddU1ToRecord(hprof_record_t *rec, u1 value)$/;"	f
hprofAddU2ListToRecord	hprof/HprofOutput.cpp	/^int hprofAddU2ListToRecord(hprof_record_t *rec, const u2 *values,$/;"	f
hprofAddU2ToRecord	hprof/HprofOutput.cpp	/^int hprofAddU2ToRecord(hprof_record_t *rec, u2 value)$/;"	f
hprofAddU4ListToRecord	hprof/HprofOutput.cpp	/^int hprofAddU4ListToRecord(hprof_record_t *rec, const u4 *values,$/;"	f
hprofAddU4ToRecord	hprof/HprofOutput.cpp	/^int hprofAddU4ToRecord(hprof_record_t *rec, u4 value)$/;"	f
hprofAddU8ListToRecord	hprof/HprofOutput.cpp	/^int hprofAddU8ListToRecord(hprof_record_t *rec, const u8 *values,$/;"	f
hprofAddU8ToRecord	hprof/HprofOutput.cpp	/^int hprofAddU8ToRecord(hprof_record_t *rec, u8 value)$/;"	f
hprofAddUtf8StringToRecord	hprof/HprofOutput.cpp	/^int hprofAddUtf8StringToRecord(hprof_record_t *rec, const char *str)$/;"	f
hprofBitmapCallback	hprof/Hprof.cpp	/^static void hprofBitmapCallback(Object *obj, void *arg)$/;"	f	file:
hprofContextInit	hprof/HprofOutput.cpp	/^void hprofContextInit(hprof_context_t *ctx, char *fileName, int fd,$/;"	f
hprofDumpClasses	hprof/HprofClass.cpp	/^int hprofDumpClasses(hprof_context_t *ctx)$/;"	f
hprofDumpHeap	hprof/Hprof.cpp	/^int hprofDumpHeap(const char* fileName, int fd, bool directToDdms)$/;"	f
hprofDumpHeapObject	hprof/HprofHeap.cpp	/^int hprofDumpHeapObject(hprof_context_t *ctx, const Object *obj)$/;"	f
hprofDumpStrings	hprof/HprofString.cpp	/^int hprofDumpStrings(hprof_context_t *ctx)$/;"	f
hprofFinishHeapDump	hprof/HprofHeap.cpp	/^int hprofFinishHeapDump(hprof_context_t *ctx)$/;"	f
hprofFlushCurrentRecord	hprof/HprofOutput.cpp	/^int hprofFlushCurrentRecord(hprof_context_t *ctx)$/;"	f
hprofFlushRecord	hprof/HprofOutput.cpp	/^int hprofFlushRecord(hprof_record_t *rec, FILE *fp)$/;"	f
hprofFreeContext	hprof/Hprof.cpp	/^void hprofFreeContext(hprof_context_t *ctx)$/;"	f
hprofLookupClassId	hprof/HprofClass.cpp	/^hprof_class_object_id hprofLookupClassId(const ClassObject *clazz)$/;"	f
hprofLookupStringId	hprof/HprofString.cpp	/^hprof_string_id hprofLookupStringId(const char *str)$/;"	f
hprofMarkRootObject	hprof/HprofHeap.cpp	/^int hprofMarkRootObject(hprof_context_t *ctx, const Object *obj, jobject jniObj)$/;"	f
hprofRootVisitor	hprof/Hprof.cpp	/^static void hprofRootVisitor(void *addr, u4 threadId, RootType type, void *arg)$/;"	f	file:
hprofSetGcScanState	hprof/HprofHeap.cpp	/^int hprofSetGcScanState(hprof_context_t *ctx,$/;"	f
hprofShutdown	hprof/Hprof.cpp	/^bool hprofShutdown(hprof_context_t *tailCtx)$/;"	f
hprofShutdown_Class	hprof/HprofClass.cpp	/^int hprofShutdown_Class()$/;"	f
hprofShutdown_String	hprof/HprofString.cpp	/^int hprofShutdown_String()$/;"	f
hprofStartHeapDump	hprof/HprofHeap.cpp	/^int hprofStartHeapDump(hprof_context_t *ctx)$/;"	f
hprofStartNewRecord	hprof/HprofOutput.cpp	/^int hprofStartNewRecord(hprof_context_t *ctx, u1 tag, u4 time)$/;"	f
hprofStartup	hprof/Hprof.cpp	/^hprof_context_t* hprofStartup(const char *outputFileName, int fd,$/;"	f
hprofStartup_Class	hprof/HprofClass.cpp	/^int hprofStartup_Class()$/;"	f
hprofStartup_String	hprof/HprofString.cpp	/^int hprofStartup_String()$/;"	f
hprof_basic_boolean	hprof/Hprof.h	/^    hprof_basic_boolean = 4,$/;"	e	enum:hprof_basic_type
hprof_basic_byte	hprof/Hprof.h	/^    hprof_basic_byte = 8,$/;"	e	enum:hprof_basic_type
hprof_basic_char	hprof/Hprof.h	/^    hprof_basic_char = 5,$/;"	e	enum:hprof_basic_type
hprof_basic_double	hprof/Hprof.h	/^    hprof_basic_double = 7,$/;"	e	enum:hprof_basic_type
hprof_basic_float	hprof/Hprof.h	/^    hprof_basic_float = 6,$/;"	e	enum:hprof_basic_type
hprof_basic_int	hprof/Hprof.h	/^    hprof_basic_int = 10,$/;"	e	enum:hprof_basic_type
hprof_basic_long	hprof/Hprof.h	/^    hprof_basic_long = 11,$/;"	e	enum:hprof_basic_type
hprof_basic_object	hprof/Hprof.h	/^    hprof_basic_object = 2,$/;"	e	enum:hprof_basic_type
hprof_basic_short	hprof/Hprof.h	/^    hprof_basic_short = 9,$/;"	e	enum:hprof_basic_type
hprof_basic_type	hprof/Hprof.h	/^enum hprof_basic_type {$/;"	g
hprof_class_object_id	hprof/Hprof.h	/^typedef hprof_id hprof_class_object_id;$/;"	t
hprof_context_t	hprof/Hprof.h	/^struct hprof_context_t {$/;"	s
hprof_heap_tag_t	hprof/Hprof.h	/^enum hprof_heap_tag_t {$/;"	g
hprof_id	hprof/Hprof.h	/^typedef u4 hprof_id;$/;"	t
hprof_object_id	hprof/Hprof.h	/^typedef hprof_id hprof_object_id;$/;"	t
hprof_record_t	hprof/Hprof.h	/^struct hprof_record_t {$/;"	s
hprof_string_id	hprof/Hprof.h	/^typedef hprof_id hprof_string_id;$/;"	t
hprof_tag_t	hprof/Hprof.h	/^enum hprof_tag_t {$/;"	g
hs2heap	alloc/HeapSource.cpp	179;"	d	file:
htobe64	shadowlib/JniUtility.h	11;"	d
htobe64	shadowlib/JniUtility.h	9;"	d
htobe64	shadowlib/ShadowLib.h	10;"	d
htobe64	shadowlib/ShadowLib.h	15;"	d
htobe64	shadowlib/buffpack.h	11;"	d
htobe64	shadowlib/buffpack.h	9;"	d
htole64	shadowlib/ShadowLib.h	11;"	d
htole64	shadowlib/ShadowLib.h	16;"	d
i	Common.h	/^    s4      i;$/;"	m	union:JValue
i	shadowlib/JniUtility.h	/^	jint i;$/;"	m	union:float_jint
i	shadowlib/ReQueue.h	/^	jint i;$/;"	m	union:float_jint
i	shadowlib/buffpack.h	/^	jint i;$/;"	m	union:float_jint
iDom	compiler/CompilerIR.h	/^    struct BasicBlock *iDom;            \/\/ Immediate dominator$/;"	m	struct:BasicBlock	typeref:struct:BasicBlock::BasicBlock
iDominated	compiler/CompilerIR.h	/^    BitVector *iDominated;              \/\/ Set nodes being immediately dominated$/;"	m	struct:BasicBlock
i_	IndirectRefTable.h	/^    size_t i_;$/;"	m	class:iref_iterator
icPatchDropped	Globals.h	/^    int                icPatchDropped;$/;"	m	struct:DvmJitGlobals
icPatchInit	Globals.h	/^    int                icPatchInit;$/;"	m	struct:DvmJitGlobals
icPatchLockFree	Globals.h	/^    int                icPatchLockFree;$/;"	m	struct:DvmJitGlobals
icPatchQueued	Globals.h	/^    int                icPatchQueued;$/;"	m	struct:DvmJitGlobals
icPatchRejected	Globals.h	/^    int                icPatchRejected;$/;"	m	struct:DvmJitGlobals
icRechainCount	Thread.h	/^    int         icRechainCount;$/;"	m	struct:Thread
id	compiler/CompilerIR.h	/^    int id;$/;"	m	struct:BasicBlock
id	jdwp/JdwpHandler.h	/^    u4  id;$/;"	m	struct:JdwpReqHeader
idealSize	alloc/HeapSource.cpp	/^    size_t idealSize;$/;"	m	struct:HeapSource	file:
idx	BitVector.h	/^    u4 idx;$/;"	m	struct:BitVectorIterator
idx	Hash.h	/^    int         idx;$/;"	m	struct:HashIter
idx	compiler/CompilerUtility.h	/^    size_t idx;$/;"	m	struct:GrowableListIterator
idx	jdwp/Jdwp.h	/^    u8          idx;            \/* relative index into code block *\/$/;"	m	struct:JdwpLocation
ifieldCount	oo/Object.h	/^    int             ifieldCount;$/;"	m	struct:ClassObject
ifieldRefCount	oo/Object.h	/^    int             ifieldRefCount; \/\/ number of fields that are object refs$/;"	m	struct:ClassObject
ifields	oo/Object.h	/^    InstField*      ifields;$/;"	m	struct:ClassObject
iftable	oo/Object.h	/^    InterfaceEntry* iftable;$/;"	m	struct:ClassObject
iftableCount	oo/Object.h	/^    int             iftableCount;$/;"	m	struct:ClassObject
ifviPool	oo/Object.h	/^    int*            ifviPool;$/;"	m	struct:ClassObject
ifviPoolCount	oo/Object.h	/^    int             ifviPoolCount;$/;"	m	struct:ClassObject
immuneLimit	alloc/MarkSweep.h	/^    const char *immuneLimit;$/;"	m	struct:GcMarkContext
importFile	compiler/template/gen-template.py	/^def importFile(tokens):$/;"	f
importFile	mterp/gen-mterp.py	/^def importFile(tokens):$/;"	f
inJitCodeCache	Thread.h	/^    void*             inJitCodeCache;$/;"	m	struct:Thread
inProfile	oo/Object.h	/^    bool            inProfile;$/;"	m	struct:Method
inUse	compiler/codegen/arm/ArmLIR.h	/^    bool inUse;                 \/\/ Has it been allocated?$/;"	m	struct:RegisterInfo
inUse	compiler/codegen/x86/X86LIR.h	/^    bool inUse;                 \/\/ Has it been allocated?$/;"	m	struct:RegisterInfo
in_alt_op_start	mterp/gen-mterp.py	/^in_alt_op_start = 0         # 0=not started, 1=started, 2=ended$/;"	v
in_op_start	compiler/template/gen-template.py	/^in_op_start = 0             # 0=not started, 1=started, 2=ended$/;"	v
in_op_start	mterp/gen-mterp.py	/^in_op_start = 0             # 0=not started, 1=started, 2=ended$/;"	v
inc	compiler/Dataflow.h	/^    int inc;    \/\/ loop incriment$/;"	m	struct:InductionVariableInfo
incTest	test/AtomicTest.cpp	/^static int incTest = 0;$/;"	v	file:
includeSelectedMethod	Globals.h	/^    bool includeSelectedMethod;$/;"	m	struct:DvmJitGlobals
includeSelectedOp	Globals.h	/^    bool includeSelectedOp;$/;"	m	struct:DvmJitGlobals
incr	test/AtomicTest.cpp	/^static void incr()$/;"	f	file:
indexOfCommon	InlineNative.cpp	/^static inline int indexOfCommon(Object* strObj, int ch, int start)$/;"	f	file:
indexof_loop1	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^indexof_loop1:$/;"	l
indexof_loop1	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^indexof_loop1:$/;"	l
indexof_loop1	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^indexof_loop1:$/;"	l
indexof_loop1	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^indexof_loop1:$/;"	l
indexof_loop1	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^indexof_loop1:$/;"	l
indexof_loop4	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^indexof_loop4:$/;"	l
indexof_loop4	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^indexof_loop4:$/;"	l
indexof_loop4	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^indexof_loop4:$/;"	l
indexof_loop4	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^indexof_loop4:$/;"	l
indexof_loop4	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^indexof_loop4:$/;"	l
indexof_nomatch	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^indexof_nomatch:$/;"	l
indexof_nomatch	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^indexof_nomatch:$/;"	l
indexof_nomatch	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^indexof_nomatch:$/;"	l
indexof_nomatch	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^indexof_nomatch:$/;"	l
indexof_nomatch	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^indexof_nomatch:$/;"	l
indexof_remainder	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^indexof_remainder:$/;"	l
indexof_remainder	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^indexof_remainder:$/;"	l
indexof_remainder	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^indexof_remainder:$/;"	l
indexof_remainder	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^indexof_remainder:$/;"	l
indexof_remainder	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^indexof_remainder:$/;"	l
indirectRefKind	IndirectRefTable.h	/^INLINE IndirectRefKind indirectRefKind(IndirectRef iref)$/;"	f
indirectRefKindName	CheckJni.cpp	/^static const char* indirectRefKindName(IndirectRef iref)$/;"	f	file:
indirectRefKindToString	IndirectRefTable.cpp	/^const char* indirectRefKindToString(IndirectRefKind kind)$/;"	f
inferTypes	compiler/Ralloc.cpp	/^static void inferTypes(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
inflateMonitor	Sync.cpp	/^static void inflateMonitor(Thread *self, Object *obj)$/;"	f	file:
inflightBaseAddr	Globals.h	/^    void *inflightBaseAddr;$/;"	m	struct:DvmJitGlobals
info	compiler/Compiler.h	/^    void* info;$/;"	m	struct:CompilerWorkOrder
info	interp/InterpState.h	/^    } info;$/;"	m	struct:JitTraceRun	typeref:union:JitTraceRun::__anon23
info	interp/Jit.h	/^    JitEntryInfo info;$/;"	m	union:JitEntryInfoUnion
infoWord	interp/Jit.h	/^    volatile int infoWord;$/;"	m	union:JitEntryInfoUnion
init	CheckJni.cpp	/^    void init(JNIEnv* env, int flags, const char* functionName, bool hasMethod) {$/;"	f	class:ScopedCheck	file:
init	IndirectRefTable.cpp	/^bool IndirectRefTable::init(size_t initialCount,$/;"	f	class:IndirectRefTable
initClassReference	InitRefs.cpp	/^static bool initClassReference(ClassObject** pClass, const char* name) {$/;"	f	file:
initClassReferences	InitRefs.cpp	/^static bool initClassReferences() {$/;"	f	file:
initConstructorReferences	InitRefs.cpp	/^static bool initConstructorReferences() {$/;"	f	file:
initDirectMethodReference	InitRefs.cpp	/^static bool initDirectMethodReference(Method** pMethod, const char* className,$/;"	f	file:
initDirectMethodReferenceByClass	InitRefs.cpp	/^static bool initDirectMethodReferenceByClass(Method** pMethod, ClassObject* clazz,$/;"	f	file:
initDirectMethodReferences	InitRefs.cpp	/^static bool initDirectMethodReferences() {$/;"	f	file:
initException	Exception.cpp	/^static bool initException(Object* exception, const char* msg, Object* cause,$/;"	f	file:
initFieldOffset	InitRefs.cpp	/^static bool initFieldOffset(ClassObject* clazz, int *pOffset,$/;"	f	file:
initFieldOffsets	InitRefs.cpp	/^static bool initFieldOffsets() {$/;"	f	file:
initFinalizerReference	InitRefs.cpp	/^static bool initFinalizerReference()$/;"	f	file:
initJdwp	Init.cpp	/^static bool initJdwp()$/;"	f	file:
initRegisterTable	analysis/CodeVerify.cpp	/^static bool initRegisterTable(const VerifierData* vdata,$/;"	f	file:
initSFields	oo/Class.cpp	/^static void initSFields(ClassObject* clazz)$/;"	f	file:
initThreadId	oo/Object.h	/^    u4              initThreadId;$/;"	m	struct:ClassObject
initVirtualMethodOffset	InitRefs.cpp	/^static bool initVirtualMethodOffset(int* pOffset, const char* className,$/;"	f	file:
initVirtualMethodOffsets	InitRefs.cpp	/^static bool initVirtualMethodOffsets() {$/;"	f	file:
initZygote	Init.cpp	/^static bool initZygote()$/;"	f	file:
initializeDominationInfo	compiler/SSATransformation.cpp	/^static bool initializeDominationInfo(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
initializing	Globals.h	/^    bool        initializing;$/;"	m	struct:DvmGlobals
initiatingLoaderCount	oo/Object.h	/^    int       initiatingLoaderCount;$/;"	m	struct:InitiatingLoaderList
initiatingLoaderList	Globals.h	/^    InitiatingLoaderList* initiatingLoaderList;$/;"	m	struct:DvmGlobals
initiatingLoaderList	oo/Object.h	/^    InitiatingLoaderList initiatingLoaderList;$/;"	m	struct:ClassObject
initiatingLoaders	oo/Object.h	/^    Object**  initiatingLoaders;$/;"	m	struct:InitiatingLoaderList
inlineCachePatchEnqueue	compiler/codegen/arm/Assemble.cpp	/^static void inlineCachePatchEnqueue(PredictedChainingCell *cellAddr,$/;"	f	file:
inlineCandidate	interp/Jit.h	/^    unsigned int           inlineCandidate:1;$/;"	m	struct:JitEntryInfo
inlineEmptyVirtualCallee	compiler/InlineTransformation.cpp	/^static bool inlineEmptyVirtualCallee(CompilationUnit *cUnit,$/;"	f	file:
inlineGetter	compiler/InlineTransformation.cpp	/^static bool inlineGetter(CompilationUnit *cUnit,$/;"	f	file:
inlineIdx	analysis/Optimize.cpp	/^    int     inlineIdx;$/;"	m	struct:InlineSub	file:
inlineSetter	compiler/InlineTransformation.cpp	/^static bool inlineSetter(CompilationUnit *cUnit,$/;"	f	file:
inlineSubs	Globals.h	/^    InlineSub*          inlineSubs;$/;"	m	struct:DvmGlobals
inlinedMethods	Globals.h	/^    Method**    inlinedMethods;$/;"	m	struct:DvmGlobals
inlinedTarget	compiler/codegen/arm/CodegenCommon.cpp	/^static RegLocation inlinedTarget(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
inlinedTargetWide	compiler/codegen/arm/CodegenCommon.cpp	/^static RegLocation inlinedTargetWide(CompilationUnit *cUnit, MIR *mir,$/;"	f	file:
inputBuffer	jdwp/JdwpAdb.cpp	/^    unsigned char       inputBuffer[kInputBufferSize];$/;"	m	struct:JdwpNetState	file:
inputBuffer	jdwp/JdwpSocket.cpp	/^    unsigned char  inputBuffer[kInputBufferSize];$/;"	m	struct:JdwpNetState	file:
inputCount	jdwp/JdwpAdb.cpp	/^    int                 inputCount;$/;"	m	struct:JdwpNetState	file:
inputCount	jdwp/JdwpSocket.cpp	/^    int     inputCount;$/;"	m	struct:JdwpNetState	file:
insSize	oo/Object.h	/^    u2              insSize;$/;"	m	struct:Method
insertChainingSwitch	compiler/codegen/arm/CodegenDriver.cpp	/^static void insertChainingSwitch(CompilationUnit *cUnit)$/;"	f	file:
insertClassMethodInfo	interp/Jit.cpp	/^static void insertClassMethodInfo(Thread* self,$/;"	f	file:
insertMethodStubs	oo/Class.cpp	/^static bool insertMethodStubs(ClassObject* clazz)$/;"	f	file:
insertMoveResult	interp/Jit.cpp	/^static void insertMoveResult(const u2 *lastPC, int len, int offset,$/;"	f	file:
insertPhiNodeOperands	compiler/SSATransformation.cpp	/^static bool insertPhiNodeOperands(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
insertPhiNodes	compiler/SSATransformation.cpp	/^static void insertPhiNodes(CompilationUnit *cUnit)$/;"	f	file:
insertString	Intern.cpp	/^static StringObject* insertString(HashTable* table, u4 key, StringObject* value)$/;"	f	file:
insertWrapper	compiler/codegen/arm/ArmLIR.h	/^        bool insertWrapper:1;   \/\/ insert branch to emulate memory accesses$/;"	m	struct:ArmLIR::__anon40
insnFlags	analysis/CodeVerify.h	/^    InsnFlags*      insnFlags;$/;"	m	struct:VerifierData
insnRegCount	analysis/CodeVerify.h	/^    u4              insnRegCount;$/;"	m	struct:VerifierData
insnRegCountPlus	analysis/CodeVerify.cpp	/^    size_t      insnRegCountPlus;$/;"	m	struct:RegisterTable	file:
insns	oo/Object.h	/^    const u2*       insns;          \/* instructions, in memory-mapped .dex *\/$/;"	m	struct:Method
insnsSize	analysis/CodeVerify.h	/^    u4              insnsSize;$/;"	m	struct:VerifierData
installLiteralPools	compiler/codegen/arm/Assemble.cpp	/^static void installLiteralPools(CompilationUnit *cUnit)$/;"	f	file:
instanceData	oo/Object.h	/^    u4              instanceData[1];$/;"	m	struct:DataObject
instanceData	oo/Object.h	/^    u4              instanceData[1];$/;"	m	struct:StringObject
instanceData	oo/Object.h	/^    u4              instanceData[CLASS_FIELD_SLOTS];$/;"	m	struct:ClassObject
instanceOnly	jdwp/JdwpEvent.h	/^    } instanceOnly;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon34
instanceofCache	Globals.h	/^    AtomicCache* instanceofCache;$/;"	m	struct:DvmGlobals
instrsExamined	analysis/DexVerify.h	/^    size_t instrsExamined;     \/* incr on first visit of instruction *\/$/;"	m	struct:VerifierStats
instrsReexamined	analysis/DexVerify.h	/^    size_t instrsReexamined;   \/* incr on each repeat visit of instruction *\/$/;"	m	struct:VerifierStats
instructionCountEnableCount	Globals.h	/^    int         instructionCountEnableCount;$/;"	m	struct:DvmGlobals
instructionIsMagicNop	interp/Interp.cpp	/^static bool instructionIsMagicNop(const u2* addr)$/;"	f	file:
instructionSet	compiler/Compiler.h	/^    JitInstructionSetType instructionSet;$/;"	m	struct:JitTranslationInfo
instructionSet	compiler/CompilerIR.h	/^    JitInstructionSetType instructionSet;$/;"	m	struct:CompilationUnit
instructionSet	interp/Jit.h	/^    JitInstructionSetType  instructionSet:3;$/;"	m	struct:JitEntryInfo
interfaceCount	oo/Object.h	/^    int             interfaceCount;$/;"	m	struct:ClassObject
interfaces	oo/Object.h	/^    ClassObject**   interfaces;$/;"	m	struct:ClassObject
internLock	Globals.h	/^    pthread_mutex_t internLock;$/;"	m	struct:DvmGlobals
internalErrorObj	Globals.h	/^    Object*     internalErrorObj;$/;"	m	struct:DvmGlobals
internalLocalRefTable	Thread.h	/^    ReferenceTable  internalLocalRefTable;$/;"	m	struct:Thread
internalThreadStart	Thread.cpp	/^static void* internalThreadStart(void* arg)$/;"	f	file:
internedStrings	Globals.h	/^    HashTable*  internedStrings;$/;"	m	struct:DvmGlobals
interpBreak	Thread.h	/^    InterpBreak interpBreak;$/;"	m	struct:Thread
interpSave	Thread.h	/^    InterpSaveState interpSave;$/;"	m	struct:Thread
interpStackEnd	Thread.h	/^    const u1*   interpStackEnd;$/;"	m	struct:Thread
interpStackEnd	interp/Jit.h	/^    const u1* interpStackEnd;$/;"	m	struct:ShadowSpace
interpStackSize	Thread.h	/^    int         interpStackSize;$/;"	m	struct:Thread
interpStackStart	Thread.h	/^    u1*         interpStackStart;$/;"	m	struct:Thread
interpThreadStart	Thread.cpp	/^static void* interpThreadStart(void* arg)$/;"	f	file:
interp_defs_file	compiler/template/gen-template.py	/^interp_defs_file = "TemplateOpList.h" # need opcode list$/;"	v
interp_defs_file	mterp/gen-mterp.py	/^interp_defs_file = "..\/..\/libdex\/DexOpcodes.h" # need opcode list$/;"	v
interrupted	Thread.h	/^    bool        interrupted;$/;"	m	struct:Thread
invocation_buf	shadowlib/ReProtocol.h	/^		Map<ordering_id_type, Buffer*> invocation_buf;$/;"	m	class:ReProtocol
invokeInProgress	jdwp/JdwpEvent.cpp	/^static bool invokeInProgress(JdwpState* state)$/;"	f	file:
invokeMonoGetterInlined	Globals.h	/^    int                invokeMonoGetterInlined;$/;"	m	struct:DvmJitGlobals
invokeMonoSetterInlined	Globals.h	/^    int                invokeMonoSetterInlined;$/;"	m	struct:DvmJitGlobals
invokeMonomorphic	Globals.h	/^    int                invokeMonomorphic;$/;"	m	struct:DvmJitGlobals
invokeNative	Globals.h	/^    int                invokeNative;$/;"	m	struct:DvmJitGlobals
invokeNeeded	Debugger.h	/^    bool invokeNeeded;$/;"	m	struct:DebugInvokeReq
invokePolyGetterInlined	Globals.h	/^    int                invokePolyGetterInlined;$/;"	m	struct:DvmJitGlobals
invokePolySetterInlined	Globals.h	/^    int                invokePolySetterInlined;$/;"	m	struct:DvmJitGlobals
invokePolymorphic	Globals.h	/^    int                invokePolymorphic;$/;"	m	struct:DvmJitGlobals
invokeReq	Thread.h	/^    DebugInvokeReq  invokeReq;$/;"	m	struct:Thread
iref_iterator	IndirectRefTable.h	/^    explicit iref_iterator(IndirectRefSlot* table, size_t i, size_t capacity) :$/;"	f	class:iref_iterator
iref_iterator	IndirectRefTable.h	/^class iref_iterator {$/;"	c
isArrayInstanceOf	oo/TypeCheck.cpp	/^static int isArrayInstanceOf(const ClassObject* sub, const ClassObject* clazz)$/;"	f	file:
isArrayInstanceOfArray	oo/TypeCheck.cpp	/^static int isArrayInstanceOfArray(const ClassObject* subElemClass, int subDim,$/;"	f	file:
isClass	arch/x86/Call386ABI.S	/^isClass:$/;"	l
isClosed	shadowlib/ReProtocol.h	/^		bool isClosed;$/;"	m	class:ReProtocol
isCode	interp/InterpState.h	/^    u4 isCode:1;$/;"	m	struct:JitTraceRun
isConcurrent	alloc/Heap.h	/^  bool isConcurrent;$/;"	m	struct:GcSpec
isConcurrent	alloc/MarkSweep.cpp	/^    bool isConcurrent;$/;"	m	struct:SweepContext	file:
isConnected	jdwp/JdwpAdb.cpp	/^static bool isConnected(struct JdwpState* state)$/;"	f	file:
isConnected	jdwp/JdwpPriv.h	/^    bool (*isConnected)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
isConnected	jdwp/JdwpSocket.cpp	/^static bool isConnected(JdwpState* state)$/;"	f	file:
isConstantV	compiler/CompilerIR.h	/^    BitVector *isConstantV;             \/\/ length == numSSAReg$/;"	m	struct:CompilationUnit
isCorrectInvokeKind	analysis/CodeVerify.cpp	/^static bool isCorrectInvokeKind(MethodType methodType, Method* resMethod)$/;"	f	file:
isCountUpLoop	compiler/Loop.h	/^    bool isCountUpLoop;                 \/\/ count up or down loop$/;"	m	struct:LoopAnalysis
isDaemon	Thread.h	/^    bool        isDaemon;$/;"	m	struct:InternalStartArgs
isDalvikRegisterClobbered	compiler/codegen/arm/LocalOptimizations.cpp	/^static inline bool isDalvikRegisterClobbered(ArmLIR *lir1, ArmLIR *lir2)$/;"	f	file:
isDalvikThread	Thread.cpp	/^static bool isDalvikThread(pid_t tid) {$/;"	f	file:
isDataChunk	analysis/VfyBasicBlock.cpp	/^static bool isDataChunk(u2 insn)$/;"	f	file:
isDecided	shadowlib/ReAgent.cpp	/^static bool isDecided = false;$/;"	v	file:
isDex	native/dalvik_system_DexFile.cpp	/^    bool        isDex;$/;"	m	struct:DexOrJar	file:
isEnqueuable	alloc/MarkSweep.cpp	/^static bool isEnqueuable(const Object *reference)$/;"	f	file:
isFP	arch/x86/Call386ABI.S	/^isFP:$/;"	l
isFallThroughFromInvoke	compiler/CompilerIR.h	/^    bool isFallThroughFromInvoke;       \/\/ True means the block needs alignment$/;"	m	struct:BasicBlock
isFinalizerReference	alloc/MarkSweep.cpp	/^static bool isFinalizerReference(const Object *obj)$/;"	f	file:
isForward	alloc/Copying.cpp	/^static int isForward(const void *addr)$/;"	f	file:
isGoto	compiler/Frontend.cpp	/^static inline bool isGoto(MIR *insn)$/;"	f	file:
isIndVarV	compiler/Loop.h	/^    BitVector *isIndVarV;               \/\/ length == numSSAReg$/;"	m	struct:LoopAnalysis
isInitMethod	analysis/CodeVerify.cpp	/^static bool isInitMethod(const Method* meth)$/;"	f	file:
isInstanceof	oo/TypeCheck.cpp	/^static inline int isInstanceof(const ClassObject* instance,$/;"	f	file:
isMappedReadOnly	DvmDex.h	/^    bool                isMappedReadOnly;$/;"	m	struct:DvmDex
isMarked	alloc/MarkSweep.cpp	/^static bool isMarked(const Object *obj, const GcMarkContext *ctx)$/;"	f	file:
isMethodEntry	interp/Jit.h	/^    unsigned int           isMethodEntry:1;$/;"	m	struct:JitEntryInfo
isNop	compiler/codegen/arm/ArmLIR.h	/^        bool isNop:1;           \/\/ LIR is optimized away$/;"	m	struct:ArmLIR::__anon40
isNop	compiler/codegen/x86/X86LIR.h	/^    bool isNop;         \/\/ LIR is optimized away$/;"	m	struct:X86LIR
isObjectDirty	alloc/CardTable.cpp	/^static bool isObjectDirty(const Object *obj)$/;"	f	file:
isPackage	Globals.h	/^    bool    isPackage;          \/* string ended with "..."? *\/$/;"	m	struct:AssertionControl
isPartial	alloc/Heap.h	/^  bool isPartial;$/;"	m	struct:GcSpec
isPermanentString	alloc/Copying.cpp	/^static int isPermanentString(const StringObject *obj) {$/;"	f	file:
isPhantomReference	alloc/Copying.cpp	/^static bool isPhantomReference(const Object *obj)$/;"	f	file:
isPhantomReference	alloc/MarkSweep.cpp	/^static bool isPhantomReference(const Object *obj)$/;"	f	file:
isPopCountLE2	compiler/codegen/arm/CodegenDriver.cpp	/^static bool isPopCountLE2(unsigned int x)$/;"	f	file:
isPowerOfTwo	compiler/codegen/arm/CodegenDriver.cpp	/^static bool isPowerOfTwo(int x)$/;"	f	file:
isPseudoOpcode	compiler/codegen/arm/ArmLIR.h	311;"	d
isPushedOnMarkStack	alloc/CardTable.cpp	/^static bool isPushedOnMarkStack(const Object *obj)$/;"	f	file:
isReferenceEnqueuable	alloc/Copying.cpp	/^static bool isReferenceEnqueuable(const Object *ref)$/;"	f	file:
isReferenceType	analysis/RegisterMap.cpp	/^static inline bool isReferenceType(RegType type)$/;"	f	file:
isReferentUnmarked	alloc/CardTable.cpp	/^static bool isReferentUnmarked(const Object *obj,$/;"	f	file:
isSensitiveThreadHook	Globals.h	/^    bool        (*isSensitiveThreadHook)(void);$/;"	m	struct:DvmGlobals
isSignedShort	arch/x86/Call386ABI.S	/^isSignedShort:$/;"	l
isSimpleCountedLoop	compiler/Loop.cpp	/^static bool isSimpleCountedLoop(CompilationUnit *cUnit)$/;"	f	file:
isSmall	arch/x86/Call386ABI.S	/^isSmall:$/;"	l
isSoftLimited	alloc/HeapSource.cpp	/^static bool isSoftLimited(const HeapSource *hs)$/;"	f	file:
isSoftReference	alloc/Copying.cpp	/^static int isSoftReference(const Object *obj)$/;"	f	file:
isSoftReference	alloc/MarkSweep.cpp	/^static bool isSoftReference(const Object *obj)$/;"	f	file:
isSpaceInternal	alloc/Copying.cpp	/^static bool isSpaceInternal(u1 *addr, int space)$/;"	f	file:
isTagPrimitive	Debugger.cpp	/^static bool isTagPrimitive(u1 tag)$/;"	f	file:
isUnconditionalBranch	compiler/Frontend.cpp	/^static inline bool isUnconditionalBranch(MIR *insn)$/;"	f	file:
isUnmarkedObject	alloc/MarkSweep.cpp	/^static int isUnmarkedObject(void *obj)$/;"	f	file:
isValidAddress	alloc/Copying.cpp	/^static int isValidAddress(const HeapSource *heapSource, const u1 *addr)$/;"	f	file:
isWeakInternedString	alloc/CardTable.cpp	/^static bool isWeakInternedString(const Object *obj)$/;"	f	file:
isWeakReference	alloc/Copying.cpp	/^static int isWeakReference(const Object *obj)$/;"	f	file:
isWeakReference	alloc/MarkSweep.cpp	/^static bool isWeakReference(const Object *obj)$/;"	f	file:
isZygote	shadowlib/ReAgent.cpp	/^static bool isZygote = true;$/;"	v	file:
is_valid	shadowlib/Socket.h	/^  bool is_valid() const { return m_sock != -1; }$/;"	f	class:Socket
is_zeroed	alloc/TEST/HeapBitmapTest/main.c	/^bool is_zeroed(const HeapBitmap *hb)$/;"	f
iterator	IndirectRefTable.h	/^    typedef iref_iterator iterator;$/;"	t	struct:IndirectRefTable
ivList	compiler/Loop.h	/^    GrowableList *ivList;               \/\/ induction variables$/;"	m	struct:LoopAnalysis
ivReg	compiler/Dataflow.h	/^    int ivReg;$/;"	m	struct:ArrayAccessInfo
j	Common.h	/^    s8      j;$/;"	m	union:JValue
j32_arg_1	arch/sh/CallSH4ABI.S	/^j32_arg_1:$/;"	l
j32_arg_fatal_error	arch/sh/CallSH4ABI.S	/^j32_arg_fatal_error:$/;"	l
j32_ret	arch/sh/CallSH4ABI.S	/^j32_ret:$/;"	l
javaLangDouble_doubleToLongBits	InlineNative.cpp	/^bool javaLangDouble_doubleToLongBits(u4 arg0, u4 arg1, u4 arg2, u4 arg,$/;"	f
javaLangDouble_doubleToRawLongBits	InlineNative.cpp	/^bool javaLangDouble_doubleToRawLongBits(u4 arg0, u4 arg1, u4 arg2,$/;"	f
javaLangDouble_longBitsToDouble	InlineNative.cpp	/^bool javaLangDouble_longBitsToDouble(u4 arg0, u4 arg1, u4 arg2, u4 arg,$/;"	f
javaLangFloat_floatToIntBits	InlineNative.cpp	/^bool javaLangFloat_floatToIntBits(u4 arg0, u4 arg1, u4 arg2, u4 arg,$/;"	f
javaLangFloat_floatToRawIntBits	InlineNative.cpp	/^bool javaLangFloat_floatToRawIntBits(u4 arg0, u4 arg1, u4 arg2, u4 arg,$/;"	f
javaLangFloat_intBitsToFloat	InlineNative.cpp	/^bool javaLangFloat_intBitsToFloat(u4 arg0, u4 arg1, u4 arg2, u4 arg,$/;"	f
javaLangMath_abs_double	InlineNative.cpp	/^bool javaLangMath_abs_double(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_abs_float	InlineNative.cpp	/^bool javaLangMath_abs_float(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_abs_int	InlineNative.cpp	/^bool javaLangMath_abs_int(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_abs_long	InlineNative.cpp	/^bool javaLangMath_abs_long(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_cos	InlineNative.cpp	/^bool javaLangMath_cos(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_max_int	InlineNative.cpp	/^bool javaLangMath_max_int(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_min_int	InlineNative.cpp	/^bool javaLangMath_min_int(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_sin	InlineNative.cpp	/^bool javaLangMath_sin(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangMath_sqrt	InlineNative.cpp	/^bool javaLangMath_sqrt(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangString_charAt	InlineNative.cpp	/^bool javaLangString_charAt(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangString_compareTo	InlineNative.cpp	/^bool javaLangString_compareTo(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangString_equals	InlineNative.cpp	/^bool javaLangString_equals(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangString_fastIndexOf_II	InlineNative.cpp	/^bool javaLangString_fastIndexOf_II(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangString_isEmpty	InlineNative.cpp	/^bool javaLangString_isEmpty(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
javaLangString_length	InlineNative.cpp	/^bool javaLangString_length(u4 arg0, u4 arg1, u4 arg2, u4 arg3,$/;"	f
jdouble_arg	arch/sh/CallSH4ABI.S	/^jdouble_arg:$/;"	l
jdouble_arg_1	arch/sh/CallSH4ABI.S	/^jdouble_arg_1:$/;"	l
jdouble_arg_2	arch/sh/CallSH4ABI.S	/^jdouble_arg_2:$/;"	l
jdouble_arg_3	arch/sh/CallSH4ABI.S	/^jdouble_arg_3:$/;"	l
jdouble_ret	arch/sh/CallSH4ABI.S	/^jdouble_ret:$/;"	l
jdwpAllowed	Globals.h	/^    bool        jdwpAllowed;        \/\/ debugging allowed for this process?$/;"	m	struct:DvmGlobals
jdwpConfigured	Globals.h	/^    bool        jdwpConfigured;     \/\/ has debugging info been provided?$/;"	m	struct:DvmGlobals
jdwpHost	Globals.h	/^    char*       jdwpHost;$/;"	m	struct:DvmGlobals
jdwpPort	Globals.h	/^    int         jdwpPort;$/;"	m	struct:DvmGlobals
jdwpReadLocation	jdwp/JdwpHandler.cpp	/^static void jdwpReadLocation(const u1** pBuf, JdwpLocation* pLoc)$/;"	f	file:
jdwpReadValue	jdwp/JdwpHandler.cpp	/^static u8 jdwpReadValue(const u1** pBuf, int width)$/;"	f	file:
jdwpServer	Globals.h	/^    bool        jdwpServer;$/;"	m	struct:DvmGlobals
jdwpState	Globals.h	/^    JdwpState*  jdwpState;$/;"	m	struct:DvmGlobals
jdwpSuspend	Globals.h	/^    bool        jdwpSuspend;$/;"	m	struct:DvmGlobals
jdwpThreadStart	jdwp/JdwpMain.cpp	/^static void* jdwpThreadStart(void* arg)$/;"	f	file:
jdwpTransport	Globals.h	/^    JdwpTransportType jdwpTransport;$/;"	m	struct:DvmGlobals
jdwpWriteValue	jdwp/JdwpHandler.cpp	/^static void jdwpWriteValue(ExpandBuf* pReply, int width, u8 value)$/;"	f	file:
jfloat_arg	arch/sh/CallSH4ABI.S	/^jfloat_arg:$/;"	l
jfloat_arg_1	arch/sh/CallSH4ABI.S	/^jfloat_arg_1:$/;"	l
jfloat_arg_2	arch/sh/CallSH4ABI.S	/^jfloat_arg_2:$/;"	l
jfloat_arg_3	arch/sh/CallSH4ABI.S	/^jfloat_arg_3:$/;"	l
jfloat_arg_4	arch/sh/CallSH4ABI.S	/^jfloat_arg_4:$/;"	l
jfloat_arg_5	arch/sh/CallSH4ABI.S	/^jfloat_arg_5:$/;"	l
jfloat_arg_6	arch/sh/CallSH4ABI.S	/^jfloat_arg_6:$/;"	l
jfloat_arg_7	arch/sh/CallSH4ABI.S	/^jfloat_arg_7:$/;"	l
jfloat_fatal_error	arch/sh/CallSH4ABI.S	/^jfloat_fatal_error:$/;"	l
jfloat_ret	arch/sh/CallSH4ABI.S	/^jfloat_ret:$/;"	l
jitExitState	interp/Jit.h	/^    SelfVerificationState jitExitState;  \/* exit point for JIT'ed code *\/$/;"	m	struct:ShadowSpace
jitMode	compiler/CompilerIR.h	/^    JitMode jitMode;$/;"	m	struct:CompilationUnit
jitProfileAddrToLine	compiler/codegen/arm/Assemble.cpp	/^typedef struct jitProfileAddrToLine {$/;"	s	file:
jitProfileAddrToLine	compiler/codegen/arm/Assemble.cpp	/^} jitProfileAddrToLine;$/;"	t	typeref:struct:jitProfileAddrToLine	file:
jitResumeDPC	Thread.h	/^    const u2*         jitResumeDPC;     \/\/ Dalvik inst following single-step$/;"	m	struct:Thread
jitResumeNPC	Thread.h	/^    const void*       jitResumeNPC;     \/\/ Translation return point$/;"	m	struct:Thread
jitResumeNSP	Thread.h	/^    const u4*         jitResumeNSP;     \/\/ Native SP at return point$/;"	m	struct:Thread
jitSVShadowRunEnd	mterp/armv5te/footer.S	/^jitSVShadowRunEnd:$/;"	l
jitSVShadowRunEnd	mterp/out/InterpAsm-armv5te-vfp.S	/^jitSVShadowRunEnd:$/;"	l
jitSVShadowRunEnd	mterp/out/InterpAsm-armv5te.S	/^jitSVShadowRunEnd:$/;"	l
jitSVShadowRunEnd	mterp/out/InterpAsm-armv7-a-neon.S	/^jitSVShadowRunEnd:$/;"	l
jitSVShadowRunEnd	mterp/out/InterpAsm-armv7-a.S	/^jitSVShadowRunEnd:$/;"	l
jitSVShadowRunStart	mterp/armv5te/footer.S	/^jitSVShadowRunStart:$/;"	l
jitSVShadowRunStart	mterp/out/InterpAsm-armv5te-vfp.S	/^jitSVShadowRunStart:$/;"	l
jitSVShadowRunStart	mterp/out/InterpAsm-armv5te.S	/^jitSVShadowRunStart:$/;"	l
jitSVShadowRunStart	mterp/out/InterpAsm-armv7-a-neon.S	/^jitSVShadowRunStart:$/;"	l
jitSVShadowRunStart	mterp/out/InterpAsm-armv7-a.S	/^jitSVShadowRunStart:$/;"	l
jitState	Thread.h	/^    JitState    jitState;$/;"	m	struct:Thread
jitTableEntriesUsed	Globals.h	/^    unsigned int jitTableEntriesUsed;$/;"	m	struct:DvmJitGlobals
jitTableMask	Globals.h	/^    unsigned int jitTableMask;$/;"	m	struct:DvmJitGlobals
jitTableSize	Globals.h	/^    unsigned int jitTableSize;$/;"	m	struct:DvmJitGlobals
jitThreshold	Thread.h	/^    int               jitThreshold;$/;"	m	struct:Thread
jitTime	Globals.h	/^    u8                 jitTime;$/;"	m	struct:DvmJitGlobals
jitToInterpEntries	Thread.h	/^    struct JitToInterpEntries jitToInterpEntries;$/;"	m	struct:Thread	typeref:struct:Thread::JitToInterpEntries
jlong_arg	arch/sh/CallSH4ABI.S	/^jlong_arg:$/;"	l
jlong_ret	arch/sh/CallSH4ABI.S	/^jlong_ret:$/;"	l
jniArgInfo	oo/Object.h	/^    int             jniArgInfo;$/;"	m	struct:Method
jniEnv	Thread.h	/^    JNIEnv*     jniEnv;$/;"	m	struct:Thread
jniGlobalRefHiMark	Globals.h	/^    int         jniGlobalRefHiMark;$/;"	m	struct:DvmGlobals
jniGlobalRefLoMark	Globals.h	/^    int         jniGlobalRefLoMark;$/;"	m	struct:DvmGlobals
jniGlobalRefLock	Globals.h	/^    pthread_mutex_t jniGlobalRefLock;$/;"	m	struct:DvmGlobals
jniGlobalRefTable	Globals.h	/^    IndirectRefTable jniGlobalRefTable;$/;"	m	struct:DvmGlobals
jniGrefLimit	Globals.h	/^    int         jniGrefLimit;       \/\/ 0 means no limit$/;"	m	struct:DvmGlobals
jniLocalRefTable	Thread.h	/^    IndirectRefTable jniLocalRefTable;$/;"	m	struct:Thread
jniMonitorRefTable	Thread.h	/^    ReferenceTable  jniMonitorRefTable;$/;"	m	struct:Thread
jniPinRefLock	Globals.h	/^    pthread_mutex_t jniPinRefLock;$/;"	m	struct:DvmGlobals
jniPinRefTable	Globals.h	/^    ReferenceTable  jniPinRefTable;$/;"	m	struct:DvmGlobals
jniSignature	Debugger.cpp	/^static const char* jniSignature(ClassObject* clazz)$/;"	f	file:
jniTrace	Globals.h	/^    char*       jniTrace;$/;"	m	struct:DvmGlobals
jniVm	Globals.h	/^    JavaVM*     jniVm;$/;"	m	struct:DvmJniGlobals
jniWeakGlobalRefLock	Globals.h	/^    pthread_mutex_t jniWeakGlobalRefLock;$/;"	m	struct:DvmGlobals
jniWeakGlobalRefTable	Globals.h	/^    IndirectRefTable jniWeakGlobalRefTable;$/;"	m	struct:DvmGlobals
kAllNodes	compiler/Compiler.h	/^    kAllNodes = 0,              \/\/ All nodes$/;"	e	enum:DataFlowAnalysisMode
kAllObjects	reflect/Annotation.cpp	/^    kAllObjects,         \/* return everything as an object *\/$/;"	e	enum:AnnotationResultStyle	file:
kAllRaw	reflect/Annotation.cpp	/^    kAllRaw,             \/* return everything as a raw value or index *\/$/;"	e	enum:AnnotationResultStyle	file:
kAnyReg	compiler/CompilerIR.h	/^    kAnyReg,$/;"	e	enum:RegisterClass
kArm16BitData	compiler/codegen/arm/ArmLIR.h	/^    kArm16BitData,       \/* DATA   [0] rd[15..0] *\/$/;"	e	enum:ArmOpcode
kArmAsr	compiler/codegen/arm/ArmLIR.h	/^    kArmAsr = 0x2,$/;"	e	enum:ArmShiftEncodings
kArmChainingCellBottom	compiler/codegen/arm/ArmLIR.h	/^    kArmChainingCellBottom = -18,$/;"	e	enum:ArmOpcode
kArmCondAl	compiler/codegen/arm/ArmLIR.h	/^    kArmCondAl = 0xe,    \/* 1110 *\/$/;"	e	enum:ArmConditionCode
kArmCondCc	compiler/codegen/arm/ArmLIR.h	/^    kArmCondCc = 0x3,    \/* 0011 *\/$/;"	e	enum:ArmConditionCode
kArmCondCs	compiler/codegen/arm/ArmLIR.h	/^    kArmCondCs = 0x2,    \/* 0010 *\/$/;"	e	enum:ArmConditionCode
kArmCondEq	compiler/codegen/arm/ArmLIR.h	/^    kArmCondEq = 0x0,    \/* 0000 *\/$/;"	e	enum:ArmConditionCode
kArmCondGe	compiler/codegen/arm/ArmLIR.h	/^    kArmCondGe = 0xa,    \/* 1010 *\/$/;"	e	enum:ArmConditionCode
kArmCondGt	compiler/codegen/arm/ArmLIR.h	/^    kArmCondGt = 0xc,    \/* 1100 *\/$/;"	e	enum:ArmConditionCode
kArmCondHi	compiler/codegen/arm/ArmLIR.h	/^    kArmCondHi = 0x8,    \/* 1000 *\/$/;"	e	enum:ArmConditionCode
kArmCondLe	compiler/codegen/arm/ArmLIR.h	/^    kArmCondLe = 0xd,    \/* 1101 *\/$/;"	e	enum:ArmConditionCode
kArmCondLs	compiler/codegen/arm/ArmLIR.h	/^    kArmCondLs = 0x9,    \/* 1001 *\/$/;"	e	enum:ArmConditionCode
kArmCondLt	compiler/codegen/arm/ArmLIR.h	/^    kArmCondLt = 0xb,    \/* 1011 *\/$/;"	e	enum:ArmConditionCode
kArmCondMi	compiler/codegen/arm/ArmLIR.h	/^    kArmCondMi = 0x4,    \/* 0100 *\/$/;"	e	enum:ArmConditionCode
kArmCondNe	compiler/codegen/arm/ArmLIR.h	/^    kArmCondNe = 0x1,    \/* 0001 *\/$/;"	e	enum:ArmConditionCode
kArmCondNv	compiler/codegen/arm/ArmLIR.h	/^    kArmCondNv = 0xf,    \/* 1111 *\/$/;"	e	enum:ArmConditionCode
kArmCondPl	compiler/codegen/arm/ArmLIR.h	/^    kArmCondPl = 0x5,    \/* 0101 *\/$/;"	e	enum:ArmConditionCode
kArmCondVc	compiler/codegen/arm/ArmLIR.h	/^    kArmCondVc = 0x7,    \/* 0111 *\/$/;"	e	enum:ArmConditionCode
kArmCondVs	compiler/codegen/arm/ArmLIR.h	/^    kArmCondVs = 0x6,    \/* 0110 *\/$/;"	e	enum:ArmConditionCode
kArmLast	compiler/codegen/arm/ArmLIR.h	/^    kArmLast,$/;"	e	enum:ArmOpcode
kArmLsl	compiler/codegen/arm/ArmLIR.h	/^    kArmLsl = 0x0,$/;"	e	enum:ArmShiftEncodings
kArmLsr	compiler/codegen/arm/ArmLIR.h	/^    kArmLsr = 0x1,$/;"	e	enum:ArmShiftEncodings
kArmPseudoBarrier	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoBarrier = -17,$/;"	e	enum:ArmOpcode
kArmPseudoChainingCellBackwardBranch	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoChainingCellBackwardBranch = -11,$/;"	e	enum:ArmOpcode
kArmPseudoChainingCellHot	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoChainingCellHot = -10,$/;"	e	enum:ArmOpcode
kArmPseudoChainingCellInvokePredicted	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoChainingCellInvokePredicted = -9,$/;"	e	enum:ArmOpcode
kArmPseudoChainingCellInvokeSingleton	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoChainingCellInvokeSingleton = -8,$/;"	e	enum:ArmOpcode
kArmPseudoChainingCellNormal	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoChainingCellNormal = -7,$/;"	e	enum:ArmOpcode
kArmPseudoDalvikByteCodeBoundary	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoDalvikByteCodeBoundary = -6,$/;"	e	enum:ArmOpcode
kArmPseudoEHBlockLabel	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoEHBlockLabel = -2,$/;"	e	enum:ArmOpcode
kArmPseudoEntryBlock	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoEntryBlock = -14,$/;"	e	enum:ArmOpcode
kArmPseudoExitBlock	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoExitBlock = -13,$/;"	e	enum:ArmOpcode
kArmPseudoExtended	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoExtended = -16,$/;"	e	enum:ArmOpcode
kArmPseudoNormalBlockLabel	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoNormalBlockLabel = -1,$/;"	e	enum:ArmOpcode
kArmPseudoPCReconstructionBlockLabel	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoPCReconstructionBlockLabel = -3,$/;"	e	enum:ArmOpcode
kArmPseudoPCReconstructionCell	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoPCReconstructionCell = -4,$/;"	e	enum:ArmOpcode
kArmPseudoPseudoAlign4	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoPseudoAlign4 = -5,$/;"	e	enum:ArmOpcode
kArmPseudoSSARep	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoSSARep = -15,$/;"	e	enum:ArmOpcode
kArmPseudoTargetLabel	compiler/codegen/arm/ArmLIR.h	/^    kArmPseudoTargetLabel = -12,$/;"	e	enum:ArmOpcode
kArmRor	compiler/codegen/arm/ArmLIR.h	/^    kArmRor = 0x3$/;"	e	enum:ArmShiftEncodings
kBasePort	jdwp/JdwpSocket.cpp	35;"	d	file:
kBitVectorGrowth	BitVector.cpp	25;"	d	file:
kCCode	compiler/codegen/arm/ArmLIR.h	/^    kCCode      = kRegEnd,$/;"	e	enum:ResourceEncodingPos
kCallsiteInterpreted	Globals.h	/^    kCallsiteInterpreted,$/;"	e	enum:NoChainExits
kCannotCompile	compiler/Compiler.h	/^    kCannotCompile,     \/* Method cannot be compiled *\/$/;"	e	enum:JitMethodAttributes
kCatch	compiler/CompilerIR.h	/^    kCatch,$/;"	e	enum:BlockListType
kCatchEntry	compiler/CompilerIR.h	/^    kCatchEntry,$/;"	e	enum:BBType
kChainingCellBackwardBranch	compiler/CompilerIR.h	/^    kChainingCellBackwardBranch,$/;"	e	enum:BBType
kChainingCellGap	compiler/CompilerIR.h	/^    kChainingCellGap,$/;"	e	enum:BBType
kChainingCellHot	compiler/CompilerIR.h	/^    kChainingCellHot,$/;"	e	enum:BBType
kChainingCellInvokePredicted	compiler/CompilerIR.h	/^    kChainingCellInvokePredicted,$/;"	e	enum:BBType
kChainingCellInvokeSingleton	compiler/CompilerIR.h	/^    kChainingCellInvokeSingleton,$/;"	e	enum:BBType
kChainingCellLast	compiler/CompilerIR.h	/^    kChainingCellLast = kChainingCellGap + 1,$/;"	e	enum:BBType
kChainingCellNormal	compiler/CompilerIR.h	/^    kChainingCellNormal = 0,$/;"	e	enum:BBType
kChangedPolicy	Thread.h	566;"	d
kChangedPriority	Thread.h	565;"	d
kClearedJniWeakGlobal	IndirectRefTable.h	93;"	d
kCoreReg	compiler/CompilerIR.h	/^    kCoreReg,$/;"	e	enum:RegisterClass
kCpeDex	oo/Class.h	/^    kCpeDex,$/;"	e	enum:ClassPathEntryKind
kCpeJar	oo/Class.h	/^    kCpeJar,$/;"	e	enum:ClassPathEntryKind
kCpeLastEntry	oo/Class.h	/^    kCpeLastEntry       \/* used as sentinel at end of array *\/$/;"	e	enum:ClassPathEntryKind
kCpeUnknown	oo/Class.h	/^    kCpeUnknown = 0,$/;"	e	enum:ClassPathEntryKind
kDA	compiler/Dataflow.h	/^    kDA,$/;"	e	enum:DataFlowAttributePos
kDAWide	compiler/Dataflow.h	/^    kDAWide,$/;"	e	enum:DataFlowAttributePos
kDalvikByteCode	compiler/CompilerIR.h	/^    kDalvikByteCode,$/;"	e	enum:BBType
kDalvikReg	compiler/codegen/arm/ArmLIR.h	/^    kDalvikReg,         \/\/ 1 Dalvik Frame (can be fully disambiguated)$/;"	e	enum:ResourceEncodingPos
kDebugTargetFile	Misc.h	/^    kDebugTargetFile,$/;"	e	enum:DebugTargetKind
kDebugTargetLog	Misc.h	/^    kDebugTargetLog,$/;"	e	enum:DebugTargetKind
kDebugTargetUnknown	Misc.h	/^    kDebugTargetUnknown = 0,$/;"	e	enum:DebugTargetKind
kDefaultStackSize	Thread.h	79;"	d
kDescrAnnotationDefault	reflect/Annotation.cpp	/^static const char* kDescrAnnotationDefault$/;"	v	file:
kDescrEnclosingClass	reflect/Annotation.cpp	/^static const char* kDescrEnclosingClass$/;"	v	file:
kDescrEnclosingMethod	reflect/Annotation.cpp	/^static const char* kDescrEnclosingMethod$/;"	v	file:
kDescrInnerClass	reflect/Annotation.cpp	/^static const char* kDescrInnerClass = "Ldalvik\/annotation\/InnerClass;";$/;"	v	file:
kDescrMemberClasses	reflect/Annotation.cpp	/^static const char* kDescrMemberClasses$/;"	v	file:
kDescrSignature	reflect/Annotation.cpp	/^static const char* kDescrSignature  = "Ldalvik\/annotation\/Signature;";$/;"	v	file:
kDescrThrows	reflect/Annotation.cpp	/^static const char* kDescrThrows     = "Ldalvik\/annotation\/Throws;";$/;"	v	file:
kDexInJarName	JarFile.cpp	/^static const char* kDexInJarName = "classes.dex";$/;"	v	file:
kDouble	compiler/codegen/arm/ArmLIR.h	/^    kDouble,$/;"	e	enum:OpSize
kDouble	compiler/codegen/x86/X86LIR.h	/^    kDouble,$/;"	e	enum:OpSize
kDumpClassClassLoader	oo/Class.h	183;"	d
kDumpClassFullDetail	oo/Class.h	182;"	d
kDumpClassInitialized	oo/Class.h	184;"	d
kEntryBlock	compiler/CompilerIR.h	/^    kEntryBlock,$/;"	e	enum:BBType
kEntryHeaderLen	AllocTracker.cpp	/^const int kEntryHeaderLen = 9;$/;"	v
kExceptionHandling	compiler/CompilerIR.h	/^    kExceptionHandling,$/;"	e	enum:BBType
kExecutionModeInterpFast	interp/InterpState.h	/^    kExecutionModeInterpFast,$/;"	e	enum:ExecutionMode
kExecutionModeInterpPortable	interp/InterpState.h	/^    kExecutionModeInterpPortable,$/;"	e	enum:ExecutionMode
kExecutionModeJit	interp/InterpState.h	/^    kExecutionModeJit,$/;"	e	enum:ExecutionMode
kExecutionModeUnknown	interp/InterpState.h	/^    kExecutionModeUnknown = 0,$/;"	e	enum:ExecutionMode
kExitBlock	compiler/CompilerIR.h	/^    kExitBlock,$/;"	e	enum:BBType
kExtraRegs	analysis/CodeVerify.cpp	68;"	d	file:
kFPA	compiler/Dataflow.h	/^    kFPA,$/;"	e	enum:DataFlowAttributePos
kFPB	compiler/Dataflow.h	/^    kFPB,$/;"	e	enum:DataFlowAttributePos
kFPC	compiler/Dataflow.h	/^    kFPC,$/;"	e	enum:DataFlowAttributePos
kFPReg	compiler/CompilerIR.h	/^    kFPReg,$/;"	e	enum:RegisterClass
kFPReg0	compiler/codegen/arm/ArmLIR.h	/^    kFPReg0     = 16,$/;"	e	enum:ResourceEncodingPos
kFPStatus	compiler/codegen/arm/ArmLIR.h	/^    kFPStatus,          \/\/ FP status word$/;"	e	enum:ResourceEncodingPos
kFilenoStderr	StdioConverter.cpp	28;"	d	file:
kFilenoStdout	StdioConverter.cpp	27;"	d	file:
kFlag_CritBad	CheckJni.cpp	186;"	d	file:
kFlag_CritGet	CheckJni.cpp	188;"	d	file:
kFlag_CritMask	CheckJni.cpp	190;"	d	file:
kFlag_CritOkay	CheckJni.cpp	187;"	d	file:
kFlag_CritRelease	CheckJni.cpp	189;"	d	file:
kFlag_Default	CheckJni.cpp	184;"	d	file:
kFlag_ExcepBad	CheckJni.cpp	192;"	d	file:
kFlag_ExcepOkay	CheckJni.cpp	193;"	d	file:
kFlag_Invocation	CheckJni.cpp	198;"	d	file:
kFlag_NullableUtf	CheckJni.cpp	196;"	d	file:
kFlag_Release	CheckJni.cpp	195;"	d	file:
kFmtBWidth	compiler/codegen/arm/ArmLIR.h	/^    kFmtBWidth,        \/* bit-field width, encoded as width-1 *\/$/;"	e	enum:ArmEncodingKind
kFmtBitBlt	compiler/codegen/arm/ArmLIR.h	/^    kFmtBitBlt,        \/* Bit string using end\/start *\/$/;"	e	enum:ArmEncodingKind
kFmtBrOffset	compiler/codegen/arm/ArmLIR.h	/^    kFmtBrOffset,      \/* Signed extended [26,11,13,21-16,10-0]:0 *\/$/;"	e	enum:ArmEncodingKind
kFmtDfp	compiler/codegen/arm/ArmLIR.h	/^    kFmtDfp,           \/* Double FP reg *\/$/;"	e	enum:ArmEncodingKind
kFmtFPImm	compiler/codegen/arm/ArmLIR.h	/^    kFmtFPImm,         \/* Encoded floating point immediate *\/$/;"	e	enum:ArmEncodingKind
kFmtImm12	compiler/codegen/arm/ArmLIR.h	/^    kFmtImm12,         \/* Zero-extended immediate using [26,14..12,7..0] *\/$/;"	e	enum:ArmEncodingKind
kFmtImm16	compiler/codegen/arm/ArmLIR.h	/^    kFmtImm16,         \/* Zero-extended immed using [26,19..16,14..12,7..0] *\/$/;"	e	enum:ArmEncodingKind
kFmtImm6	compiler/codegen/arm/ArmLIR.h	/^    kFmtImm6,          \/* Encoded branch target using [9,7..3]0 *\/$/;"	e	enum:ArmEncodingKind
kFmtLsb	compiler/codegen/arm/ArmLIR.h	/^    kFmtLsb,           \/* least significant bit using [14..12][7..6] *\/$/;"	e	enum:ArmEncodingKind
kFmtModImm	compiler/codegen/arm/ArmLIR.h	/^    kFmtModImm,        \/* Shifted 8-bit immed using [26,14..12,7..0] *\/$/;"	e	enum:ArmEncodingKind
kFmtSfp	compiler/codegen/arm/ArmLIR.h	/^    kFmtSfp,           \/* Single FP reg *\/$/;"	e	enum:ArmEncodingKind
kFmtShift	compiler/codegen/arm/ArmLIR.h	/^    kFmtShift,         \/* Shift descriptor, [14..12,7..4] *\/$/;"	e	enum:ArmEncodingKind
kFmtShift5	compiler/codegen/arm/ArmLIR.h	/^    kFmtShift5,        \/* Shift count, [14..12,7..6] *\/$/;"	e	enum:ArmEncodingKind
kFmtUnused	compiler/codegen/arm/ArmLIR.h	/^    kFmtUnused,$/;"	e	enum:ArmEncodingKind
kFormat35c	compiler/Dataflow.h	/^    kFormat35c,$/;"	e	enum:DataFlowAttributePos
kFormat3rc	compiler/Dataflow.h	/^    kFormat3rc,$/;"	e	enum:DataFlowAttributePos
kGPReg0	compiler/codegen/arm/ArmLIR.h	/^    kGPReg0     = 0,$/;"	e	enum:ResourceEncodingPos
kGcBeforeOomSpec	alloc/Heap.cpp	/^static const GcSpec kGcBeforeOomSpec = {$/;"	v	file:
kGcConcurrentSpec	alloc/Heap.cpp	/^static const GcSpec kGcConcurrentSpec  = {$/;"	v	file:
kGcExplicitSpec	alloc/Heap.cpp	/^static const GcSpec kGcExplicitSpec = {$/;"	v	file:
kGcForMallocSpec	alloc/Heap.cpp	/^static const GcSpec kGcForMallocSpec = {$/;"	v	file:
kGetter	compiler/Dataflow.h	/^    kGetter,$/;"	e	enum:DataFlowAttributePos
kGlobalRefsTableInitialSize	Jni.cpp	243;"	d	file:
kGlobalRefsTableMaxSize	Jni.cpp	244;"	d	file:
kGrefWaterInterval	Jni.cpp	245;"	d	file:
kGuardLen	CheckJni.cpp	1059;"	d	file:
kGuardMagic	CheckJni.cpp	1061;"	d	file:
kGuardPattern	CheckJni.cpp	1060;"	d	file:
kHeadSuffix	hprof/Hprof.cpp	36;"	d	file:
kHeapRef	compiler/codegen/arm/ArmLIR.h	/^    kHeapRef,           \/\/ 3 Somewhere on the heap (alias with any other heap)$/;"	e	enum:ResourceEncodingPos
kHeavyweightMonitor	Globals.h	/^    kHeavyweightMonitor,$/;"	e	enum:NoChainExits
kHexDumpLocal	Misc.h	/^enum HexDumpMode { kHexDumpLocal, kHexDumpMem };$/;"	e	enum:HexDumpMode
kHexDumpMem	Misc.h	/^enum HexDumpMode { kHexDumpLocal, kHexDumpMem };$/;"	e	enum:HexDumpMode
kISH	compiler/codegen/arm/ArmLIR.h	/^    kISH = 0xb,$/;"	e	enum:ArmOpDmbOptions
kISHST	compiler/codegen/arm/ArmLIR.h	/^    kISHST = 0xa,$/;"	e	enum:ArmOpDmbOptions
kIndirectKindGlobal	IndirectRefTable.h	/^    kIndirectKindGlobal     = 2,$/;"	e	enum:IndirectRefKind
kIndirectKindInvalid	IndirectRefTable.h	/^    kIndirectKindInvalid    = 0,$/;"	e	enum:IndirectRefKind
kIndirectKindLocal	IndirectRefTable.h	/^    kIndirectKindLocal      = 1,$/;"	e	enum:IndirectRefKind
kIndirectKindWeakGlobal	IndirectRefTable.h	/^    kIndirectKindWeakGlobal = 3$/;"	e	enum:IndirectRefKind
kInitLoaderInc	oo/Class.cpp	940;"	d	file:
kInitialStorage	jdwp/ExpandBuf.cpp	36;"	d	file:
kInlineCacheMiss	Globals.h	/^    kInlineCacheMiss = 0,$/;"	e	enum:NoChainExits
kInputBufferSize	jdwp/JdwpAdb.cpp	42;"	d	file:
kInputBufferSize	jdwp/JdwpSocket.cpp	38;"	d	file:
kInsnFlagBranchTarget	analysis/VerifySubs.h	37;"	d
kInsnFlagChanged	analysis/VerifySubs.h	40;"	d
kInsnFlagGcPoint	analysis/VerifySubs.h	38;"	d
kInsnFlagInTry	analysis/VerifySubs.h	36;"	d
kInsnFlagVisited	analysis/VerifySubs.h	39;"	d
kInsnFlagWidthMask	analysis/VerifySubs.h	35;"	d
kInternalRefDefault	Thread.h	75;"	d
kInternalRefMax	Thread.h	76;"	d
kInterpNoBreak	interp/InterpState.h	/^    kInterpNoBreak            = 0x00,    \/* Don't check *\/$/;"	e	enum:InterpBreakFlags
kInterpSafePoint	interp/InterpState.h	/^    kInterpSafePoint          = 0x02,    \/* Check at safe points *\/$/;"	e	enum:InterpBreakFlags
kInterpSingleStep	interp/InterpState.h	/^    kInterpSingleStep         = 0x01,    \/* Check between each inst *\/$/;"	e	enum:InterpBreakFlags
kInvalidIndirectRefObject	IndirectRefTable.h	91;"	d
kIsBinaryOp	compiler/codegen/arm/ArmLIR.h	/^    kIsBinaryOp,$/;"	e	enum:ArmOpFeatureFlags
kIsBranch	compiler/codegen/arm/ArmLIR.h	/^    kIsBranch = 0,$/;"	e	enum:ArmOpFeatureFlags
kIsCallee	compiler/Compiler.h	/^    kIsCallee = 0,      \/* Code is part of a callee (invoked by a hot trace) *\/$/;"	e	enum:JitMethodAttributes
kIsEmpty	compiler/Compiler.h	/^    kIsEmpty,           \/* Method is empty *\/$/;"	e	enum:JitMethodAttributes
kIsGetter	compiler/Compiler.h	/^    kIsGetter,          \/* Method fits the getter pattern *\/$/;"	e	enum:JitMethodAttributes
kIsHot	compiler/Compiler.h	/^    kIsHot,             \/* Code is part of a hot trace *\/$/;"	e	enum:JitMethodAttributes
kIsIT	compiler/codegen/arm/ArmLIR.h	/^    kIsIT,$/;"	e	enum:ArmOpFeatureFlags
kIsLeaf	compiler/Compiler.h	/^    kIsLeaf,            \/* Method is leaf *\/$/;"	e	enum:JitMethodAttributes
kIsLinear	compiler/Dataflow.h	/^    kIsLinear,$/;"	e	enum:DataFlowAttributePos
kIsMove	compiler/Dataflow.h	/^    kIsMove,$/;"	e	enum:DataFlowAttributePos
kIsQuadOp	compiler/codegen/arm/ArmLIR.h	/^    kIsQuadOp,$/;"	e	enum:ArmOpFeatureFlags
kIsSetter	compiler/Compiler.h	/^    kIsSetter,          \/* Method fits the setter pattern *\/$/;"	e	enum:JitMethodAttributes
kIsTertiaryOp	compiler/codegen/arm/ArmLIR.h	/^    kIsTertiaryOp,$/;"	e	enum:ArmOpFeatureFlags
kIsThrowFree	compiler/Compiler.h	/^    kIsThrowFree,       \/* Method doesn't throw *\/$/;"	e	enum:JitMethodAttributes
kIsUnaryOp	compiler/codegen/arm/ArmLIR.h	/^    kIsUnaryOp,$/;"	e	enum:ArmOpFeatureFlags
kJDWPDdmCmd	jdwp/JdwpPriv.h	39;"	d
kJDWPDdmCmdSet	jdwp/JdwpPriv.h	38;"	d
kJDWPFlagReply	jdwp/JdwpPriv.h	35;"	d
kJDWPHeaderLen	jdwp/JdwpPriv.h	34;"	d
kJdwpCompositeCommand	jdwp/JdwpEvent.cpp	96;"	d	file:
kJdwpControlName	jdwp/JdwpAdb.cpp	47;"	d	file:
kJdwpControlNameLen	jdwp/JdwpAdb.cpp	48;"	d	file:
kJdwpEventCommandSet	jdwp/JdwpEvent.cpp	95;"	d	file:
kJdwpTransportAndroidAdb	jdwp/Jdwp.h	/^    kJdwpTransportAndroidAdb,   \/* transport=dt_android_adb *\/$/;"	e	enum:JdwpTransportType
kJdwpTransportSocket	jdwp/Jdwp.h	/^    kJdwpTransportSocket,       \/* transport=dt_socket *\/$/;"	e	enum:JdwpTransportType
kJdwpTransportUnknown	jdwp/Jdwp.h	/^    kJdwpTransportUnknown = 0,$/;"	e	enum:JdwpTransportType
kJitDone	interp/InterpState.h	/^    kJitDone = 6,              \/\/ No further JIT actions for interpBreak$/;"	e	enum:JitState
kJitHintNoBias	interp/InterpState.h	/^   kJitHintNoBias = 3,        \/\/ Last inst in run was unbiased branch$/;"	e	enum:JitHint
kJitHintNone	interp/InterpState.h	/^   kJitHintNone = 0,$/;"	e	enum:JitHint
kJitHintNotTaken	interp/InterpState.h	/^   kJitHintNotTaken = 2,      \/\/ Last inst in run was not taken branch$/;"	e	enum:JitHint
kJitHintTaken	interp/InterpState.h	/^   kJitHintTaken = 1,         \/\/ Last inst in run was taken branch$/;"	e	enum:JitHint
kJitLoop	compiler/CompilerIR.h	/^    kJitLoop,      \/\/ Cycle - trace descriptor is used as a hint$/;"	e	enum:JitMode
kJitMethod	compiler/CompilerIR.h	/^    kJitMethod,    \/\/ Whole method$/;"	e	enum:JitMode
kJitNot	interp/InterpState.h	/^    kJitNot = 0,               \/\/ Non-JIT related reasons *\/$/;"	e	enum:JitState
kJitOptNoLoop	compiler/Compiler.h	/^    kJitOptNoLoop = 0,          \/\/ Disable loop formation\/optimization$/;"	e	enum:JitOptimizationHints
kJitSelfVerification	interp/InterpState.h	/^    kJitSelfVerification = 3,  \/\/ Self Verification Mode$/;"	e	enum:JitState
kJitTSelect	interp/InterpState.h	/^    kJitTSelect = 4,           \/\/ Actively selecting a trace$/;"	e	enum:JitState
kJitTSelectEnd	interp/InterpState.h	/^    kJitTSelectEnd = 5,        \/\/ Done with the trace - wrap it up$/;"	e	enum:JitState
kJitTSelectRequest	interp/InterpState.h	/^    kJitTSelectRequest = 1,    \/\/ Request a trace (subject to filtering)$/;"	e	enum:JitState
kJitTSelectRequestHot	interp/InterpState.h	/^    kJitTSelectRequestHot = 2, \/\/ Request a hot trace (bypass the filter)$/;"	e	enum:JitState
kJitTrace	compiler/CompilerIR.h	/^    kJitTrace = 0, \/\/ Acyclic - all instructions come from the trace descriptor$/;"	e	enum:JitMode
kJniLocalRefMax	Thread.h	74;"	d
kJniLocalRefMin	Thread.h	73;"	d
kLiteral	compiler/codegen/arm/ArmLIR.h	/^    kLiteral,           \/\/ 2 Literal pool (can be fully disambiguated)$/;"	e	enum:ResourceEncodingPos
kLoadHoisting	compiler/codegen/Optimizer.h	/^    kLoadHoisting,$/;"	e	enum:optControlVector
kLoadStoreElimination	compiler/codegen/Optimizer.h	/^    kLoadStoreElimination = 0,$/;"	e	enum:optControlVector
kLocDalvikFrame	compiler/CompilerIR.h	/^    kLocDalvikFrame = 0,$/;"	e	enum:RegLocationType
kLocPhysReg	compiler/CompilerIR.h	/^    kLocPhysReg,$/;"	e	enum:RegLocationType
kLocRetval	compiler/CompilerIR.h	/^    kLocRetval,          \/\/ Return region in interpState$/;"	e	enum:RegLocationType
kLocSpill	compiler/CompilerIR.h	/^    kLocSpill,$/;"	e	enum:RegLocationType
kLong	compiler/codegen/arm/ArmLIR.h	/^    kLong,$/;"	e	enum:OpSize
kLong	compiler/codegen/x86/X86LIR.h	/^    kLong,$/;"	e	enum:OpSize
kMIRCallee	compiler/CompilerIR.h	/^    kMIRCallee,                         \/\/ Instruction is inlined from callee$/;"	e	enum:__anon43
kMIRIgnoreNullCheck	compiler/CompilerIR.h	/^    kMIRIgnoreNullCheck = 0,$/;"	e	enum:__anon43
kMIRIgnoreRangeCheck	compiler/CompilerIR.h	/^    kMIRIgnoreRangeCheck,$/;"	e	enum:__anon43
kMIRInlined	compiler/CompilerIR.h	/^    kMIRInlined,                        \/\/ Invoke is inlined (ie dead)$/;"	e	enum:__anon43
kMIRInlinedPred	compiler/CompilerIR.h	/^    kMIRInlinedPred,                    \/\/ Invoke is inlined via prediction$/;"	e	enum:__anon43
kMIRInvokeMethodJIT	compiler/CompilerIR.h	/^    kMIRInvokeMethodJIT,                \/\/ Callee is JIT'ed as a whole method$/;"	e	enum:__anon43
kMIRNullCheckOnly	compiler/CompilerIR.h	/^    kMIRNullCheckOnly,$/;"	e	enum:__anon43
kMIRRangeCheckOnly	compiler/CompilerIR.h	/^    kMIRRangeCheckOnly,$/;"	e	enum:__anon43
kMagicHandshake	jdwp/JdwpAdb.cpp	44;"	d	file:
kMagicHandshake	jdwp/JdwpSocket.cpp	40;"	d	file:
kMagicHandshakeLen	jdwp/JdwpAdb.cpp	45;"	d	file:
kMagicHandshakeLen	jdwp/JdwpSocket.cpp	41;"	d	file:
kMainThreadId	Thread.cpp	230;"	d	file:
kMaxAllocRecordStackDepth	AllocTracker.cpp	46;"	d	file:
kMaxDepSize	analysis/DexPrepare.cpp	/^static const size_t kMaxDepSize = 4 * 4 + 2048;     \/\/ sanity check$/;"	v	file:
kMaxDiffBits	analysis/RegisterMap.cpp	60;"	d	file:
kMaxGcPointGap	analysis/RegisterMap.cpp	57;"	d	file:
kMaxHeapSize	Init.cpp	36;"	d	file:
kMaxHoistDistance	compiler/codegen/arm/ArmLIR.h	/^    kMaxHoistDistance,$/;"	e	enum:ArmTargetOptHints
kMaxHoistDistance	compiler/codegen/x86/X86LIR.h	/^   kMaxHoistDistance,$/;"	e	enum:X86TargetOptHints
kMaxLine	StdioConverter.cpp	30;"	d	file:
kMaxMonitorStackDepth	analysis/CodeVerify.h	123;"	d
kMaxPort	jdwp/JdwpSocket.cpp	36;"	d	file:
kMaxStackSize	Thread.h	80;"	d
kMaxThreadId	Thread.cpp	229;"	d	file:
kMemLoad	compiler/codegen/arm/ArmLIR.h	/^    kMemLoad,$/;"	e	enum:ArmOpFeatureFlags
kMemStore	compiler/codegen/arm/ArmLIR.h	/^    kMemStore,$/;"	e	enum:ArmOpFeatureFlags
kMessageHeaderLen	AllocTracker.cpp	/^const int kMessageHeaderLen = 15;$/;"	v
kMethodInlining	compiler/codegen/Optimizer.h	/^    kMethodInlining,$/;"	e	enum:optControlVector
kMethodJit	compiler/codegen/Optimizer.h	/^    kMethodJit,$/;"	e	enum:optControlVector
kMinDepSize	analysis/DexPrepare.cpp	/^static const size_t kMinDepSize = 4 * 4;$/;"	v	file:
kMinHeapSize	Init.cpp	35;"	d	file:
kMinHeapStartSize	Init.cpp	34;"	d	file:
kMinStackSize	Thread.h	78;"	d
kMirOpCheckInlinePrediction	compiler/CompilerIR.h	/^    kMirOpCheckInlinePrediction,        \/\/ Gen checks for predicted inlining$/;"	e	enum:ExtendedMIROpcode
kMirOpFirst	compiler/CompilerIR.h	/^    kMirOpFirst = kNumPackedOpcodes,$/;"	e	enum:ExtendedMIROpcode
kMirOpLast	compiler/CompilerIR.h	/^    kMirOpLast,$/;"	e	enum:ExtendedMIROpcode
kMirOpLowerBound	compiler/CompilerIR.h	/^    kMirOpLowerBound,$/;"	e	enum:ExtendedMIROpcode
kMirOpNullNRangeDownCheck	compiler/CompilerIR.h	/^    kMirOpNullNRangeDownCheck,$/;"	e	enum:ExtendedMIROpcode
kMirOpNullNRangeUpCheck	compiler/CompilerIR.h	/^    kMirOpNullNRangeUpCheck,$/;"	e	enum:ExtendedMIROpcode
kMirOpPhi	compiler/CompilerIR.h	/^    kMirOpPhi = kMirOpFirst,$/;"	e	enum:ExtendedMIROpcode
kMirOpPunt	compiler/CompilerIR.h	/^    kMirOpPunt,$/;"	e	enum:ExtendedMIROpcode
kMustNotAlias	compiler/codegen/arm/ArmLIR.h	/^    kMustNotAlias,      \/\/ 4 Guaranteed to be non-alias (eg *(r6+x))$/;"	e	enum:ResourceEncodingPos
kNSH	compiler/codegen/arm/ArmLIR.h	/^    kNSH = 0x7,$/;"	e	enum:ArmOpDmbOptions
kNSHST	compiler/codegen/arm/ArmLIR.h	/^    kNSHST = 0x6$/;"	e	enum:ArmOpDmbOptions
kNativeHeapAllocated	alloc/HeapDebug.h	/^    kNativeHeapAllocated = 3,$/;"	e	enum:HeapDebugInfoType
kNativeHeapSize	alloc/HeapDebug.h	/^    kNativeHeapSize = 1,$/;"	e	enum:HeapDebugInfoType
kNiceValues	os/android.cpp	/^static const int kNiceValues[10] = {$/;"	v	file:
kNoChainExitLast	Globals.h	/^    kNoChainExitLast,$/;"	e	enum:NoChainExits
kNoCopyMagic	CheckJni.cpp	1802;"	d	file:
kNoOperand	compiler/codegen/arm/ArmLIR.h	/^    kNoOperand,$/;"	e	enum:ArmOpFeatureFlags
kNotUsed	compiler/CompilerIR.h	/^    kNotUsed = 0,$/;"	e	enum:BlockListType
kNullNRangeCheck0	compiler/Dataflow.h	/^    kNullNRangeCheck0,$/;"	e	enum:DataFlowAttributePos
kNullNRangeCheck1	compiler/Dataflow.h	/^    kNullNRangeCheck1,$/;"	e	enum:DataFlowAttributePos
kNullNRangeCheck2	compiler/Dataflow.h	/^    kNullNRangeCheck2,$/;"	e	enum:DataFlowAttributePos
kNumAllocRecords	AllocTracker.cpp	47;"	d	file:
kNumPackedOpcodes	mterp/gen-mterp.py	/^kNumPackedOpcodes = 256 # TODO: Derive this from DexOpcodes.h.$/;"	v
kNumTestEntries	test/TestHash.cpp	26;"	d	file:
kNumUpdatePosns	analysis/RegisterMap.cpp	59;"	d	file:
kObjectArrayRefWidth	oo/Array.cpp	/^static size_t kObjectArrayRefWidth = sizeof(Object*);$/;"	v	file:
kObjectId	Debugger.cpp	/^    kObjectId = 0xc1, kRefTypeId$/;"	e	enum:RegistryType	file:
kOnLoadFailed	Native.cpp	/^    kOnLoadFailed,$/;"	e	enum:OnLoadState	file:
kOnLoadOkay	Native.cpp	/^    kOnLoadOkay,$/;"	e	enum:OnLoadState	file:
kOnLoadPending	Native.cpp	/^    kOnLoadPending = 0,     \/* initial state, must be zero *\/$/;"	e	enum:OnLoadState	file:
kOp2Byte	compiler/codegen/arm/ArmLIR.h	/^    kOp2Byte,$/;"	e	enum:OpKind
kOp2Byte	compiler/codegen/x86/X86LIR.h	/^    kOp2Byte,$/;"	e	enum:OpKind
kOp2Char	compiler/codegen/arm/ArmLIR.h	/^    kOp2Char,$/;"	e	enum:OpKind
kOp2Char	compiler/codegen/x86/X86LIR.h	/^    kOp2Char,$/;"	e	enum:OpKind
kOp2Short	compiler/codegen/arm/ArmLIR.h	/^    kOp2Short,$/;"	e	enum:OpKind
kOp2Short	compiler/codegen/x86/X86LIR.h	/^    kOp2Short,$/;"	e	enum:OpKind
kOpAdc	compiler/codegen/arm/ArmLIR.h	/^    kOpAdc,$/;"	e	enum:OpKind
kOpAdc	compiler/codegen/x86/X86LIR.h	/^    kOpAdc,$/;"	e	enum:OpKind
kOpAdd	compiler/codegen/arm/ArmLIR.h	/^    kOpAdd,$/;"	e	enum:OpKind
kOpAdd	compiler/codegen/x86/X86LIR.h	/^    kOpAdd,$/;"	e	enum:OpKind
kOpAnd	compiler/codegen/arm/ArmLIR.h	/^    kOpAnd,$/;"	e	enum:OpKind
kOpAnd	compiler/codegen/x86/X86LIR.h	/^    kOpAnd,$/;"	e	enum:OpKind
kOpAsr	compiler/codegen/arm/ArmLIR.h	/^    kOpAsr,$/;"	e	enum:OpKind
kOpAsr	compiler/codegen/x86/X86LIR.h	/^    kOpAsr,$/;"	e	enum:OpKind
kOpBic	compiler/codegen/arm/ArmLIR.h	/^    kOpBic,$/;"	e	enum:OpKind
kOpBkpt	compiler/codegen/arm/ArmLIR.h	/^    kOpBkpt,$/;"	e	enum:OpKind
kOpBlx	compiler/codegen/arm/ArmLIR.h	/^    kOpBlx,$/;"	e	enum:OpKind
kOpCall	compiler/codegen/x86/X86LIR.h	/^    kOpCall,$/;"	e	enum:OpKind
kOpCmn	compiler/codegen/arm/ArmLIR.h	/^    kOpCmn,$/;"	e	enum:OpKind
kOpCmp	compiler/codegen/arm/ArmLIR.h	/^    kOpCmp,$/;"	e	enum:OpKind
kOpCmp	compiler/codegen/x86/X86LIR.h	/^    kOpCmp,$/;"	e	enum:OpKind
kOpCondBr	compiler/codegen/arm/ArmLIR.h	/^    kOpCondBr,$/;"	e	enum:OpKind
kOpCondBr	compiler/codegen/x86/X86LIR.h	/^    kOpCondBr,$/;"	e	enum:OpKind
kOpDiv	compiler/codegen/arm/ArmLIR.h	/^    kOpDiv,$/;"	e	enum:OpKind
kOpDiv	compiler/codegen/x86/X86LIR.h	/^    kOpDiv,$/;"	e	enum:OpKind
kOpLsl	compiler/codegen/arm/ArmLIR.h	/^    kOpLsl,$/;"	e	enum:OpKind
kOpLsl	compiler/codegen/x86/X86LIR.h	/^    kOpLsl,$/;"	e	enum:OpKind
kOpLsr	compiler/codegen/arm/ArmLIR.h	/^    kOpLsr,$/;"	e	enum:OpKind
kOpLsr	compiler/codegen/x86/X86LIR.h	/^    kOpLsr,$/;"	e	enum:OpKind
kOpMov	compiler/codegen/arm/ArmLIR.h	/^    kOpMov,$/;"	e	enum:OpKind
kOpMov	compiler/codegen/x86/X86LIR.h	/^    kOpMov,$/;"	e	enum:OpKind
kOpMul	compiler/codegen/arm/ArmLIR.h	/^    kOpMul,$/;"	e	enum:OpKind
kOpMul	compiler/codegen/x86/X86LIR.h	/^    kOpMul,$/;"	e	enum:OpKind
kOpMvn	compiler/codegen/arm/ArmLIR.h	/^    kOpMvn,$/;"	e	enum:OpKind
kOpNeg	compiler/codegen/arm/ArmLIR.h	/^    kOpNeg,$/;"	e	enum:OpKind
kOpNeg	compiler/codegen/x86/X86LIR.h	/^    kOpNeg,$/;"	e	enum:OpKind
kOpNot	compiler/codegen/arm/ArmLIR.h	/^    kOpNot,$/;"	e	enum:OpKind
kOpNot	compiler/codegen/x86/X86LIR.h	/^    kOpNot,$/;"	e	enum:OpKind
kOpOr	compiler/codegen/arm/ArmLIR.h	/^    kOpOr,$/;"	e	enum:OpKind
kOpOr	compiler/codegen/x86/X86LIR.h	/^    kOpOr,$/;"	e	enum:OpKind
kOpPop	compiler/codegen/arm/ArmLIR.h	/^    kOpPop,$/;"	e	enum:OpKind
kOpPop	compiler/codegen/x86/X86LIR.h	/^    kOpPop,$/;"	e	enum:OpKind
kOpPush	compiler/codegen/arm/ArmLIR.h	/^    kOpPush,$/;"	e	enum:OpKind
kOpPush	compiler/codegen/x86/X86LIR.h	/^    kOpPush,$/;"	e	enum:OpKind
kOpRem	compiler/codegen/arm/ArmLIR.h	/^    kOpRem,$/;"	e	enum:OpKind
kOpRem	compiler/codegen/x86/X86LIR.h	/^    kOpRem,$/;"	e	enum:OpKind
kOpRor	compiler/codegen/arm/ArmLIR.h	/^    kOpRor,$/;"	e	enum:OpKind
kOpRor	compiler/codegen/x86/X86LIR.h	/^    kOpRor,$/;"	e	enum:OpKind
kOpRsub	compiler/codegen/arm/ArmLIR.h	/^    kOpRsub,$/;"	e	enum:OpKind
kOpSbc	compiler/codegen/arm/ArmLIR.h	/^    kOpSbc,$/;"	e	enum:OpKind
kOpSbc	compiler/codegen/x86/X86LIR.h	/^    kOpSbc,$/;"	e	enum:OpKind
kOpSub	compiler/codegen/arm/ArmLIR.h	/^    kOpSub,$/;"	e	enum:OpKind
kOpSub	compiler/codegen/x86/X86LIR.h	/^    kOpSub,$/;"	e	enum:OpKind
kOpTst	compiler/codegen/arm/ArmLIR.h	/^    kOpTst,$/;"	e	enum:OpKind
kOpTst	compiler/codegen/x86/X86LIR.h	/^    kOpTst,$/;"	e	enum:OpKind
kOpUncondBr	compiler/codegen/arm/ArmLIR.h	/^    kOpUncondBr,$/;"	e	enum:OpKind
kOpUncondBr	compiler/codegen/x86/X86LIR.h	/^    kOpUncondBr,$/;"	e	enum:OpKind
kOpXor	compiler/codegen/arm/ArmLIR.h	/^    kOpXor,$/;"	e	enum:OpKind
kOpXor	compiler/codegen/x86/X86LIR.h	/^    kOpXor,$/;"	e	enum:OpKind
kPCReconstruction	compiler/CompilerIR.h	/^    kPCReconstruction,$/;"	e	enum:BBType
kPackedSwitch	compiler/CompilerIR.h	/^    kPackedSwitch,$/;"	e	enum:BlockListType
kPhi	compiler/Dataflow.h	/^    kPhi,$/;"	e	enum:DataFlowAttributePos
kPinComplainThreshold	Jni.cpp	252;"	d	file:
kPinTableInitialSize	Jni.cpp	250;"	d	file:
kPinTableMaxSize	Jni.cpp	251;"	d	file:
kPostOrderDFSTraversal	compiler/Compiler.h	/^    kPostOrderDFSTraversal,     \/\/ Depth-First-Search \/ Post-Order$/;"	e	enum:DataFlowAnalysisMode
kPostOrderDOMTraversal	compiler/Compiler.h	/^    kPostOrderDOMTraversal,     \/\/ Dominator tree \/ Post-Order$/;"	e	enum:DataFlowAnalysisMode
kPreOrderDFSTraversal	compiler/Compiler.h	/^    kPreOrderDFSTraversal,      \/\/ Depth-First-Search \/ Pre-Order$/;"	e	enum:DataFlowAnalysisMode
kPrimitivesOrObjects	reflect/Annotation.cpp	/^    kPrimitivesOrObjects \/* return primitives as-is but the rest as objects *\/$/;"	e	enum:AnnotationResultStyle	file:
kProfilerClockSourceDual	Globals.h	/^    kProfilerClockSourceDual,$/;"	e	enum:ProfilerClockSource
kProfilerClockSourceThreadCpu	Globals.h	/^    kProfilerClockSourceThreadCpu,$/;"	e	enum:ProfilerClockSource
kProfilerClockSourceWall	Globals.h	/^    kProfilerClockSourceWall,$/;"	e	enum:ProfilerClockSource
kProxySFieldCount	reflect/Proxy.cpp	50;"	d	file:
kReachableNodes	compiler/Compiler.h	/^    kReachableNodes,            \/\/ All reachable nodes$/;"	e	enum:DataFlowAnalysisMode
kRefTypeId	Debugger.cpp	/^    kObjectId = 0xc1, kRefTypeId$/;"	e	enum:RegistryType	file:
kRegDef0	compiler/codegen/arm/ArmLIR.h	/^    kRegDef0,$/;"	e	enum:ArmOpFeatureFlags
kRegDef1	compiler/codegen/arm/ArmLIR.h	/^    kRegDef1,$/;"	e	enum:ArmOpFeatureFlags
kRegDefLR	compiler/codegen/arm/ArmLIR.h	/^    kRegDefLR,$/;"	e	enum:ArmOpFeatureFlags
kRegDefList0	compiler/codegen/arm/ArmLIR.h	/^    kRegDefList0,$/;"	e	enum:ArmOpFeatureFlags
kRegDefList1	compiler/codegen/arm/ArmLIR.h	/^    kRegDefList1,$/;"	e	enum:ArmOpFeatureFlags
kRegDefSP	compiler/codegen/arm/ArmLIR.h	/^    kRegDefSP,$/;"	e	enum:ArmOpFeatureFlags
kRegEnd	compiler/codegen/arm/ArmLIR.h	/^    kRegEnd     = 48,$/;"	e	enum:ResourceEncodingPos
kRegLR	compiler/codegen/arm/ArmLIR.h	/^    kRegLR      = 14,$/;"	e	enum:ResourceEncodingPos
kRegMapFormatCompact16	analysis/RegisterMap.h	/^    kRegMapFormatCompact16,     \/* compact layout, 16-bit addresses *\/$/;"	e	enum:RegisterMapFormat
kRegMapFormatCompact8	analysis/RegisterMap.h	/^    kRegMapFormatCompact8,      \/* compact layout, 8-bit addresses *\/$/;"	e	enum:RegisterMapFormat
kRegMapFormatDifferential	analysis/RegisterMap.h	/^    kRegMapFormatDifferential,  \/* compressed, differential encoding *\/$/;"	e	enum:RegisterMapFormat
kRegMapFormatNone	analysis/RegisterMap.h	/^    kRegMapFormatNone,          \/* indicates no map data follows *\/$/;"	e	enum:RegisterMapFormat
kRegMapFormatOnHeap	analysis/RegisterMap.h	/^    kRegMapFormatOnHeap = 0x80, \/* bit flag, indicates allocation on heap *\/$/;"	e	enum:RegisterMapFormat
kRegMapFormatUnknown	analysis/RegisterMap.h	/^    kRegMapFormatUnknown = 0,$/;"	e	enum:RegisterMapFormat
kRegPC	compiler/codegen/arm/ArmLIR.h	/^    kRegPC      = 15,$/;"	e	enum:ResourceEncodingPos
kRegSP	compiler/codegen/arm/ArmLIR.h	/^    kRegSP      = 13,$/;"	e	enum:ResourceEncodingPos
kRegType1nrEND	analysis/CodeVerify.h	85;"	d
kRegType1nrSTART	analysis/CodeVerify.h	68;"	d
kRegTypeBoolean	analysis/CodeVerify.h	/^    kRegTypeBoolean,        \/* must be 0 or 1 *\/$/;"	e	enum:__anon13
kRegTypeByte	analysis/CodeVerify.h	/^    kRegTypeByte,$/;"	e	enum:__anon13
kRegTypeChar	analysis/CodeVerify.h	/^    kRegTypeChar,$/;"	e	enum:__anon13
kRegTypeConflict	analysis/CodeVerify.h	/^    kRegTypeConflict,       \/* merge clash makes this reg's type unknowable *\/$/;"	e	enum:__anon13
kRegTypeConstByte	analysis/CodeVerify.h	/^    kRegTypeConstByte,      \/* const derived byte *\/$/;"	e	enum:__anon13
kRegTypeConstChar	analysis/CodeVerify.h	/^    kRegTypeConstChar,      \/* const derived char *\/$/;"	e	enum:__anon13
kRegTypeConstHi	analysis/CodeVerify.h	/^    kRegTypeConstHi,        \/* const derived wide, upper half *\/$/;"	e	enum:__anon13
kRegTypeConstInteger	analysis/CodeVerify.h	/^    kRegTypeConstInteger,   \/* const derived integer *\/$/;"	e	enum:__anon13
kRegTypeConstLo	analysis/CodeVerify.h	/^    kRegTypeConstLo,        \/* const derived wide, lower half *\/$/;"	e	enum:__anon13
kRegTypeConstPosByte	analysis/CodeVerify.h	/^    kRegTypeConstPosByte,   \/* const derived byte, known positive *\/$/;"	e	enum:__anon13
kRegTypeConstPosShort	analysis/CodeVerify.h	/^    kRegTypeConstPosShort,  \/* const derived short, known positive *\/$/;"	e	enum:__anon13
kRegTypeConstShort	analysis/CodeVerify.h	/^    kRegTypeConstShort,     \/* const derived short *\/$/;"	e	enum:__anon13
kRegTypeDoubleHi	analysis/CodeVerify.h	/^    kRegTypeDoubleHi,$/;"	e	enum:__anon13
kRegTypeDoubleLo	analysis/CodeVerify.h	/^    kRegTypeDoubleLo,$/;"	e	enum:__anon13
kRegTypeFloat	analysis/CodeVerify.h	/^    kRegTypeFloat,$/;"	e	enum:__anon13
kRegTypeInteger	analysis/CodeVerify.h	/^    kRegTypeInteger,$/;"	e	enum:__anon13
kRegTypeLongHi	analysis/CodeVerify.h	/^    kRegTypeLongHi,$/;"	e	enum:__anon13
kRegTypeLongLo	analysis/CodeVerify.h	/^    kRegTypeLongLo,         \/* lower-numbered register; endian-independent *\/$/;"	e	enum:__anon13
kRegTypeMAX	analysis/CodeVerify.h	/^    kRegTypeMAX$/;"	e	enum:__anon13
kRegTypeOne	analysis/CodeVerify.h	/^    kRegTypeOne,            \/* 32-bit 1, could be Boolean, Int, Float *\/$/;"	e	enum:__anon13
kRegTypePosByte	analysis/CodeVerify.h	/^    kRegTypePosByte,        \/* byte, known positive (can become char) *\/$/;"	e	enum:__anon13
kRegTypePosShort	analysis/CodeVerify.h	/^    kRegTypePosShort,       \/* short, known positive (can become char) *\/$/;"	e	enum:__anon13
kRegTypeShort	analysis/CodeVerify.h	/^    kRegTypeShort,$/;"	e	enum:__anon13
kRegTypeUninit	analysis/CodeVerify.h	/^    kRegTypeUninit = 1,     \/* MUST be odd to distinguish from pointer *\/$/;"	e	enum:__anon13
kRegTypeUninitMask	analysis/CodeVerify.h	106;"	d
kRegTypeUninitShift	analysis/CodeVerify.h	107;"	d
kRegTypeUnknown	analysis/CodeVerify.h	/^    kRegTypeUnknown = 0,    \/* initial state; use value=0 so calloc works *\/$/;"	e	enum:__anon13
kRegTypeZero	analysis/CodeVerify.h	/^    kRegTypeZero,           \/* 32-bit 0, could be Boolean, Int, Float, or Ref *\/$/;"	e	enum:__anon13
kRegUse0	compiler/codegen/arm/ArmLIR.h	/^    kRegUse0,$/;"	e	enum:ArmOpFeatureFlags
kRegUse1	compiler/codegen/arm/ArmLIR.h	/^    kRegUse1,$/;"	e	enum:ArmOpFeatureFlags
kRegUse2	compiler/codegen/arm/ArmLIR.h	/^    kRegUse2,$/;"	e	enum:ArmOpFeatureFlags
kRegUse3	compiler/codegen/arm/ArmLIR.h	/^    kRegUse3,$/;"	e	enum:ArmOpFeatureFlags
kRegUseList0	compiler/codegen/arm/ArmLIR.h	/^    kRegUseList0,$/;"	e	enum:ArmOpFeatureFlags
kRegUseList1	compiler/codegen/arm/ArmLIR.h	/^    kRegUseList1,$/;"	e	enum:ArmOpFeatureFlags
kRegUsePC	compiler/codegen/arm/ArmLIR.h	/^    kRegUsePC,$/;"	e	enum:ArmOpFeatureFlags
kRegUseSP	compiler/codegen/arm/ArmLIR.h	/^    kRegUseSP,$/;"	e	enum:ArmOpFeatureFlags
kRegisterMapModeLivePrecise	Globals.h	/^    kRegisterMapModeLivePrecise$/;"	e	enum:RegisterMapMode
kRegisterMapModeTypePrecise	Globals.h	/^    kRegisterMapModeTypePrecise,$/;"	e	enum:RegisterMapMode
kRegisterMapModeUnknown	Globals.h	/^    kRegisterMapModeUnknown = 0,$/;"	e	enum:RegisterMapMode
kRetryAll	compiler/CompilerIR.h	/^    kRetryAll,$/;"	e	enum:AssemblerStatus
kRetryHalve	compiler/CompilerIR.h	/^    kRetryHalve$/;"	e	enum:AssemblerStatus
kST	compiler/codegen/arm/ArmLIR.h	/^    kST = 0xe,$/;"	e	enum:ArmOpDmbOptions
kSVByte	compiler/codegen/arm/Assemble.cpp	/^    kSVByte,$/;"	e	enum:__anon38	file:
kSVDoubleword	compiler/codegen/arm/Assemble.cpp	/^    kSVDoubleword,$/;"	e	enum:__anon38	file:
kSVHalfword	compiler/codegen/arm/Assemble.cpp	/^    kSVHalfword,$/;"	e	enum:__anon38	file:
kSVSBackwardBranch	interp/InterpState.h	/^    kSVSBackwardBranch = 8, \/\/ Exiting compiled code with backward branch trace$/;"	e	enum:SelfVerificationState
kSVSDebugInterp	interp/InterpState.h	/^    kSVSDebugInterp = 9,    \/\/ Normal state restored, running debug interpreter$/;"	e	enum:SelfVerificationState
kSVSIdle	interp/InterpState.h	/^    kSVSIdle = 0,           \/\/ Idle$/;"	e	enum:SelfVerificationState
kSVSNoChain	interp/InterpState.h	/^    kSVSNoChain = 7,        \/\/ Exiting compiled code by no chain$/;"	e	enum:SelfVerificationState
kSVSNoProfile	interp/InterpState.h	/^    kSVSNoProfile = 4,      \/\/ Exiting compiled code and don't collect profiles$/;"	e	enum:SelfVerificationState
kSVSNormal	interp/InterpState.h	/^    kSVSNormal = 6,         \/\/ Exiting compiled code normally$/;"	e	enum:SelfVerificationState
kSVSPunt	interp/InterpState.h	/^    kSVSPunt = 2,           \/\/ Exiting compiled code by punting$/;"	e	enum:SelfVerificationState
kSVSSingleStep	interp/InterpState.h	/^    kSVSSingleStep = 3,     \/\/ Exiting compiled code by single stepping$/;"	e	enum:SelfVerificationState
kSVSStart	interp/InterpState.h	/^    kSVSStart = 1,          \/\/ Shadow space set up, running compiled code$/;"	e	enum:SelfVerificationState
kSVSTraceSelect	interp/InterpState.h	/^    kSVSTraceSelect = 5,    \/\/ Exiting compiled code and compile the next pc$/;"	e	enum:SelfVerificationState
kSVSignedByte	compiler/codegen/arm/Assemble.cpp	/^    kSVSignedByte,$/;"	e	enum:__anon38	file:
kSVSignedHalfword	compiler/codegen/arm/Assemble.cpp	/^    kSVSignedHalfword,$/;"	e	enum:__anon38	file:
kSVVariable	compiler/codegen/arm/Assemble.cpp	/^    kSVVariable,$/;"	e	enum:__anon38	file:
kSVWord	compiler/codegen/arm/Assemble.cpp	/^    kSVWord,$/;"	e	enum:__anon38	file:
kSY	compiler/codegen/arm/ArmLIR.h	/^    kSY = 0xf,$/;"	e	enum:ArmOpDmbOptions
kSetsCCodes	compiler/codegen/arm/ArmLIR.h	/^    kSetsCCodes,$/;"	e	enum:ArmOpFeatureFlags
kSetsConst	compiler/Dataflow.h	/^    kSetsConst,$/;"	e	enum:DataFlowAttributePos
kSetter	compiler/Dataflow.h	/^    kSetter,$/;"	e	enum:DataFlowAttributePos
kSignedByte	compiler/codegen/arm/ArmLIR.h	/^    kSignedByte,$/;"	e	enum:OpSize
kSignedByte	compiler/codegen/x86/X86LIR.h	/^    kSignedByte,$/;"	e	enum:OpSize
kSignedHalf	compiler/codegen/arm/ArmLIR.h	/^    kSignedHalf,$/;"	e	enum:OpSize
kSignedHalf	compiler/codegen/x86/X86LIR.h	/^    kSignedHalf,$/;"	e	enum:OpSize
kSingle	compiler/codegen/arm/ArmLIR.h	/^    kSingle,$/;"	e	enum:OpSize
kSingle	compiler/codegen/x86/X86LIR.h	/^    kSingle,$/;"	e	enum:OpSize
kSlot0Sub	Debugger.cpp	92;"	d	file:
kSpacing	mterp/c/header.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-allstubs.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-armv5te-vfp.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-armv5te.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-armv7-a-neon.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-armv7-a.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-portable.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-x86-atom.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSpacing	mterp/out/InterpC-x86.cpp	/^static const char kSpacing[] = "            ";$/;"	v	file:
kSparseSwitch	compiler/CompilerIR.h	/^    kSparseSwitch,$/;"	e	enum:BlockListType
kStackFrameLen	AllocTracker.cpp	/^const int kStackFrameLen = 8;$/;"	v
kSubModeCallbackPending	interp/InterpState.h	/^    kSubModeCallbackPending   = 0x0020,$/;"	e	enum:ExecutionSubModes
kSubModeCheckAlways	interp/InterpState.h	/^    kSubModeCheckAlways       = 0x0080,$/;"	e	enum:ExecutionSubModes
kSubModeCountedStep	interp/InterpState.h	/^    kSubModeCountedStep       = 0x0040,$/;"	e	enum:ExecutionSubModes
kSubModeDebugProfile	interp/InterpState.h	/^    kSubModeDebugProfile   = (kSubModeMethodTrace |$/;"	e	enum:ExecutionSubModes
kSubModeDebuggerActive	interp/InterpState.h	/^    kSubModeDebuggerActive    = 0x0008,$/;"	e	enum:ExecutionSubModes
kSubModeEmulatorTrace	interp/InterpState.h	/^    kSubModeEmulatorTrace     = 0x0002,$/;"	e	enum:ExecutionSubModes
kSubModeInstCounting	interp/InterpState.h	/^    kSubModeInstCounting      = 0x0004,$/;"	e	enum:ExecutionSubModes
kSubModeJitSV	interp/InterpState.h	/^    kSubModeJitSV             = 0x8000,$/;"	e	enum:ExecutionSubModes
kSubModeJitTraceBuild	interp/InterpState.h	/^    kSubModeJitTraceBuild     = 0x4000,$/;"	e	enum:ExecutionSubModes
kSubModeMethodTrace	interp/InterpState.h	/^    kSubModeMethodTrace       = 0x0001,$/;"	e	enum:ExecutionSubModes
kSubModeNormal	interp/InterpState.h	/^    kSubModeNormal            = 0x0000,   \/* No active subMode *\/$/;"	e	enum:ExecutionSubModes
kSubModeSuspendPending	interp/InterpState.h	/^    kSubModeSuspendPending    = 0x0010,$/;"	e	enum:ExecutionSubModes
kSuccess	compiler/CompilerIR.h	/^    kSuccess,$/;"	e	enum:AssemblerStatus
kSuppressLoads	compiler/codegen/Optimizer.h	/^    kSuppressLoads,$/;"	e	enum:optControlVector
kSwitchOverflow	Globals.h	/^    kSwitchOverflow,$/;"	e	enum:NoChainExits
kThrowShow_accessFromClass	interp/Interp.cpp	1316;"	d	file:
kThrowsField	reflect/Proxy.cpp	49;"	d	file:
kThumb2AdcRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AdcRRI8,      \/* adc [111100010101] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2AdcRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AdcRRR,       \/* adc [111010110101] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2AddRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AddRRI12,     \/* add rd, rn, #imm12 [11110] i [100000] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2AddRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AddRRI8,      \/* add [111100001000] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2AddRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AddRRR,       \/* add [111010110000] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2AndRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AndRRI8,      \/* bic [111100000000] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2AndRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AndRRR,       \/* and [111010100000] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2AsrRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AsrRRI5,      \/* asr [11101010010011110] imm[14.12] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2AsrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2AsrRRR,       \/* asr [111110100100] rn[19..16] [1111] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2BCond	compiler/codegen/arm/ArmLIR.h	/^    kThumb2BCond,        \/* b<c> [1110] S cond[25-22] imm6[21-16] [10]$/;"	e	enum:ArmOpcode
kThumb2Bfc	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Bfc,          \/* bfc [11110011011011110] [0] imm3[14-12]$/;"	e	enum:ArmOpcode
kThumb2Bfi	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Bfi,          \/* bfi [111100110110] rn[19-16] [0] imm3[14-12]$/;"	e	enum:ArmOpcode
kThumb2BicRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2BicRRI8,      \/* bic [111100000010] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2BicRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2BicRRR,       \/* bic [111010100010] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2Cbnz	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Cbnz,         \/* cbnz rd,<label> [101110] i [1] imm5[7..3]$/;"	e	enum:ArmOpcode
kThumb2Cbz	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Cbz,          \/* cbn rd,<label> [101100] i [1] imm5[7..3]$/;"	e	enum:ArmOpcode
kThumb2Clrex	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Clrex,        \/* clrex [111100111011111110000111100101111] *\/$/;"	e	enum:ArmOpcode
kThumb2CmnRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2CmnRR,        \/* cmn [111010110001] rn[19..16] [0000] [1111]$/;"	e	enum:ArmOpcode
kThumb2CmpRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2CmpRI8,       \/* cmp rn, #<const> [11110] i [011011] rn[19-16] [0]$/;"	e	enum:ArmOpcode
kThumb2CmpRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2CmpRR,        \/* cmp [111010111011] rn[19..16] [0000] [1111]$/;"	e	enum:ArmOpcode
kThumb2Dmb	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Dmb,          \/* dmb [1111001110111111100011110101] option[3-0] *\/$/;"	e	enum:ArmOpcode
kThumb2EorRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2EorRRI8,      \/* eor [111100001000] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2EorRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2EorRRR,       \/* eor [111010101000] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2Fmdrr	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Fmdrr,        \/* vmov [111011000101] rt2[19-16] rt[15-12]$/;"	e	enum:ArmOpcode
kThumb2Fmrrd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Fmrrd,        \/* vmov [111011000100] rt2[19-16] rt[15-12]$/;"	e	enum:ArmOpcode
kThumb2Fmrs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Fmrs,         \/* vmov [111011100000] vn[19-16] rt[15-12] [1010]$/;"	e	enum:ArmOpcode
kThumb2Fmsr	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Fmsr,         \/* vmov [111011100001] vn[19-16] rt[15-12] [1010]$/;"	e	enum:ArmOpcode
kThumb2Fmstat	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Fmstat,       \/* fmstat [11101110111100011111101000010000] *\/$/;"	e	enum:ArmOpcode
kThumb2It	compiler/codegen/arm/ArmLIR.h	/^    kThumb2It,           \/* it [10111111] firstcond[7-4] mask[3-0] *\/$/;"	e	enum:ArmOpcode
kThumb2Ldmia	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Ldmia,        \/* ldmia  [111010001001[ rn[19..16] mask[15..0] *\/$/;"	e	enum:ArmOpcode
kThumb2LdrPcRel12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrPcRel12,   \/* ldr rd,[pc,#imm12] [1111100011011111] rt[15-12]$/;"	e	enum:ArmOpcode
kThumb2LdrPcReln12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrPcReln12,  \/* ldr rd,[pc,-#imm12] [1111100011011111] rt[15-12]$/;"	e	enum:ArmOpcode
kThumb2LdrRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrRRI12,     \/* str(Imm,T3) rd,[rn,#imm12] [111110001100]$/;"	e	enum:ArmOpcode
kThumb2LdrRRI8Predec	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrRRI8Predec, \/* ldr(Imm,T4) rd,[rn,#-imm8] [111110000101]$/;"	e	enum:ArmOpcode
kThumb2LdrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrRRR,       \/* ldr rt,[rn,rm,LSL #imm] [111110000101] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2LdrbRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrbRRI12,    \/* ldrb rt,[rn,#imm12] [111110001001]$/;"	e	enum:ArmOpcode
kThumb2LdrbRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrbRRR,      \/* ldrb rt,[rn,rm,LSL #imm] [111110000101] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2Ldrex	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Ldrex,        \/* ldrex [111010000101] rn[19-16] rt[11-8] [1111]$/;"	e	enum:ArmOpcode
kThumb2LdrhRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrhRRI12,    \/* ldrh rt,[rn,#imm12] [111110001011]$/;"	e	enum:ArmOpcode
kThumb2LdrhRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrhRRR,      \/* ldrh rt,[rn,rm,LSL #imm] [111110000101] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2LdrsbRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrsbRRI12,   \/* ldrsb rt,[rn,#imm12] [111110011001]$/;"	e	enum:ArmOpcode
kThumb2LdrsbRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrsbRRR,     \/* ldrsb rt,[rn,rm,LSL #imm] [111110000101] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2LdrshRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrshRRI12,   \/* ldrsh rt,[rn,#imm12] [111110011011]$/;"	e	enum:ArmOpcode
kThumb2LdrshRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LdrshRRR,     \/* ldrsh rt,[rn,rm,LSL #imm] [111110000101] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2LslRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LslRRI5,      \/* lsl [11101010010011110] imm[14.12] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2LslRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LslRRR,       \/* lsl [111110100000] rn[19..16] [1111] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2LsrRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LsrRRI5,      \/* lsr [11101010010011110] imm[14.12] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2LsrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2LsrRRR,       \/* lsr [111110100010] rn[19..16] [1111] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2Mla	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Mla,          \/* mla [111110110000] rn[19-16] ra[15-12] rd[7-4]$/;"	e	enum:ArmOpcode
kThumb2MnvRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2MnvRR,        \/* mvn [11101010011011110] rd[11-8] [0000]$/;"	e	enum:ArmOpcode
kThumb2MovImm16	compiler/codegen/arm/ArmLIR.h	/^    kThumb2MovImm16,     \/* mov(T3) rd, #<const> [11110] i [0010100] imm4 [0]$/;"	e	enum:ArmOpcode
kThumb2MovImmShift	compiler/codegen/arm/ArmLIR.h	/^    kThumb2MovImmShift,  \/* mov(T2) rd, #<const> [11110] i [00001001111]$/;"	e	enum:ArmOpcode
kThumb2MovRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2MovRR,        \/* mov rd, rm [11101010010011110000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2MulRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2MulRRR,       \/* mul [111110110000] rn[19..16] [1111] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2MvnImmShift	compiler/codegen/arm/ArmLIR.h	/^    kThumb2MvnImmShift,  \/* mov(T2) rd, #<const> [11110] i [00011011110]$/;"	e	enum:ArmOpcode
kThumb2NegRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2NegRR,        \/* actually rsub rd, rn, #0 *\/$/;"	e	enum:ArmOpcode
kThumb2OrrRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2OrrRRI8,      \/* orr [111100000100] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2OrrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2OrrRRR,       \/* orr [111010100100] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2Pop	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Pop,          \/* pop     [1110100010111101] list[15-0]*\/$/;"	e	enum:ArmOpcode
kThumb2Push	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Push,         \/* push    [1110100100101101] list[15-0]*\/$/;"	e	enum:ArmOpcode
kThumb2RorRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumb2RorRRI5,      \/* ror [11101010010011110] imm[14.12] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2RorRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2RorRRR,       \/* ror [111110100110] rn[19..16] [1111] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2RsubRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2RsubRRI8,     \/* rsub [111100011100] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2SbcRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2SbcRRI8,      \/* sbc [111100010111] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2SbcRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2SbcRRR,       \/* sbc [111010110110] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2Sbfx	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Sbfx,         \/* ubfx rd,rn,#lsb,#width [111100110100] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Sel	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Sel,          \/* sel rd, rn, rm [111110101010] rn[19-16] rd[11-8]$/;"	e	enum:ArmOpcode
kThumb2Stmia	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Stmia,        \/* stmia  [111010001000[ rn[19..16] mask[15..0] *\/$/;"	e	enum:ArmOpcode
kThumb2StrRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrRRI12,     \/* str(Imm,T3) rd,[rn,#imm12] [111110001100]$/;"	e	enum:ArmOpcode
kThumb2StrRRI8Predec	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrRRI8Predec, \/* str(Imm,T4) rd,[rn,#-imm8] [111110000100]$/;"	e	enum:ArmOpcode
kThumb2StrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrRRR,       \/* str rt,[rn,rm,LSL #imm] [111110000100] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2StrbRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrbRRI12,    \/* strb rt,[rn,#imm12] [111110001000]$/;"	e	enum:ArmOpcode
kThumb2StrbRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrbRRR,      \/* str rt,[rn,rm,LSL #imm] [111110000000] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2Strex	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Strex,        \/* strex [111010000100] rn[19-16] rt[11-8] rd[11-8]$/;"	e	enum:ArmOpcode
kThumb2StrhRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrhRRI12,    \/* strh rt,[rn,#imm12] [111110001010]$/;"	e	enum:ArmOpcode
kThumb2StrhRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2StrhRRR,      \/* str rt,[rn,rm,LSL #imm] [111110000010] rn[19-16]$/;"	e	enum:ArmOpcode
kThumb2SubRRI12	compiler/codegen/arm/ArmLIR.h	/^    kThumb2SubRRI12,     \/* sub rd, rn, #imm12 [11110] i [01010] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2SubRRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2SubRRI8,      \/* sub [111100011011] rn[19..16] [0] imm3$/;"	e	enum:ArmOpcode
kThumb2SubRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2SubRRR,       \/* sub [111010111010] rn[19..16] [0000] rd[11..8]$/;"	e	enum:ArmOpcode
kThumb2TstRR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2TstRR,        \/* tst [111010100001] rn[19..16] [0000] [1111]$/;"	e	enum:ArmOpcode
kThumb2Ubfx	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Ubfx,         \/* ubfx rd,rn,#lsb,#width [111100111100] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Umull	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Umull,        \/* umull [111110111010] rn[19-16], rdlo[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vabsd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vabsd,        \/* vabs.f64 [111011101] D [110000] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vabss	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vabss,        \/* vabs.f32 [111011101] D [110000] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vaddd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vaddd,        \/* vadd vd, vn, vm [111011100011] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vadds	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vadds,        \/* vadd vd, vn, vm [111011100011] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vcmpd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vcmpd,        \/* vcmp [111011101] D [11011] rd[15-12] [1011]$/;"	e	enum:ArmOpcode
kThumb2Vcmps	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vcmps,        \/* vcmp [111011101] D [11010] rd[15-12] [1011]$/;"	e	enum:ArmOpcode
kThumb2VcvtDF	compiler/codegen/arm/ArmLIR.h	/^    kThumb2VcvtDF,       \/* vcvt.F32.F64 vd, vm [1110111010110111] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2VcvtDI	compiler/codegen/arm/ArmLIR.h	/^    kThumb2VcvtDI,       \/* vcvt.S32.F32 vd, vm [1110111010111101] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2VcvtFI	compiler/codegen/arm/ArmLIR.h	/^    kThumb2VcvtFI,       \/* vcvt.S32.F32 vd, vm [1110111010111101] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2VcvtFd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2VcvtFd,       \/* vcvt.F64.F32 vd, vm [1110111010110111] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2VcvtID	compiler/codegen/arm/ArmLIR.h	/^    kThumb2VcvtID,       \/* vcvt.F64 vd, vm [1110111010111000] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2VcvtIF	compiler/codegen/arm/ArmLIR.h	/^    kThumb2VcvtIF,       \/* vcvt.F32 vd, vm [1110111010111000] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2Vdivd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vdivd,        \/* vdiv vd, vn, vm [111011101000] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vdivs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vdivs,        \/* vdiv vd, vn, vm [111011101000] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vldrd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vldrd,        \/* vldr low  dx [111011011001] rn[19..16] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vldrs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vldrs,        \/* vldr low  sx [111011011001] rn[19..16] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vmovd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmovd,        \/* vmov.f64 vd, vm [111011101] D [110000]$/;"	e	enum:ArmOpcode
kThumb2Vmovd_IMM8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmovd_IMM8,   \/* vmov.f64 [111011101] D [11] imm4h[19-16] vd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vmovd_RR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmovd_RR,     \/* vmov [111011101] D [110000] vd[15-12 [101101]$/;"	e	enum:ArmOpcode
kThumb2Vmovs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmovs,        \/* vmov.f32 vd, vm [111011101] D [110000]$/;"	e	enum:ArmOpcode
kThumb2Vmovs_IMM8	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmovs_IMM8,   \/* vmov.f32 [111011101] D [11] imm4h[19-16] vd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vmovs_RR	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmovs_RR,     \/* vmov [111011101] D [110000] vd[15-12 [101001]$/;"	e	enum:ArmOpcode
kThumb2Vmuld	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmuld,        \/* vmul vd, vn, vm [111011100010] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vmuls	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vmuls,        \/* vmul vd, vn, vm [111011100010] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vnegd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vnegd,        \/* vneg.f64 [111011101] D [110000] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vnegs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vnegs,        \/* vneg.f32 [111011101] D [110000] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vsqrtd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vsqrtd,       \/* vsqrt.f64 vd, vm [1110111010110001] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2Vsqrts	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vsqrts,       \/* vsqrt.f32 vd, vm [1110111010110001] vd[15..12]$/;"	e	enum:ArmOpcode
kThumb2Vstrd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vstrd,        \/* vstr low  dx [111011011000] rn[19..16] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vstrs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vstrs,        \/* vstr low  sx [111011011000] rn[19..16] rd[15-12]$/;"	e	enum:ArmOpcode
kThumb2Vsubd	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vsubd,        \/* vsub vd, vn, vm [111011100011] rn[19..16]$/;"	e	enum:ArmOpcode
kThumb2Vsubs	compiler/codegen/arm/ArmLIR.h	/^    kThumb2Vsubs,        \/* vsub vd, vn, vm [111011100011] rn[19..16]$/;"	e	enum:ArmOpcode
kThumbAdcRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbAdcRR,         \/* adc     [0100000101] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddPcRel	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddPcRel,      \/* add(5)  [10100] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddRI8,        \/* add(2)  [00110] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddRRHH	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddRRHH,       \/* add(4)  [01001100] H12[11] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddRRHL	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddRRHL,       \/* add(4)  [01001000] H12[10] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddRRI3	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddRRI3,       \/* add(1)  [0001110] imm_3[8..6] rn[5..3] rd[2..0]*\/$/;"	e	enum:ArmOpcode
kThumbAddRRLH	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddRRLH,       \/* add(4)  [01000100] H12[01] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddRRR,        \/* add(3)  [0001100] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddSpI7	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddSpI7,       \/* add(7)  [101100000] imm_7[6..0] *\/$/;"	e	enum:ArmOpcode
kThumbAddSpRel	compiler/codegen/arm/ArmLIR.h	/^    kThumbAddSpRel,      \/* add(6)  [10101] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbAndRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbAndRR,         \/* and     [0100000000] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAsrRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbAsrRR,         \/* asr(2)  [0100000100] rs[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbAsrRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbAsrRRI5,       \/* asr(1)  [00010] imm_5[10..6] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbBCond	compiler/codegen/arm/ArmLIR.h	/^    kThumbBCond,         \/* b(1)    [1101] cond[11..8] offset_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbBUncond	compiler/codegen/arm/ArmLIR.h	/^    kThumbBUncond,       \/* b(2)    [11100] offset_11[10..0] *\/$/;"	e	enum:ArmOpcode
kThumbBicRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbBicRR,         \/* bic     [0100001110] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbBkpt	compiler/codegen/arm/ArmLIR.h	/^    kThumbBkpt,          \/* bkpt    [10111110] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbBl1	compiler/codegen/arm/ArmLIR.h	/^    kThumbBl1,           \/* blx(1)  [111] H[10] offset_11[10..0] *\/$/;"	e	enum:ArmOpcode
kThumbBl2	compiler/codegen/arm/ArmLIR.h	/^    kThumbBl2,           \/* blx(1)  [111] H[11] offset_11[10..0] *\/$/;"	e	enum:ArmOpcode
kThumbBlx1	compiler/codegen/arm/ArmLIR.h	/^    kThumbBlx1,          \/* blx(1)  [111] H[10] offset_11[10..0] *\/$/;"	e	enum:ArmOpcode
kThumbBlx2	compiler/codegen/arm/ArmLIR.h	/^    kThumbBlx2,          \/* blx(1)  [111] H[01] offset_11[10..0] *\/$/;"	e	enum:ArmOpcode
kThumbBlxR	compiler/codegen/arm/ArmLIR.h	/^    kThumbBlxR,          \/* blx(2)  [010001111] rm[6..3] [000] *\/$/;"	e	enum:ArmOpcode
kThumbBx	compiler/codegen/arm/ArmLIR.h	/^    kThumbBx,            \/* bx      [010001110] H2[6..6] rm[5..3] SBZ[000] *\/$/;"	e	enum:ArmOpcode
kThumbCmnRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbCmnRR,         \/* cmn     [0100001011] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbCmpHH	compiler/codegen/arm/ArmLIR.h	/^    kThumbCmpHH,         \/* cmp(3)  [01000111] H12[11] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbCmpHL	compiler/codegen/arm/ArmLIR.h	/^    kThumbCmpHL,         \/* cmp(3)  [01000110] H12[10] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbCmpLH	compiler/codegen/arm/ArmLIR.h	/^    kThumbCmpLH,         \/* cmp(3)  [01000101] H12[01] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbCmpRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumbCmpRI8,        \/* cmp(1)  [00101] rn[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbCmpRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbCmpRR,         \/* cmp(2)  [0100001010] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbEorRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbEorRR,         \/* eor     [0100000001] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdmia	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdmia,         \/* ldmia   [11001] rn[10..8] reglist [7..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrPcRel	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrPcRel,      \/* ldr(3)  [01001] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrRRI5,       \/* ldr(1)  [01101] imm_5[10..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrRRR,        \/* ldr(2)  [0101100] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrSpRel	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrSpRel,      \/* ldr(4)  [10011] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrbRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrbRRI5,      \/* ldrb(1) [01111] imm_5[10..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrbRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrbRRR,       \/* ldrb(2) [0101110] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrhRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrhRRI5,      \/* ldrh(1) [10001] imm_5[10..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrhRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrhRRR,       \/* ldrh(2) [0101101] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrsbRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrsbRRR,      \/* ldrsb   [0101011] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLdrshRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLdrshRRR,      \/* ldrsh   [0101111] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLslRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLslRR,         \/* lsl(2)  [0100000010] rs[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLslRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbLslRRI5,       \/* lsl(1)  [00000] imm_5[10..6] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLsrRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbLsrRR,         \/* lsr(2)  [0100000011] rs[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbLsrRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbLsrRRI5,       \/* lsr(1)  [00001] imm_5[10..6] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbMovImm	compiler/codegen/arm/ArmLIR.h	/^    kThumbMovImm,        \/* mov(1)  [00100] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbMovRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbMovRR,         \/* mov(2)  [0001110000] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbMovRR_H2H	compiler/codegen/arm/ArmLIR.h	/^    kThumbMovRR_H2H,     \/* mov(3)  [01000111] H12[11] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbMovRR_H2L	compiler/codegen/arm/ArmLIR.h	/^    kThumbMovRR_H2L,     \/* mov(3)  [01000110] H12[01] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbMovRR_L2H	compiler/codegen/arm/ArmLIR.h	/^    kThumbMovRR_L2H,     \/* mov(3)  [01000101] H12[10] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbMul	compiler/codegen/arm/ArmLIR.h	/^    kThumbMul,           \/* mul     [0100001101] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbMvn	compiler/codegen/arm/ArmLIR.h	/^    kThumbMvn,           \/* mvn     [0100001111] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbNeg	compiler/codegen/arm/ArmLIR.h	/^    kThumbNeg,           \/* neg     [0100001001] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbOrr	compiler/codegen/arm/ArmLIR.h	/^    kThumbOrr,           \/* orr     [0100001100] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbPop	compiler/codegen/arm/ArmLIR.h	/^    kThumbPop,           \/* pop     [1011110] r[8..8] rl[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbPush	compiler/codegen/arm/ArmLIR.h	/^    kThumbPush,          \/* push    [1011010] r[8..8] rl[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbRorRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbRorRR,         \/* ror     [0100000111] rs[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbSbc	compiler/codegen/arm/ArmLIR.h	/^    kThumbSbc,           \/* sbc     [0100000110] rm[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbStmia	compiler/codegen/arm/ArmLIR.h	/^    kThumbStmia,         \/* stmia   [11000] rn[10..8] reglist [7.. 0] *\/$/;"	e	enum:ArmOpcode
kThumbStrRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrRRI5,       \/* str(1)  [01100] imm_5[10..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbStrRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrRRR,        \/* str(2)  [0101000] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbStrSpRel	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrSpRel,      \/* str(3)  [10010] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbStrbRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrbRRI5,      \/* strb(1) [01110] imm_5[10..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbStrbRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrbRRR,       \/* strb(2) [0101010] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbStrhRRI5	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrhRRI5,      \/* strh(1) [10000] imm_5[10..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbStrhRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbStrhRRR,       \/* strh(2) [0101001] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbSubRI8	compiler/codegen/arm/ArmLIR.h	/^    kThumbSubRI8,        \/* sub(2)  [00111] rd[10..8] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbSubRRI3	compiler/codegen/arm/ArmLIR.h	/^    kThumbSubRRI3,       \/* sub(1)  [0001111] imm_3[8..6] rn[5..3] rd[2..0]*\/$/;"	e	enum:ArmOpcode
kThumbSubRRR	compiler/codegen/arm/ArmLIR.h	/^    kThumbSubRRR,        \/* sub(3)  [0001101] rm[8..6] rn[5..3] rd[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbSubSpI7	compiler/codegen/arm/ArmLIR.h	/^    kThumbSubSpI7,       \/* sub(4)  [101100001] imm_7[6..0] *\/$/;"	e	enum:ArmOpcode
kThumbSwi	compiler/codegen/arm/ArmLIR.h	/^    kThumbSwi,           \/* swi     [11011111] imm_8[7..0] *\/$/;"	e	enum:ArmOpcode
kThumbTst	compiler/codegen/arm/ArmLIR.h	/^    kThumbTst,           \/* tst     [0100001000] rm[5..3] rn[2..0] *\/$/;"	e	enum:ArmOpcode
kThumbUndefined	compiler/codegen/arm/ArmLIR.h	/^    kThumbUndefined,     \/* undefined [11011110xxxxxxxx] *\/$/;"	e	enum:ArmOpcode
kTraceProfilingContinuous	Globals.h	/^    kTraceProfilingContinuous = 2,    \/\/ Always profiling$/;"	e	enum:TraceProfilingModes
kTraceProfilingDisabled	Globals.h	/^    kTraceProfilingDisabled = 0,      \/\/ Not profiling$/;"	e	enum:TraceProfilingModes
kTraceProfilingPeriodicOff	Globals.h	/^    kTraceProfilingPeriodicOff = 1,   \/\/ Periodic profiling, off phase$/;"	e	enum:TraceProfilingModes
kTraceProfilingPeriodicOn	Globals.h	/^    kTraceProfilingPeriodicOn = 3     \/\/ Periodic profiling, on phase$/;"	e	enum:TraceProfilingModes
kTrackGrefUsage	Jni.cpp	246;"	d	file:
kTrackLiveTemps	compiler/codegen/Optimizer.h	/^    kTrackLiveTemps,$/;"	e	enum:optControlVector
kTrackRegsAll	analysis/CodeVerify.cpp	/^    kTrackRegsAll$/;"	e	enum:RegisterTrackingMode	file:
kTrackRegsBranches	analysis/CodeVerify.cpp	/^    kTrackRegsBranches,$/;"	e	enum:RegisterTrackingMode	file:
kTrackRegsGcPoints	analysis/CodeVerify.cpp	/^    kTrackRegsGcPoints,$/;"	e	enum:RegisterTrackingMode	file:
kTypeCategory1nr	analysis/CodeVerify.cpp	/^    kTypeCategory1nr,           \/\/ boolean, byte, char, short, int, float$/;"	e	enum:TypeCategory	file:
kTypeCategory2	analysis/CodeVerify.cpp	/^    kTypeCategory2,             \/\/ long, double$/;"	e	enum:TypeCategory	file:
kTypeCategoryRef	analysis/CodeVerify.cpp	/^    kTypeCategoryRef,           \/\/ object reference$/;"	e	enum:TypeCategory	file:
kTypeCategoryUnknown	analysis/CodeVerify.cpp	/^    kTypeCategoryUnknown = 0,$/;"	e	enum:TypeCategory	file:
kUA	compiler/Dataflow.h	/^    kUA = 0,$/;"	e	enum:DataFlowAttributePos
kUAWide	compiler/Dataflow.h	/^    kUAWide,$/;"	e	enum:DataFlowAttributePos
kUB	compiler/Dataflow.h	/^    kUB,$/;"	e	enum:DataFlowAttributePos
kUBWide	compiler/Dataflow.h	/^    kUBWide,$/;"	e	enum:DataFlowAttributePos
kUC	compiler/Dataflow.h	/^    kUC,$/;"	e	enum:DataFlowAttributePos
kUCWide	compiler/Dataflow.h	/^    kUCWide,$/;"	e	enum:DataFlowAttributePos
kUninitThisArgAddr	analysis/CodeVerify.h	155;"	d
kUninitThisArgSlot	analysis/CodeVerify.h	156;"	d
kUnsignedByte	compiler/codegen/arm/ArmLIR.h	/^    kUnsignedByte,$/;"	e	enum:OpSize
kUnsignedByte	compiler/codegen/x86/X86LIR.h	/^    kUnsignedByte,$/;"	e	enum:OpSize
kUnsignedHalf	compiler/codegen/arm/ArmLIR.h	/^    kUnsignedHalf,$/;"	e	enum:OpSize
kUnsignedHalf	compiler/codegen/x86/X86LIR.h	/^    kUnsignedHalf,$/;"	e	enum:OpSize
kUpdatePosnMinRegs	analysis/RegisterMap.cpp	58;"	d	file:
kUsesCCodes	compiler/codegen/arm/ArmLIR.h	/^    kUsesCCodes,$/;"	e	enum:ArmOpFeatureFlags
kVerifyErrorRefTypeShift	analysis/DexPrepare.h	80;"	d
kVirtualHeapAllocated	alloc/HeapDebug.h	/^    kVirtualHeapAllocated = 2,$/;"	e	enum:HeapDebugInfoType
kVirtualHeapMaximumSize	alloc/HeapDebug.h	/^    kVirtualHeapMaximumSize = 4$/;"	e	enum:HeapDebugInfoType
kVirtualHeapSize	alloc/HeapDebug.h	/^    kVirtualHeapSize = 0,$/;"	e	enum:HeapDebugInfoType
kWeakGlobalRefsTableInitialSize	Jni.cpp	248;"	d	file:
kWord	compiler/codegen/arm/ArmLIR.h	/^    kWord,$/;"	e	enum:OpSize
kWord	compiler/codegen/x86/X86LIR.h	/^    kWord,$/;"	e	enum:OpSize
kWordSize	alloc/MarkSweep.cpp	/^const size_t kWordSize = sizeof(Word);$/;"	v
kWorkOrderInvalid	compiler/Compiler.h	/^    kWorkOrderInvalid = 0,      \/\/ Should never see by the backend$/;"	e	enum:WorkOrderKind
kWorkOrderMethod	compiler/Compiler.h	/^    kWorkOrderMethod = 1,       \/\/ Work is to compile a whole method$/;"	e	enum:WorkOrderKind
kWorkOrderProfileMode	compiler/Compiler.h	/^    kWorkOrderProfileMode = 4,  \/\/ Change profiling mode$/;"	e	enum:WorkOrderKind
kWorkOrderTrace	compiler/Compiler.h	/^    kWorkOrderTrace = 2,        \/\/ Work is to compile code fragment(s)$/;"	e	enum:WorkOrderKind
kWorkOrderTraceDebug	compiler/Compiler.h	/^    kWorkOrderTraceDebug = 3,   \/\/ Work is to compile\/debug code fragment(s)$/;"	e	enum:WorkOrderKind
kernelGroupScheduling	Globals.h	/^    int kernelGroupScheduling;$/;"	m	struct:DvmGlobals
key	compiler/CompilerIR.h	/^    int key;$/;"	m	struct:SuccessorBlockInfo
key1	AtomicCache.h	/^    u4          key1;$/;"	m	struct:AtomicCacheEntry
key2	AtomicCache.h	/^    u4          key2;$/;"	m	struct:AtomicCacheEntry
kind	compiler/Compiler.h	/^    WorkOrderKind kind;$/;"	m	struct:CompilerWorkOrder
kind	compiler/codegen/arm/ArmLIR.h	/^        ArmEncodingKind kind;$/;"	m	struct:ArmEncodingMap::__anon39
kind	oo/Class.h	/^    ClassPathEntryKind kind;$/;"	m	struct:ClassPathEntry
kind_	IndirectRefTable.h	/^    IndirectRefKind kind_;$/;"	m	struct:IndirectRefTable
l	Common.h	/^    Object* l;$/;"	m	union:JValue
l	shadowlib/JniUtility.h	/^	jlong l;$/;"	m	union:double_jlong
l	shadowlib/ReQueue.h	/^	jlong l;$/;"	m	union:double_jlong
l	shadowlib/buffpack.h	/^	jlong l;$/;"	m	union:double_jlong
label_prefix	compiler/template/gen-template.py	/^label_prefix = ".L"         # use ".L" to hide labels from gdb$/;"	v
label_prefix	mterp/gen-mterp.py	/^label_prefix = ".L"         # use ".L" to hide labels from gdb$/;"	v
lastActivityWhen	jdwp/JdwpPriv.h	/^    s8              lastActivityWhen;$/;"	m	struct:JdwpState
lastAddr	analysis/VfyBasicBlock.h	/^    u4              lastAddr;       \/* address of last instruction *\/$/;"	m	struct:VfyBasicBlock
lastAddress	Debugger.cpp	/^    u4 lastAddress;$/;"	m	struct:AddressSetContext	file:
lastAddressValid	Debugger.cpp	/^    bool lastAddressValid;$/;"	m	struct:AddressSetContext	file:
lastLIRInsn	compiler/CompilerIR.h	/^    LIR *lastLIRInsn;$/;"	m	struct:CompilationUnit
lastMIRInsn	compiler/CompilerIR.h	/^    MIR *lastMIRInsn;$/;"	m	struct:BasicBlock
lastMessage	Globals.h	/^    const char *lastMessage;$/;"	m	struct:DvmGlobals
lastPC	Thread.h	/^    const u2*   lastPC;         \/\/ Stage the PC for the threaded interpreter$/;"	m	struct:Thread
le64toh	shadowlib/ShadowLib.h	13;"	d
le64toh	shadowlib/ShadowLib.h	18;"	d
leadingZeros	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int leadingZeros(u4 val)$/;"	f	file:
length	UtfString.cpp	/^int StringObject::length() const$/;"	f	class:StringObject
length	alloc/MarkSweep.h	/^    size_t length;$/;"	m	struct:GcMarkStack
length	hprof/Hprof.h	/^    u4 length;$/;"	m	struct:hprof_record_t
length	jdwp/JdwpHandler.h	/^    u4  length;$/;"	m	struct:JdwpReqHeader
length	oo/Object.h	/^    u4              length;$/;"	m	struct:ArrayObject
limit	alloc/HeapSource.cpp	/^    char *limit;$/;"	m	struct:Heap	file:
limit	alloc/MarkSweep.h	/^    const Object **limit;$/;"	m	struct:GcMarkStack
limitBlock	alloc/Copying.cpp	/^    size_t baseBlock, limitBlock;$/;"	m	struct:HeapSource	file:
line	Debugger.h	/^    int line;           \/* line #; could be -1 *\/$/;"	m	struct:StepControl
line	compiler/template/gen-template.py	/^        line = line.strip()         # remove CRLF, leading spaces$/;"	v
line	mterp/gen-mterp.py	/^        line = line.strip()         # remove CRLF, leading spaces$/;"	v
lineAlloc	analysis/CodeVerify.cpp	/^    void*       lineAlloc;$/;"	m	struct:RegisterTable	file:
lineNum	Debugger.cpp	/^    u4 lineNum;$/;"	m	struct:AddressSetContext	file:
lineNum	compiler/codegen/arm/Assemble.cpp	/^    u4 lineNum;$/;"	m	struct:jitProfileAddrToLine	file:
lineNum	interp/Stack.cpp	/^    u4 lineNum;$/;"	m	struct:LineNumFromPcContext	file:
lineNumForPcCb	interp/Stack.cpp	/^static int lineNumForPcCb(void *cnxt, u4 address, u4 lineNum)$/;"	f	file:
lineTablePositionsCb	Debugger.cpp	/^static int lineTablePositionsCb(void *cnxt, u4 address, u4 lineNum)$/;"	f	file:
linearAllocTests	oo/Class.cpp	/^static void linearAllocTests()$/;"	f	file:
list	PointerSet.cpp	/^    const void** list;$/;"	m	struct:PointerSet	file:
list	compiler/CompilerUtility.h	/^    GrowableList *list;$/;"	m	struct:GrowableListIterator
listen	shadowlib/Socket.cpp	/^bool Socket::listen() const$/;"	f	class:Socket
listenPort	jdwp/JdwpSocket.cpp	/^    short   listenPort;$/;"	m	struct:JdwpNetState	file:
listenSock	jdwp/JdwpSocket.cpp	/^    int     listenSock;         \/* listen for connection from debugger *\/$/;"	m	struct:JdwpNetState	file:
literalList	compiler/CompilerIR.h	/^    LIR *literalList;                   \/\/ Constants$/;"	m	struct:CompilationUnit
literalStrings	Globals.h	/^    HashTable*  literalStrings;$/;"	m	struct:DvmGlobals
live	compiler/codegen/arm/ArmLIR.h	/^    bool live;                  \/\/ Is there an associated SSA name?$/;"	m	struct:RegisterInfo
live	compiler/codegen/x86/X86LIR.h	/^    bool live;                  \/\/ Is there an associated SSA name?$/;"	m	struct:RegisterInfo
liveBits	alloc/HeapSource.cpp	/^    HeapBitmap liveBits;$/;"	m	struct:HeapSource	file:
liveInV	compiler/Dataflow.h	/^    BitVector *liveInV;$/;"	m	struct:BasicBlockDataFlow
liveRegs	analysis/CodeVerify.h	/^    BitVector*      liveRegs;$/;"	m	struct:RegisterLine
liveRegs	analysis/VfyBasicBlock.h	/^    BitVector*      liveRegs;       \/* liveness for each register *\/$/;"	m	struct:VfyBasicBlock
ll	InlineNative.cpp	/^    s8 ll;$/;"	m	union:Convert64	file:
loadAllClasses	analysis/DexPrepare.cpp	/^static bool loadAllClasses(DvmDex* pDvmDex)$/;"	f	file:
loadAndEmitAltOpcodes	mterp/gen-mterp.py	/^def loadAndEmitAltOpcodes():$/;"	f
loadAndEmitAltStub	mterp/gen-mterp.py	/^def loadAndEmitAltStub(source, opindex):$/;"	f
loadAndEmitAsm	compiler/template/gen-template.py	/^def loadAndEmitAsm(location, opindex, sister_list):$/;"	f
loadAndEmitAsm	mterp/gen-mterp.py	/^def loadAndEmitAsm(location, opindex, sister_list):$/;"	f
loadAndEmitC	mterp/gen-mterp.py	/^def loadAndEmitC(location, opindex):$/;"	f
loadAndEmitOpcodes	compiler/template/gen-template.py	/^def loadAndEmitOpcodes():$/;"	f
loadAndEmitOpcodes	mterp/gen-mterp.py	/^def loadAndEmitOpcodes():$/;"	f
loadBaseDisp	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadBaseDisp(CompilationUnit *cUnit, MIR *mir, int rBase,$/;"	f	file:
loadBaseDisp	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadBaseDisp(CompilationUnit *cUnit, MIR *mir, int rBase,$/;"	f	file:
loadBaseDispBody	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadBaseDispBody(CompilationUnit *cUnit, MIR *mir, int rBase,$/;"	f	file:
loadBaseDispBody	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadBaseDispBody(CompilationUnit *cUnit, MIR *mir, int rBase,$/;"	f	file:
loadBaseDispWide	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadBaseDispWide(CompilationUnit *cUnit, MIR *mir, int rBase,$/;"	f	file:
loadBaseDispWide	compiler/codegen/arm/Thumb2/Factory.cpp	/^static  ArmLIR *loadBaseDispWide(CompilationUnit *cUnit, MIR *mir, int rBase,$/;"	f	file:
loadBaseIndexed	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadBaseIndexed(CompilationUnit *cUnit, int rBase,$/;"	f	file:
loadBaseIndexed	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadBaseIndexed(CompilationUnit *cUnit, int rBase,$/;"	f	file:
loadClassFromDex	oo/Class.cpp	/^static ClassObject* loadClassFromDex(DvmDex* pDvmDex,$/;"	f	file:
loadClassFromDex0	oo/Class.cpp	/^static ClassObject* loadClassFromDex0(DvmDex* pDvmDex,$/;"	f	file:
loadClassPointer	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadClassPointer(CompilationUnit *cUnit, int rDest, int value)$/;"	f	file:
loadClassPointer	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadClassPointer(CompilationUnit *cUnit, int rDest, int value)$/;"	f	file:
loadConstant	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadConstant(CompilationUnit *cUnit, int rDest, int value)$/;"	f	file:
loadConstant	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadConstant(CompilationUnit *cUnit, int rDest, int value)$/;"	f	file:
loadConstantNoClobber	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadConstantNoClobber(CompilationUnit *cUnit, int rDest,$/;"	f	file:
loadConstantNoClobber	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadConstantNoClobber(CompilationUnit *cUnit, int rDest,$/;"	f	file:
loadConstantValueWide	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadConstantValueWide(CompilationUnit *cUnit, int rDestLo,$/;"	f	file:
loadConstantValueWide	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadConstantValueWide(CompilationUnit *cUnit, int rDestLo,$/;"	f	file:
loadFPConstantValue	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadFPConstantValue(CompilationUnit *cUnit, int rDest,$/;"	f	file:
loadIFieldFromDex	oo/Class.cpp	/^static void loadIFieldFromDex(ClassObject* clazz,$/;"	f	file:
loadJniLibrary	Init.cpp	/^static void loadJniLibrary(const char* name) {$/;"	f	file:
loadMethodFromDex	oo/Class.cpp	/^static void loadMethodFromDex(ClassObject* clazz, const DexMethod* pDexMethod,$/;"	f	file:
loadMultiple	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *loadMultiple(CompilationUnit *cUnit, int rBase, int rMask)$/;"	f	file:
loadMultiple	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *loadMultiple(CompilationUnit *cUnit, int rBase, int rMask)$/;"	f	file:
loadPair	compiler/codegen/arm/Thumb/Factory.cpp	/^static void loadPair(CompilationUnit *cUnit, int base, int lowReg, int highReg)$/;"	f	file:
loadPair	compiler/codegen/arm/Thumb2/Factory.cpp	/^static void loadPair(CompilationUnit *cUnit, int base, int lowReg, int highReg)$/;"	f	file:
loadSFieldFromDex	oo/Class.cpp	/^static void loadSFieldFromDex(ClassObject* clazz,$/;"	f	file:
loadValue	compiler/codegen/CodegenFactory.cpp	/^static RegLocation loadValue(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadValueAddressDirect	compiler/codegen/arm/FP/ThumbVFP.cpp	/^static void loadValueAddressDirect(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadValueDirect	compiler/codegen/CodegenFactory.cpp	/^static void loadValueDirect(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadValueDirectFixed	compiler/codegen/CodegenFactory.cpp	/^static void loadValueDirectFixed(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadValueDirectWide	compiler/codegen/CodegenFactory.cpp	/^static void loadValueDirectWide(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadValueDirectWideFixed	compiler/codegen/CodegenFactory.cpp	/^static void loadValueDirectWideFixed(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadValueWide	compiler/codegen/CodegenFactory.cpp	/^static RegLocation loadValueWide(CompilationUnit *cUnit, RegLocation rlSrc,$/;"	f	file:
loadWordDisp	compiler/codegen/CodegenFactory.cpp	/^static TGT_LIR *loadWordDisp(CompilationUnit *cUnit, int rBase,$/;"	f	file:
loadedClasses	Globals.h	/^    HashTable*  loadedClasses;$/;"	m	struct:DvmGlobals
loader	oo/Class.cpp	/^    Object*     loader;$/;"	m	struct:ClassMatchCriteria	file:
loc	jdwp/JdwpEvent.h	/^        JdwpLocation loc;$/;"	m	struct:JdwpEventMod::__anon30
localRefCookie	interp/Stack.h	/^        u4          localRefCookie;$/;"	m	union:StackSaveArea::__anon22
local_mtx	shadowlib/ShadowLib.h	/^		pthread_mutex_t *local_mtx;$/;"	m	class:ScopedMutex
location	compiler/CompilerIR.h	/^    RegLocationType location:2;$/;"	m	struct:RegLocation
locationMatch	jdwp/JdwpEvent.cpp	/^static inline bool locationMatch(const JdwpLocation* pLoc1,$/;"	f	file:
locationOnly	jdwp/JdwpEvent.h	/^    } locationOnly;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon30
lock	Debugger.h	/^    pthread_mutex_t lock;$/;"	m	struct:DebugInvokeReq
lock	Hash.h	/^    pthread_mutex_t lock;$/;"	m	struct:HashTable
lock	LinearAlloc.h	/^    pthread_mutex_t lock;       \/* controls updates to this struct *\/$/;"	m	struct:LinearAllocHdr
lock	Sync.cpp	/^    pthread_mutex_t lock;$/;"	m	struct:Monitor	file:
lock	interp/Interp.cpp	/^    pthread_mutex_t lock;$/;"	m	struct:BreakpointSet	file:
lock	oo/Object.h	/^    u4              lock;$/;"	m	struct:Object
lockCount	Sync.cpp	/^    int         lockCount;      \/* owner's recursive lock depth *\/$/;"	m	struct:Monitor	file:
lockEventMutex	jdwp/JdwpEvent.cpp	/^static void lockEventMutex(JdwpState* state)$/;"	f	file:
lockMonitor	Sync.cpp	/^static void lockMonitor(Thread* self, Monitor* mon)$/;"	f	file:
lockOwner	Sync.cpp	/^static u4 lockOwner(Object* obj)$/;"	f	file:
lockProfThreshold	Globals.h	/^    u4          lockProfThreshold;$/;"	m	struct:DvmGlobals
lockThreadSuspend	Thread.cpp	/^static void lockThreadSuspend(const char* who, SuspendCause why)$/;"	f	file:
lockThreadSuspendCount	Thread.cpp	/^static inline void lockThreadSuspendCount()$/;"	f	file:
lock_buf	shadowlib/ReProtocol.h	/^		LockBuffer lock_buf;$/;"	m	class:ReProtocol
lock_id_type	shadowlib/ShadowLib.h	/^typedef ordering_id_type lock_id_type;$/;"	t
log	Misc.h	/^        } log;$/;"	m	union:DebugOutputTarget::__anon16	typeref:struct:DebugOutputTarget::__anon16::__anon17
logClassLoad	oo/Class.cpp	/^static void logClassLoad(char type, ClassObject* clazz) {$/;"	f	file:
logClassLoadWithTime	oo/Class.cpp	/^static void logClassLoadWithTime(char type, ClassObject* clazz, u8 time) {$/;"	f	file:
logContentionEvent	Sync.cpp	/^static void logContentionEvent(Thread *self, u4 waitMs, u4 samplePercent,$/;"	f	file:
logLocalsCb	analysis/CodeVerify.cpp	/^static void logLocalsCb(void *cnxt, u2 reg, u4 startAddress, u4 endAddress,$/;"	f	file:
logNativeMethodEntry	Jni.cpp	/^static void logNativeMethodEntry(const Method* method, const u4* args)$/;"	f	file:
logNativeMethodExit	Jni.cpp	/^static void logNativeMethodExit(const Method* method, Thread* self, const JValue returnValue)$/;"	f	file:
logStackTraceOf	Exception.cpp	/^static void logStackTraceOf(Object* exception) {$/;"	f	file:
logStdio	Globals.h	/^    bool        logStdio;$/;"	m	struct:DvmGlobals
logSummaryLine	ReferenceTable.cpp	/^static void logSummaryLine(const Object* obj, size_t elems, int identical, int equiv)$/;"	f	file:
logThirdPartyJni	Globals.h	/^    bool logThirdPartyJni;$/;"	m	struct:DvmJniGlobals
logThreadStacks	SignalCatcher.cpp	/^static void logThreadStacks(FILE* fp)$/;"	f	file:
logWriteInt	Sync.cpp	/^static char *logWriteInt(char *dst, int value)$/;"	f	file:
logWriteString	Sync.cpp	/^static char *logWriteString(char *dst, const char *value, size_t len)$/;"	f	file:
lookupAndAdd	interp/Jit.cpp	/^static JitEntry *lookupAndAdd(const u2* dPC, bool callerLocked,$/;"	f	file:
lookupClassByDescriptor	analysis/CodeVerify.cpp	/^static ClassObject* lookupClassByDescriptor(const Method* meth,$/;"	f	file:
lookupId	Debugger.cpp	/^static bool lookupId(ObjectId id)$/;"	f	file:
lookupInternedString	Intern.cpp	/^static StringObject* lookupInternedString(StringObject* strObj, bool isLiteral)$/;"	f	file:
lookupSharedLibMethod	Native.cpp	/^static void* lookupSharedLibMethod(const Method* method)$/;"	f	file:
lookupSignatureArrayClass	analysis/CodeVerify.cpp	/^static ClassObject* lookupSignatureArrayClass(const Method* meth,$/;"	f	file:
lookupSignatureClass	analysis/CodeVerify.cpp	/^static ClassObject* lookupSignatureClass(const Method* meth, const char** pSig,$/;"	f	file:
lookupString	Intern.cpp	/^static StringObject* lookupString(HashTable* table, u4 key, StringObject* value)$/;"	f	file:
loopAnalysis	compiler/CompilerIR.h	/^    struct LoopAnalysis *loopAnalysis;$/;"	m	struct:CompilationUnit	typeref:struct:CompilationUnit::LoopAnalysis
loopBranchOpcode	compiler/Loop.h	/^    Opcode loopBranchOpcode;            \/\/ OP_IF_XXX for the loop back branch$/;"	m	struct:LoopAnalysis
loopback_single	compiler/template/armv5te/TEMPLATE_STRING_COMPARETO.S	/^loopback_single:$/;"	l
loopback_single	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^loopback_single:$/;"	l
loopback_single	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^loopback_single:$/;"	l
loopback_single	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^loopback_single:$/;"	l
loopback_single	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^loopback_single:$/;"	l
loopback_triple	compiler/template/armv5te/TEMPLATE_STRING_COMPARETO.S	/^loopback_triple:$/;"	l
loopback_triple	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^loopback_triple:$/;"	l
loopback_triple	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^loopback_triple:$/;"	l
loopback_triple	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^loopback_triple:$/;"	l
loopback_triple	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^loopback_triple:$/;"	l
lowReg	compiler/CompilerIR.h	/^    u1 lowReg:6;        \/\/ First physical register$/;"	m	struct:RegLocation
lowestSetBit	compiler/codegen/arm/CodegenDriver.cpp	/^static int lowestSetBit(unsigned int x) {$/;"	f	file:
m	compiler/Dataflow.h	/^    int m;      \/\/ multiplier$/;"	m	struct:InductionVariableInfo
mEnv	CheckJni.cpp	/^    JNIEnv* mEnv;$/;"	m	class:ScopedCheck	file:
mFlags	CheckJni.cpp	/^    int mFlags;$/;"	m	class:ScopedCheck	file:
mFunctionName	CheckJni.cpp	/^    const char* mFunctionName;$/;"	m	class:ScopedCheck	file:
mHasMethod	CheckJni.cpp	/^    bool mHasMethod;$/;"	m	class:ScopedCheck	file:
mIndent	CheckJni.cpp	/^    size_t mIndent;$/;"	m	class:ScopedCheck	file:
mSelf	Jni.cpp	/^    Thread* mSelf;$/;"	m	class:ScopedJniThreadState	file:
m_addr	shadowlib/Socket.h	/^  sockaddr_in m_addr;$/;"	m	class:Socket
m_sock	shadowlib/Socket.h	/^  int m_sock;$/;"	m	class:Socket
magic	CheckJni.cpp	/^    u4          magic;$/;"	m	struct:GuardedCopy	file:
main	alloc/TEST/HeapBitmapTest/main.c	/^int main(int argc, char *argv[])$/;"	f
mainHandlerTable	Thread.h	/^    void*       mainHandlerTable;   \/\/ Table of actual instruction handler$/;"	m	struct:Thread
mainThreadStackSize	Globals.h	/^    size_t      mainThreadStackSize;$/;"	m	struct:DvmGlobals
makeStringObject	UtfString.cpp	/^static StringObject* makeStringObject(u4 charsLength, ArrayObject** pChars)$/;"	f	file:
mangleString	Native.cpp	/^static char* mangleString(const char* str, int len)$/;"	f	file:
manuallyClose	shadowlib/ReAgent.cpp	/^void manuallyClose$/;"	f
manuallyOpen	shadowlib/ReAgent.cpp	/^void manuallyOpen$/;"	f
map	analysis/CodeVerify.h	/^    } map[1];$/;"	m	struct:UninitInstanceMap	typeref:struct:UninitInstanceMap::__anon14
mapAddr	LinearAlloc.h	/^    char*   mapAddr;            \/* start of mmap()ed region *\/$/;"	m	struct:LinearAllocHdr
mapLength	LinearAlloc.h	/^    int     mapLength;          \/* length of region *\/$/;"	m	struct:LinearAllocHdr
markBits	alloc/CardTable.cpp	/^    HeapBitmap *markBits;$/;"	m	struct:WhiteReferenceCounter	file:
markBits	alloc/HeapSource.cpp	/^    HeapBitmap markBits;$/;"	m	struct:HeapSource	file:
markCard	compiler/codegen/arm/CodegenDriver.cpp	/^static void markCard(CompilationUnit *cUnit, int valReg, int tgtAddrReg)$/;"	f	file:
markContext	alloc/HeapInternal.h	/^    GcMarkContext markContext;$/;"	m	struct:GcHeap
markDebugLocals	analysis/Liveness.cpp	/^static bool markDebugLocals(VerifierData* vdata)$/;"	f	file:
markLocalsCb	analysis/Liveness.cpp	/^static void markLocalsCb(void* ctxt, u2 reg, u4 startAddress, u4 endAddress,$/;"	f	file:
markObject	alloc/MarkSweep.cpp	/^static void markObject(const Object *obj, GcMarkContext *ctx)$/;"	f	file:
markObjectNonNull	alloc/MarkSweep.cpp	/^static void markObjectNonNull(const Object *obj, GcMarkContext *ctx,$/;"	f	file:
markRefsAsInitialized	analysis/CodeVerify.cpp	/^static void markRefsAsInitialized(RegisterLine* registerLine, int insnRegCount,$/;"	f	file:
markStackPop	alloc/MarkSweep.cpp	/^static const Object *markStackPop(GcMarkStack *stack)$/;"	f	file:
markStackPush	alloc/MarkSweep.cpp	/^static void markStackPush(GcMarkStack *stack, const Object *obj)$/;"	f	file:
markTouchedMethods	Profile.cpp	/^static void markTouchedMethods(int endOffset)$/;"	f	file:
markUninitRefsAsInvalid	analysis/CodeVerify.cpp	/^static void markUninitRefsAsInvalid(RegisterLine* registerLine,$/;"	f	file:
matchSignatureBreakpoint	compiler/codegen/arm/Assemble.cpp	/^static void matchSignatureBreakpoint(const CompilationUnit *cUnit,$/;"	f	file:
match_0	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^match_0:$/;"	l
match_0	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^match_0:$/;"	l
match_0	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^match_0:$/;"	l
match_0	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^match_0:$/;"	l
match_0	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^match_0:$/;"	l
match_1	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^match_1:$/;"	l
match_1	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^match_1:$/;"	l
match_1	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^match_1:$/;"	l
match_1	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^match_1:$/;"	l
match_1	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^match_1:$/;"	l
match_2	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^match_2:$/;"	l
match_2	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^match_2:$/;"	l
match_2	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^match_2:$/;"	l
match_2	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^match_2:$/;"	l
match_2	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^match_2:$/;"	l
match_3	compiler/template/armv5te/TEMPLATE_STRING_INDEXOF.S	/^match_3:$/;"	l
match_3	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^match_3:$/;"	l
match_3	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^match_3:$/;"	l
match_3	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^match_3:$/;"	l
match_3	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^match_3:$/;"	l
max	alloc/HeapBitmap.h	/^    uintptr_t max;$/;"	m	struct:HeapBitmap
maxC	compiler/Dataflow.h	/^    int maxC;                   \/\/ For DIV - will affect upper bound checking$/;"	m	struct:ArrayAccessInfo
maxCompilerThreadBlockGCTime	Globals.h	/^    u8                 maxCompilerThreadBlockGCTime;$/;"	m	struct:DvmJitGlobals
maxEntries	ReferenceTable.h	/^    int             maxEntries;         \/* max #of entries allowed *\/$/;"	m	struct:ReferenceTable
maxLen	jdwp/ExpandBuf.cpp	/^    int     maxLen;$/;"	m	struct:ExpandBuf	file:
max_entries_	IndirectRefTable.h	/^    size_t          max_entries_;$/;"	m	struct:IndirectRefTable
maximumSize	alloc/Copying.cpp	/^    size_t maximumSize;$/;"	m	struct:HeapSource	file:
maximumSize	alloc/HeapSource.cpp	/^    size_t maximumSize;$/;"	m	struct:Heap	file:
maximumSize	alloc/HeapSource.cpp	/^    size_t maximumSize;$/;"	m	struct:HeapSource	file:
measureClockOverhead	Profile.cpp	/^static inline void measureClockOverhead()$/;"	f	file:
memFp	hprof/Hprof.h	/^    FILE *memFp;$/;"	m	struct:hprof_context_t
memMap	DvmDex.h	/^    MemMapping          memMap;$/;"	m	struct:DvmDex
memMap	analysis/RegisterMap.h	/^    MemMapping  memMap;$/;"	m	struct:RegisterMapBuilder
merge	alloc/DdmHeap.cpp	/^    bool merge;$/;"	m	struct:HeapChunkContext	file:
mergeMonitorEntries	analysis/CodeVerify.cpp	/^static MonitorEntries mergeMonitorEntries(MonitorEntries ents1,$/;"	f	file:
mergeRegChanged	analysis/DexVerify.h	/^    size_t mergeRegChanged;    \/* calls from updateRegisters->merge, changed *\/$/;"	m	struct:VerifierStats
mergeRegCount	analysis/DexVerify.h	/^    size_t mergeRegCount;      \/* calls from updateRegisters->merge *\/$/;"	m	struct:VerifierStats
mergeTypes	analysis/CodeVerify.cpp	/^static RegType mergeTypes(RegType type1, RegType type2, bool* pChanged)$/;"	f	file:
meta	compiler/CompilerIR.h	/^    } meta;$/;"	m	struct:MIR	typeref:union:MIR::__anon44
meta	interp/InterpState.h	/^        void*       meta;$/;"	m	union:JitTraceRun::__anon23
methDalvikDdmcServer_broadcast	Globals.h	/^    Method*     methDalvikDdmcServer_broadcast;$/;"	m	struct:DvmGlobals
methDalvikDdmcServer_dispatch	Globals.h	/^    Method*     methDalvikDdmcServer_dispatch;$/;"	m	struct:DvmGlobals
methDalvikSystemNativeStart_main	Globals.h	/^    Method*     methDalvikSystemNativeStart_main;$/;"	m	struct:DvmGlobals
methDalvikSystemNativeStart_run	Globals.h	/^    Method*     methDalvikSystemNativeStart_run;$/;"	m	struct:DvmGlobals
methJavaLangClassLoader_getSystemClassLoader	Globals.h	/^    Method*     methJavaLangClassLoader_getSystemClassLoader;$/;"	m	struct:DvmGlobals
methJavaLangRefFinalizerReferenceAdd	Globals.h	/^    Method* methJavaLangRefFinalizerReferenceAdd;$/;"	m	struct:DvmGlobals
methJavaLangRefReferenceQueueAdd	Globals.h	/^    Method* methJavaLangRefReferenceQueueAdd;$/;"	m	struct:DvmGlobals
methJavaLangReflectConstructor_init	Globals.h	/^    Method*     methJavaLangReflectConstructor_init;$/;"	m	struct:DvmGlobals
methJavaLangReflectField_init	Globals.h	/^    Method*     methJavaLangReflectField_init;$/;"	m	struct:DvmGlobals
methJavaLangReflectMethod_init	Globals.h	/^    Method*     methJavaLangReflectMethod_init;$/;"	m	struct:DvmGlobals
methJavaLangReflectProxy_constructorPrototype	Globals.h	/^    Method*     methJavaLangReflectProxy_constructorPrototype;$/;"	m	struct:DvmGlobals
methJavaLangStackTraceElement_init	Globals.h	/^    Method*     methJavaLangStackTraceElement_init;$/;"	m	struct:DvmGlobals
methJavaNioReadWriteDirectByteBuffer_init	Globals.h	/^    Method*     methJavaNioReadWriteDirectByteBuffer_init;$/;"	m	struct:DvmGlobals
methOrgApacheHarmonyLangAnnotationAnnotationFactory_createAnnotation	Globals.h	/^        methOrgApacheHarmonyLangAnnotationAnnotationFactory_createAnnotation;$/;"	m	struct:DvmGlobals
methOrgApacheHarmonyLangAnnotationAnnotationMember_init	Globals.h	/^    Method*     methOrgApacheHarmonyLangAnnotationAnnotationMember_init;$/;"	m	struct:DvmGlobals
method	AllocTracker.cpp	/^        const Method* method;   \/* which method we're executing in *\/$/;"	m	struct:AllocRecord::__anon9	file:
method	Debugger.h	/^    Method* method;$/;"	m	struct:DebugInvokeReq
method	Debugger.h	/^    const Method* method;$/;"	m	struct:StepControl
method	analysis/CodeVerify.h	/^    const Method*   method;$/;"	m	struct:VerifierData
method	analysis/Optimize.cpp	/^    Method* method;$/;"	m	struct:InlineSub	file:
method	compiler/Compiler.h	/^    const Method *method;       \/* to lookup native PC from dalvik PC *\/$/;"	m	struct:PredictedChainingCell
method	compiler/Compiler.h	/^    const Method *method;       \/\/ Used as hash entry signature$/;"	m	struct:CompilerMethodStats
method	compiler/Compiler.h	/^    const Method* method;$/;"	m	struct:__anon37
method	compiler/CompilerIR.h	/^    const Method *method;$/;"	m	struct:CallsiteInfo
method	compiler/CompilerIR.h	/^    const Method *method;$/;"	m	struct:CompilationUnit
method	interp/Interp.cpp	/^    Method*     method;                 \/* method we're associated with *\/$/;"	m	struct:Breakpoint	file:
method	interp/InterpState.h	/^    const Method    *method;    \/\/ Method being executed$/;"	m	struct:InterpSaveState
method	interp/Jit.h	/^    const Method *method;$/;"	m	struct:ShadowSpace
method	interp/Stack.h	/^    const Method* method;$/;"	m	struct:StackSaveArea
methodBlockCodeGen	compiler/codegen/arm/armv7-a-neon/MethodCodegenDriver.cpp	/^static bool methodBlockCodeGen(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
methodClassDex	interp/InterpState.h	/^    DvmDex*         methodClassDex;$/;"	m	struct:InterpSaveState
methodClassDex	interp/Jit.h	/^    DvmDex* methodClassDex;$/;"	m	struct:ShadowSpace
methodClassDex	mterp/cstubs/enddefs.cpp	7;"	d	file:
methodClassDex	mterp/cstubs/stubdefs.cpp	29;"	d	file:
methodClassDex	mterp/out/InterpC-allstubs.cpp	399;"	d	file:
methodClassDex	mterp/out/InterpC-allstubs.cpp	4055;"	d	file:
methodClassDex	mterp/out/InterpC-armv5te-vfp.cpp	1162;"	d	file:
methodClassDex	mterp/out/InterpC-armv5te-vfp.cpp	399;"	d	file:
methodClassDex	mterp/out/InterpC-armv5te.cpp	1162;"	d	file:
methodClassDex	mterp/out/InterpC-armv5te.cpp	399;"	d	file:
methodClassDex	mterp/out/InterpC-armv7-a-neon.cpp	1162;"	d	file:
methodClassDex	mterp/out/InterpC-armv7-a-neon.cpp	399;"	d	file:
methodClassDex	mterp/out/InterpC-armv7-a.cpp	1162;"	d	file:
methodClassDex	mterp/out/InterpC-armv7-a.cpp	399;"	d	file:
methodClassDex	mterp/out/InterpC-x86-atom.cpp	2294;"	d	file:
methodClassDex	mterp/out/InterpC-x86-atom.cpp	399;"	d	file:
methodClassDex	mterp/out/InterpC-x86.cpp	2236;"	d	file:
methodClassDex	mterp/out/InterpC-x86.cpp	399;"	d	file:
methodCompilationAborted	compiler/Compiler.h	/^    bool methodCompilationAborted;  \/\/ Cannot compile the whole method$/;"	m	struct:JitTranslationInfo
methodCount	analysis/RegisterMap.h	/^    u2      methodCount;            \/* chiefly used as a sanity check *\/$/;"	m	struct:RegisterMapMethodPool
methodData	analysis/RegisterMap.h	/^    u4      methodData[1];$/;"	m	struct:RegisterMapMethodPool
methodId	jdwp/Jdwp.h	/^    MethodId    methodId;       \/* method in which "idx" resides *\/$/;"	m	struct:JdwpLocation
methodIdToMethod	Debugger.cpp	/^static Method* methodIdToMethod(RefTypeId refTypeId, MethodId id)$/;"	f	file:
methodIndex	oo/Object.h	/^    u2             methodIndex;$/;"	m	struct:Method
methodIndexArray	oo/Object.h	/^    int*            methodIndexArray;$/;"	m	struct:InterfaceEntry
methodInfo	Native.h	/^    const DalvikNativeMethod* methodInfo;$/;"	m	struct:DalvikNativeClass
methodName	InlineNative.h	/^    const char*     methodName;$/;"	m	struct:InlineOperation
methodNameFromIndex	interp/Interp.cpp	/^static std::string methodNameFromIndex(const Method* method, int ref,$/;"	f	file:
methodSignature	InlineNative.h	/^    const char*     methodSignature;$/;"	m	struct:InlineOperation
methodStatsTable	Globals.h	/^    HashTable*  methodStatsTable;$/;"	m	struct:DvmJitGlobals
methodTable	Globals.h	/^    HashTable *methodTable;$/;"	m	struct:DvmJitGlobals
methodToCall	Thread.h	/^    const Method*     methodToCall;$/;"	m	struct:Thread
methodToMethodId	Debugger.cpp	/^static MethodId methodToMethodId(const Method* meth)$/;"	f	file:
methodToSlot	reflect/Reflect.cpp	/^static int methodToSlot(const Method* meth)$/;"	f	file:
methodTrace	Globals.h	/^    MethodTraceState methodTrace;$/;"	m	struct:DvmGlobals
methodTraceClassPrepMethod	Globals.h	/^    Method*     methodTraceClassPrepMethod;$/;"	m	struct:DvmGlobals
methodTraceGcMethod	Globals.h	/^    Method*     methodTraceGcMethod;$/;"	m	struct:DvmGlobals
methodTraceSupport	Globals.h	/^    bool               methodTraceSupport;$/;"	m	struct:DvmJitGlobals
method_id	shadowlib/ReAgent.cpp	/^static volatile jshort method_id = 1;$/;"	v	file:
methods	shadowlib/ReAgent.cpp	/^static JNINativeMethod methods[]= {$/;"	v	file:
methodsExamined	analysis/DexVerify.h	/^    size_t methodsExamined;    \/* number of methods examined *\/$/;"	m	struct:VerifierStats
minC	compiler/Dataflow.h	/^    int minC;                   \/\/ For DIV - will affect lower bound checking$/;"	m	struct:ArrayAccessInfo
minimumSize	alloc/Copying.cpp	/^    size_t minimumSize;$/;"	m	struct:HeapSource	file:
misPredBranchOver	compiler/CompilerIR.h	/^    LIR *misPredBranchOver;$/;"	m	struct:CallsiteInfo
misses	AtomicCache.h	/^    int         misses;                 \/* entry was for other keys *\/$/;"	m	struct:AtomicCache
modCount	jdwp/JdwpEvent.h	/^    int modCount;       \/* #of entries in mods[] *\/$/;"	m	struct:JdwpEvent
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon24
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon25
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon26
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon27
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon28
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon29
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon30
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon31
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon32
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon33
modKind	jdwp/JdwpEvent.h	/^        u1          modKind;$/;"	m	struct:JdwpEventMod::__anon34
modKind	jdwp/JdwpEvent.h	/^    u1      modKind;                \/* JdwpModKind *\/$/;"	m	union:JdwpEventMod
modLock	DvmDex.h	/^    pthread_mutex_t     modLock;$/;"	m	struct:DvmDex
modifiedImmediate	compiler/codegen/arm/Thumb2/Factory.cpp	/^static int modifiedImmediate(u4 value)$/;"	f	file:
mods	jdwp/JdwpEvent.h	/^    JdwpEventMod mods[1];        \/* MUST be last field in struct *\/$/;"	m	struct:JdwpEvent
modsMatch	jdwp/JdwpEvent.cpp	/^static bool modsMatch(JdwpState* state, JdwpEvent* pEvent, ModBasket* basket)$/;"	f	file:
monEnterMethods	analysis/DexVerify.h	/^    size_t monEnterMethods;    \/* number of methods with monitor-enter *\/$/;"	m	struct:VerifierStats
monitorEnterCount	analysis/CodeVerify.h	/^    size_t          monitorEnterCount;$/;"	m	struct:VerifierData
monitorEntries	analysis/CodeVerify.h	/^    MonitorEntries* monitorEntries;$/;"	m	struct:RegisterLine
monitorList	Globals.h	/^    \/*volatile*\/ Monitor* monitorList;$/;"	m	struct:DvmGlobals
monitorStack	analysis/CodeVerify.h	/^    u4*             monitorStack;$/;"	m	struct:RegisterLine
monitorStackTop	analysis/CodeVerify.h	/^    unsigned int    monitorStackTop;$/;"	m	struct:RegisterLine
monitorVerification	Globals.h	/^    bool        monitorVerification;$/;"	m	struct:DvmGlobals
move16	native/java_lang_System.cpp	/^static void move16(void* dest, const void* src, size_t n)$/;"	f	file:
move16	native/java_lang_System.cpp	55;"	d	file:
move32	native/java_lang_System.cpp	/^static void move32(void* dest, const void* src, size_t n)$/;"	f	file:
move32	native/java_lang_System.cpp	56;"	d	file:
msp	alloc/HeapSource.cpp	/^    mspace msp;$/;"	m	struct:Heap	file:
mustWrapException	reflect/Proxy.cpp	/^static bool mustWrapException(const Method* method, const Object* throwable)$/;"	f	file:
name	Native.h	/^    const char* name;$/;"	m	struct:DalvikNativeMethod
name	Thread.h	/^    char*       name;$/;"	m	struct:InternalStartArgs
name	compiler/codegen/arm/ArmLIR.h	/^    const char* name;$/;"	m	struct:ArmEncodingMap
name	oo/Object.h	/^    const char*     name;$/;"	m	struct:Field
name	oo/Object.h	/^    const char*     name;$/;"	m	struct:Method
nativeDebuggerActive	Globals.h	/^    bool        nativeDebuggerActive;$/;"	m	struct:DvmGlobals
nativeFunc	oo/Object.h	/^    DalvikBridgeFunc nativeFunc;$/;"	m	struct:Method
nativeLibs	Globals.h	/^    HashTable*  nativeLibs;$/;"	m	struct:DvmGlobals
nativeSize	compiler/Compiler.h	/^    int nativeSize;             \/\/ # of bytes for produced native code$/;"	m	struct:CompilerMethodStats
needFallThroughBranch	compiler/CompilerIR.h	/^    bool needFallThroughBranch;         \/\/ For blocks ended due to length limit$/;"	m	struct:BasicBlock
needHeader	alloc/DdmHeap.cpp	/^    bool needHeader;$/;"	m	struct:HeapChunkContext	file:
needPID	shadowlib/Socket.h	/^  bool needPID;$/;"	m	class:Socket
needsReturnBarrier	analysis/Optimize.cpp	/^static bool needsReturnBarrier(Method* method)$/;"	f	file:
negateOpcode	compiler/Loop.cpp	/^static Opcode negateOpcode(Opcode opcode)$/;"	f	file:
netFree	jdwp/JdwpAdb.cpp	/^static void netFree(struct JdwpState* state)$/;"	f	file:
netFree	jdwp/JdwpSocket.cpp	/^static void netFree(JdwpNetState* netState)$/;"	f	file:
netFreeExtern	jdwp/JdwpSocket.cpp	/^static void netFreeExtern(JdwpState* state)$/;"	f	file:
netShutdown	jdwp/JdwpAdb.cpp	/^static void netShutdown(JdwpState* state)$/;"	f	file:
netShutdown	jdwp/JdwpSocket.cpp	/^static void netShutdown(JdwpNetState* netState)$/;"	f	file:
netShutdownExtern	jdwp/JdwpSocket.cpp	/^static void netShutdownExtern(JdwpState* state)$/;"	f	file:
netStartup	jdwp/JdwpSocket.cpp	/^static JdwpNetState* netStartup(short port)$/;"	f	file:
netState	jdwp/JdwpPriv.h	/^    JdwpNetState*   netState;$/;"	m	struct:JdwpState
net_ref_get_class_id	shadowlib/Netref.h	/^inline jint net_ref_get_class_id(jlong net_ref) {$/;"	f
net_ref_get_class_instance_bit	shadowlib/Netref.h	/^inline unsigned char net_ref_get_class_instance_bit(jlong net_ref) {$/;"	f
net_ref_get_object_id	shadowlib/Netref.h	/^inline jlong net_ref_get_object_id(jlong net_ref) {$/;"	f
net_ref_get_spec	shadowlib/Netref.h	/^inline unsigned char net_ref_get_spec(jlong net_ref) {$/;"	f
net_ref_set_class_id	shadowlib/Netref.h	/^inline void net_ref_set_class_id(jlong * net_ref, jint class_id) {$/;"	f
net_ref_set_class_instance	shadowlib/Netref.h	/^inline void net_ref_set_class_instance(jlong * net_ref, unsigned char cibit) {$/;"	f
net_ref_set_object_id	shadowlib/Netref.h	/^inline void net_ref_set_object_id(jlong * net_ref, jlong object_id) {$/;"	f
net_ref_set_spec	shadowlib/Netref.h	/^inline void net_ref_set_spec(jlong * net_ref, unsigned char spec) {$/;"	f
newClass	shadowlib/ReAgent.cpp	/^jlong newClass(ClassObject *obj){$/;"	f
newInstanceCount	analysis/CodeVerify.h	/^    size_t          newInstanceCount;$/;"	m	struct:VerifierData
newLIR0	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *newLIR0(CompilationUnit *cUnit, ArmOpcode opcode)$/;"	f	file:
newLIR1	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *newLIR1(CompilationUnit *cUnit, ArmOpcode opcode,$/;"	f	file:
newLIR2	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *newLIR2(CompilationUnit *cUnit, ArmOpcode opcode,$/;"	f	file:
newLIR3	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *newLIR3(CompilationUnit *cUnit, ArmOpcode opcode,$/;"	f	file:
newLIR4	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *newLIR4(CompilationUnit *cUnit, ArmOpcode opcode,$/;"	f	file:
newZygoteHeapAllocated	Globals.h	/^    bool        newZygoteHeapAllocated;$/;"	m	struct:DvmGlobals
new_event_cond	shadowlib/ReProtocol.h	/^		pthread_cond_t new_event_cond;$/;"	m	class:ReProtocol
next	JniInternal.h	/^    struct JNIEnvExt* next;$/;"	m	struct:JNIEnvExt	typeref:struct:JNIEnvExt::JNIEnvExt
next	Sync.cpp	/^    Monitor*    next;$/;"	m	struct:Monitor	file:
next	Thread.h	/^    struct Thread* next;$/;"	m	struct:Thread	typeref:struct:Thread::Thread
next	compiler/CompilerIR.h	/^    struct LIR *next;$/;"	m	struct:LIR	typeref:struct:LIR::LIR
next	compiler/CompilerIR.h	/^    struct MIR *next;$/;"	m	struct:MIR	typeref:struct:MIR::MIR
next	compiler/CompilerUtility.h	/^    struct ArenaMemBlock *next;$/;"	m	struct:ArenaMemBlock	typeref:struct:ArenaMemBlock::ArenaMemBlock
next	interp/Jit.h	/^    unsigned int           next;$/;"	m	struct:JitTraceProfCounters
next	jdwp/JdwpEvent.h	/^    JdwpEvent* next;$/;"	m	struct:JdwpEvent
nextCodegenBlock	compiler/CompilerIR.h	/^    BasicBlock *nextCodegenBlock;       \/\/ for extended trace codegen$/;"	m	struct:CompilationUnit
nextCoreTemp	compiler/codegen/arm/ArmLIR.h	/^    int nextCoreTemp;$/;"	m	struct:RegisterPool
nextCoreTemp	compiler/codegen/x86/X86LIR.h	/^    int nextCoreTemp;$/;"	m	struct:RegisterPool
nextEntry	ReferenceTable.h	/^    Object**        nextEntry;          \/* top of the list *\/$/;"	m	struct:ReferenceTable
nextFPTemp	compiler/codegen/arm/ArmLIR.h	/^    int nextFPTemp;$/;"	m	struct:RegisterPool
nextFPTemp	compiler/codegen/x86/X86LIR.h	/^    int nextFPTemp;$/;"	m	struct:RegisterPool
nextGrayObject	alloc/MarkSweep.cpp	/^static Object *nextGrayObject(const u1 *base, const u1 *limit,$/;"	f	file:
nextSerial	IndirectRefTable.h	/^    static inline u4 nextSerial(u4 serial) {$/;"	f	struct:IndirectRefTable
noChainExit	Globals.h	/^    int                noChainExit[kNoChainExitLast];$/;"	m	struct:DvmJitGlobals
noClassDefFoundErrorObj	Globals.h	/^    Object*     noClassDefFoundErrorObj;$/;"	m	struct:DvmGlobals
noQuitHandler	Globals.h	/^    bool        noQuitHandler;$/;"	m	struct:DvmGlobals
noRef	oo/Object.h	/^    bool noRef;$/;"	m	struct:Method
nonDaemonThreadCount	Globals.h	/^    int         nonDaemonThreadCount;   \/* must hold threadListLock to access *\/$/;"	m	struct:DvmGlobals
normalExit	Globals.h	/^    int                normalExit;$/;"	m	struct:DvmJitGlobals
notifyAllMonitor	Sync.cpp	/^static void notifyAllMonitor(Thread* self, Monitor* mon)$/;"	f	file:
notifyMonitor	Sync.cpp	/^static void notifyMonitor(Thread* self, Monitor* mon)$/;"	f	file:
now	test/TestIndirectRefTable.cpp	/^    static u8 now() {$/;"	f	class:Stopwatch	file:
nullCheckedRegs	compiler/codegen/arm/ArmLIR.h	/^    BitVector *nullCheckedRegs; \/\/ Track which registers have been null-checked$/;"	m	struct:RegisterPool
nullCheckedRegs	compiler/codegen/x86/X86LIR.h	/^    BitVector *nullCheckedRegs; \/\/ Track which registers have been null-checked$/;"	m	struct:RegisterPool
nullifyRange	compiler/codegen/RallocUtil.cpp	/^static void nullifyRange(CompilationUnit *cUnit, LIR *start, LIR *finish,$/;"	f	file:
numAllocated	compiler/CompilerUtility.h	/^    size_t numAllocated;$/;"	m	struct:GrowableList
numArenaBlocks	compiler/Utility.cpp	/^static int numArenaBlocks;$/;"	v	file:
numArgs	Debugger.h	/^    u4 numArgs;$/;"	m	struct:DebugInvokeReq
numBasicIV	compiler/Loop.h	/^    int numBasicIV;                     \/\/ number of basic induction variables$/;"	m	struct:LoopAnalysis
numBlocks	compiler/CompilerIR.h	/^    int numBlocks;$/;"	m	struct:CompilationUnit
numBytes	alloc/MarkSweep.cpp	/^    size_t numBytes;$/;"	m	struct:SweepContext	file:
numChainingCells	compiler/CompilerIR.h	/^    int numChainingCells[kChainingCellGap];$/;"	m	struct:CompilationUnit
numClassPointers	compiler/CompilerIR.h	/^    int numClassPointers;$/;"	m	struct:CompilationUnit
numClasses	analysis/RegisterMap.h	/^    u4      numClasses;$/;"	m	struct:RegisterMapClassPool
numCodeCacheReset	Globals.h	/^    int numCodeCacheReset;$/;"	m	struct:DvmJitGlobals
numCodeCacheResetDelayed	Globals.h	/^    int numCodeCacheResetDelayed;$/;"	m	struct:DvmJitGlobals
numCompilations	Globals.h	/^    unsigned int numCompilations;$/;"	m	struct:DvmJitGlobals
numCompilerThreadBlockGC	Globals.h	/^    int                numCompilerThreadBlockGC;$/;"	m	struct:DvmJitGlobals
numCoreTemps	compiler/codegen/arm/ArmLIR.h	/^    int numCoreTemps;$/;"	m	struct:RegisterPool
numCoreTemps	compiler/codegen/x86/X86LIR.h	/^    int numCoreTemps;$/;"	m	struct:RegisterPool
numDalvikRegisters	compiler/CompilerIR.h	/^    int numDalvikRegisters;             \/\/ method->registersSize + inlined$/;"	m	struct:CompilationUnit
numDeadEntries	Hash.h	/^    int         numDeadEntries;     \/* current #of tombstone entries *\/$/;"	m	struct:HashTable
numDeclaredInstFields	Globals.h	/^    int         numDeclaredInstFields;$/;"	m	struct:DvmGlobals
numDeclaredMethods	Globals.h	/^    int         numDeclaredMethods;$/;"	m	struct:DvmGlobals
numDeclaredStaticFields	Globals.h	/^    int         numDeclaredStaticFields;$/;"	m	struct:DvmGlobals
numDefs	compiler/Dataflow.h	/^    int numDefs;$/;"	m	struct:SSARepresentation
numDiffBits	analysis/RegisterMap.cpp	/^    int numDiffBits[kMaxDiffBits];$/;"	m	struct:MapStats	file:
numEntries	AtomicCache.h	/^    int         numEntries;             \/* #of entries, must be power of 2 *\/$/;"	m	struct:AtomicCache
numEntries	Hash.h	/^    int         numEntries;         \/* current #of "live" entries *\/$/;"	m	struct:HashTable
numEntries	analysis/CodeVerify.h	/^    int numEntries;$/;"	m	struct:UninitInstanceMap
numEntries	analysis/RegisterMap.h	/^    u1      numEntries[2];  \/* number of entries *\/$/;"	m	struct:RegisterMap
numEvents	jdwp/JdwpPriv.h	/^    int             numEvents;      \/* #of elements in eventList *\/$/;"	m	struct:JdwpState
numExpandedMaps	analysis/RegisterMap.cpp	/^    int numExpandedMaps;$/;"	m	struct:MapStats	file:
numFPTemps	compiler/codegen/arm/ArmLIR.h	/^    int numFPTemps;$/;"	m	struct:RegisterPool
numFPTemps	compiler/codegen/x86/X86LIR.h	/^    int numFPTemps;$/;"	m	struct:RegisterPool
numHeaps	alloc/HeapSource.cpp	/^    size_t numHeaps;$/;"	m	struct:HeapSource	file:
numHoles	IndirectRefTable.h	/^        u4      numHoles:16;            \/* #of holes in entire table *\/$/;"	m	struct:IRTSegmentState::__anon19
numInsts	compiler/CompilerIR.h	/^    int numInsts;$/;"	m	struct:CompilationUnit
numInsts	interp/InterpState.h	/^    unsigned numInsts:8;     \/\/ Number of Byte codes in run$/;"	m	struct:JitCodeDesc
numItems	Debugger.cpp	/^    int numItems;$/;"	m	struct:DebugCallbackContext	file:
numLoadedClasses	Globals.h	/^    int         numLoadedClasses;$/;"	m	struct:DvmGlobals
numObjects	alloc/MarkSweep.cpp	/^    size_t numObjects;$/;"	m	struct:SweepContext	file:
numReachableBlocks	compiler/CompilerIR.h	/^    int numReachableBlocks;$/;"	m	struct:CompilationUnit
numSSARegs	compiler/CompilerIR.h	/^    int numSSARegs;$/;"	m	struct:CompilationUnit
numUsed	compiler/CompilerUtility.h	/^    size_t numUsed;$/;"	m	struct:GrowableList
numUses	compiler/Dataflow.h	/^    int numUses;$/;"	m	struct:SSARepresentation
obj	Debugger.h	/^    Object* obj;        \/* not used for ClassType.InvokeMethod *\/$/;"	m	struct:DebugInvokeReq
obj	IndirectRefTable.h	/^    Object* obj;        \/* object pointer itself, NULL if the slot is unused *\/$/;"	m	struct:IndirectRefSlot
obj	Sync.cpp	/^    Object*     obj;            \/* what object are we part of [debug only] *\/$/;"	m	struct:Monitor	file:
objFreeHook	shadowlib/ReAgent.cpp	/^void objFreeHook(Object* obj, Thread* self){$/;"	f
objNewHook	shadowlib/ReAgent.cpp	/^void objNewHook(Object* obj){$/;"	f
objectId	jdwp/JdwpEvent.h	/^        ObjectId    objectId;$/;"	m	struct:JdwpEventMod::__anon34
objectIdToObject	Debugger.cpp	/^static Object* objectIdToObject(ObjectId id)$/;"	f	file:
objectIsRegistered	Debugger.cpp	/^static bool objectIsRegistered(ObjectId id, RegistryType type)$/;"	f	file:
objectSize	alloc/Copying.cpp	/^static size_t objectSize(const Object *obj)$/;"	f	file:
objectSize	alloc/MarkSweep.cpp	/^static size_t objectSize(const Object *obj)$/;"	f	file:
objectSize	oo/Object.h	/^    size_t          objectSize;$/;"	m	struct:ClassObject
objectToObjectId	Debugger.cpp	/^static ObjectId objectToObjectId(const Object* obj)$/;"	f	file:
objectToObjectIdNoReg	Debugger.cpp	/^static ObjectId objectToObjectIdNoReg(const Object* obj)$/;"	f	file:
objectsAllocated	alloc/HeapSource.cpp	/^    size_t objectsAllocated;$/;"	m	struct:Heap	file:
objectsInSegment	hprof/Hprof.h	/^    size_t objectsInSegment;$/;"	m	struct:hprof_context_t
objfree_mtx	shadowlib/ReProtocol.h	/^		pthread_mutex_t objfree_mtx;$/;"	m	class:ReProtocol
offDalvikDdmcChunk_data	Globals.h	/^    int         offDalvikDdmcChunk_data;$/;"	m	struct:DvmGlobals
offDalvikDdmcChunk_length	Globals.h	/^    int         offDalvikDdmcChunk_length;$/;"	m	struct:DvmGlobals
offDalvikDdmcChunk_offset	Globals.h	/^    int         offDalvikDdmcChunk_offset;$/;"	m	struct:DvmGlobals
offDalvikDdmcChunk_type	Globals.h	/^    int         offDalvikDdmcChunk_type;$/;"	m	struct:DvmGlobals
offJavaIoFileDescriptor_descriptor	Globals.h	/^    int         offJavaIoFileDescriptor_descriptor;$/;"	m	struct:DvmGlobals
offJavaLangRefFinalizerReference_zombie	Globals.h	/^    int offJavaLangRefFinalizerReference_zombie;$/;"	m	struct:DvmGlobals
offJavaLangRefReference_pendingNext	Globals.h	/^    int         offJavaLangRefReference_pendingNext;$/;"	m	struct:DvmGlobals
offJavaLangRefReference_queue	Globals.h	/^    int         offJavaLangRefReference_queue;$/;"	m	struct:DvmGlobals
offJavaLangRefReference_queueNext	Globals.h	/^    int         offJavaLangRefReference_queueNext;$/;"	m	struct:DvmGlobals
offJavaLangRefReference_referent	Globals.h	/^    int         offJavaLangRefReference_referent;$/;"	m	struct:DvmGlobals
offJavaLangReflectConstructor_declClass	Globals.h	/^    int         offJavaLangReflectConstructor_declClass;$/;"	m	struct:DvmGlobals
offJavaLangReflectConstructor_slot	Globals.h	/^    int         offJavaLangReflectConstructor_slot;$/;"	m	struct:DvmGlobals
offJavaLangReflectField_declClass	Globals.h	/^    int         offJavaLangReflectField_declClass;$/;"	m	struct:DvmGlobals
offJavaLangReflectField_slot	Globals.h	/^    int         offJavaLangReflectField_slot;$/;"	m	struct:DvmGlobals
offJavaLangReflectMethod_declClass	Globals.h	/^    int         offJavaLangReflectMethod_declClass;$/;"	m	struct:DvmGlobals
offJavaLangReflectMethod_slot	Globals.h	/^    int         offJavaLangReflectMethod_slot;$/;"	m	struct:DvmGlobals
offJavaLangReflectProxy_h	Globals.h	/^    int         offJavaLangReflectProxy_h;$/;"	m	struct:DvmGlobals
offJavaLangString_count	Globals.h	/^    int         offJavaLangString_count;$/;"	m	struct:DvmGlobals
offJavaLangString_hashCode	Globals.h	/^    int         offJavaLangString_hashCode;$/;"	m	struct:DvmGlobals
offJavaLangString_offset	Globals.h	/^    int         offJavaLangString_offset;$/;"	m	struct:DvmGlobals
offJavaLangString_value	Globals.h	/^    int         offJavaLangString_value;$/;"	m	struct:DvmGlobals
offJavaLangThreadGroup_name	Globals.h	/^    int         offJavaLangThreadGroup_name;$/;"	m	struct:DvmGlobals
offJavaLangThreadGroup_parent	Globals.h	/^    int         offJavaLangThreadGroup_parent;$/;"	m	struct:DvmGlobals
offJavaLangThread_contextClassLoader	Globals.h	/^    int         offJavaLangThread_contextClassLoader;$/;"	m	struct:DvmGlobals
offJavaLangThread_daemon	Globals.h	/^    int         offJavaLangThread_daemon;$/;"	m	struct:DvmGlobals
offJavaLangThread_group	Globals.h	/^    int         offJavaLangThread_group;$/;"	m	struct:DvmGlobals
offJavaLangThread_name	Globals.h	/^    int         offJavaLangThread_name;$/;"	m	struct:DvmGlobals
offJavaLangThread_priority	Globals.h	/^    int         offJavaLangThread_priority;$/;"	m	struct:DvmGlobals
offJavaLangThread_uncaughtHandler	Globals.h	/^    int         offJavaLangThread_uncaughtHandler;$/;"	m	struct:DvmGlobals
offJavaLangThread_vmThread	Globals.h	/^    int         offJavaLangThread_vmThread;$/;"	m	struct:DvmGlobals
offJavaLangThrowable_cause	Globals.h	/^    int         offJavaLangThrowable_cause;$/;"	m	struct:DvmGlobals
offJavaLangThrowable_stackState	Globals.h	/^    int         offJavaLangThrowable_stackState;$/;"	m	struct:DvmGlobals
offJavaLangVMThread_thread	Globals.h	/^    int         offJavaLangVMThread_thread;$/;"	m	struct:DvmGlobals
offJavaLangVMThread_vmData	Globals.h	/^    int         offJavaLangVMThread_vmData;$/;"	m	struct:DvmGlobals
offJavaNioBuffer_capacity	Globals.h	/^    int         offJavaNioBuffer_capacity;$/;"	m	struct:DvmGlobals
offJavaNioBuffer_effectiveDirectAddress	Globals.h	/^    int         offJavaNioBuffer_effectiveDirectAddress;$/;"	m	struct:DvmGlobals
offset	compiler/CompilerIR.h	/^    int offset;$/;"	m	struct:LIR
offset	compiler/CompilerIR.h	/^    unsigned int offset;$/;"	m	struct:MIR
okayToFree	native/dalvik_system_DexFile.cpp	/^    bool        okayToFree;$/;"	m	struct:DexOrJar	file:
oldHeapOverhead	alloc/HeapSource.cpp	/^static size_t oldHeapOverhead(const HeapSource *hs, bool includeActive)$/;"	f	file:
onFork	shadowlib/ReAgent.cpp	/^void onFork$/;"	f
onLoadCond	Native.cpp	/^    pthread_cond_t  onLoadCond;     \/* wait for JNI_OnLoad in other thread *\/$/;"	m	struct:SharedLib	file:
onLoadLock	Native.cpp	/^    pthread_mutex_t onLoadLock;     \/* guards remaining items *\/$/;"	m	struct:SharedLib	file:
onLoadResult	Native.cpp	/^    OnLoadState     onLoadResult;   \/* result of earlier JNI_OnLoad *\/$/;"	m	struct:SharedLib	file:
onLoadThreadId	Native.cpp	/^    u4              onLoadThreadId; \/* recursive invocation guard *\/$/;"	m	struct:SharedLib	file:
one_arg_handled	arch/sh/CallSH4ABI.S	/^one_arg_handled:$/;"	l
opCondBranch	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opCondBranch(CompilationUnit *cUnit, ArmConditionCode cc)$/;"	f	file:
opCondBranch	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opCondBranch(CompilationUnit *cUnit, ArmConditionCode cc)$/;"	f	file:
opEnd	compiler/template/gen-template.py	/^def opEnd(tokens):$/;"	f
opEnd	mterp/gen-mterp.py	/^def opEnd(tokens):$/;"	f
opEntry	compiler/template/gen-template.py	/^def opEntry(tokens):$/;"	f
opEntry	mterp/gen-mterp.py	/^def opEntry(tokens):$/;"	f
opImm	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opImm(CompilationUnit *cUnit, OpKind op, int value)$/;"	f	file:
opImm	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opImm(CompilationUnit *cUnit, OpKind op, int value)$/;"	f	file:
opList	Globals.h	/^    char opList[(kNumPackedOpcodes+7)\/8];$/;"	m	struct:DvmJitGlobals
opNone	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opNone(CompilationUnit *cUnit, OpKind op)$/;"	f	file:
opNone	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opNone(CompilationUnit *cUnit, OpKind op)$/;"	f	file:
opReg	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opReg(CompilationUnit *cUnit, OpKind op, int rDestSrc)$/;"	f	file:
opReg	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opReg(CompilationUnit *cUnit, OpKind op, int rDestSrc)$/;"	f	file:
opRegImm	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opRegImm(CompilationUnit *cUnit, OpKind op, int rDestSrc1,$/;"	f	file:
opRegImm	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opRegImm(CompilationUnit *cUnit, OpKind op, int rDestSrc1,$/;"	f	file:
opRegReg	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opRegReg(CompilationUnit *cUnit, OpKind op, int rDestSrc1,$/;"	f	file:
opRegReg	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opRegReg(CompilationUnit *cUnit, OpKind op, int rDestSrc1,$/;"	f	file:
opRegRegImm	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opRegRegImm(CompilationUnit *cUnit, OpKind op, int rDest,$/;"	f	file:
opRegRegImm	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opRegRegImm(CompilationUnit *cUnit, OpKind op, int rDest,$/;"	f	file:
opRegRegReg	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *opRegRegReg(CompilationUnit *cUnit, OpKind op, int rDest,$/;"	f	file:
opRegRegReg	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opRegRegReg(CompilationUnit *cUnit, OpKind op, int rDest,$/;"	f	file:
opRegRegRegShift	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opRegRegRegShift(CompilationUnit *cUnit, OpKind op,$/;"	f	file:
opRegRegShift	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *opRegRegShift(CompilationUnit *cUnit, OpKind op, int rDestSrc1,$/;"	f	file:
opStart	compiler/template/gen-template.py	/^def opStart(tokens):$/;"	f
opStart	mterp/gen-mterp.py	/^def opStart(tokens):$/;"	f
opcode	compiler/codegen/arm/ArmLIR.h	/^    ArmOpcode opcode;$/;"	m	struct:ArmEncodingMap
opcode	compiler/codegen/arm/ArmLIR.h	/^    ArmOpcode opcode;$/;"	m	struct:ArmLIR
opcodeCoverage	compiler/codegen/arm/CodegenCommon.cpp	/^static int opcodeCoverage[kNumPackedOpcodes];$/;"	v	file:
opcodeCoverage	compiler/codegen/x86/CodegenDriver.cpp	/^static int opcodeCoverage[kNumPackedOpcodes];$/;"	v	file:
opcode_locations	compiler/template/gen-template.py	/^opcode_locations = {}$/;"	v
opcode_locations	mterp/gen-mterp.py	/^opcode_locations = {}$/;"	v
opcodes	compiler/template/gen-template.py	/^opcodes = getOpcodeList()$/;"	v
opcodes	mterp/gen-mterp.py	/^opcodes = getOpcodeList()$/;"	v
openAlternateSuffix	JarFile.cpp	/^static int openAlternateSuffix(const char *fileName, const char *suffix,$/;"	f	file:
operands	compiler/codegen/arm/ArmLIR.h	/^    int operands[4];            \/\/ [0..3] = [dest, src1, src2, extra]$/;"	m	struct:ArmLIR
operands	compiler/codegen/x86/X86LIR.h	/^    int operands[4];    \/\/ [0..3] = [dest, src1, src2, extra]$/;"	m	struct:X86LIR
operator !=	IndirectRefTable.h	/^bool inline operator!=(const iref_iterator& lhs, const iref_iterator& rhs) {$/;"	f
operator *	IndirectRefTable.h	/^    Object** operator*() {$/;"	f	class:iref_iterator
operator ++	IndirectRefTable.h	/^    iref_iterator& operator++() {$/;"	f	class:iref_iterator
operator []	shadowlib/Map.h	/^		V& operator[](const K& key){$/;"	f	class:Map
optControlVector	compiler/codegen/Optimizer.h	/^enum optControlVector {$/;"	g
optRound	compiler/CompilerIR.h	/^    int optRound;                       \/\/ round number to tell an LIR's age$/;"	m	struct:CompilationUnit
optimizeMethod	analysis/Optimize.cpp	/^static void optimizeMethod(Method* method, bool essentialOnly)$/;"	f	file:
optimizing	Globals.h	/^    bool        optimizing;$/;"	m	struct:DvmGlobals
optimizingBootstrapClass	Globals.h	/^    bool        optimizingBootstrapClass;$/;"	m	struct:DvmGlobals
options	Debugger.h	/^    u4 options;$/;"	m	struct:DebugInvokeReq
orTest	test/AtomicTest.cpp	/^static int orTest = 0;$/;"	v	file:
ordering_id_type	shadowlib/ShadowLib.h	/^typedef long ordering_id_type;$/;"	t
org_apache_harmony_dalvik_NativeTestTarget_emptyInlineMethod	InlineNative.cpp	/^static bool org_apache_harmony_dalvik_NativeTestTarget_emptyInlineMethod($/;"	f	file:
originalLen	CheckJni.cpp	/^    size_t      originalLen;$/;"	m	struct:GuardedCopy	file:
originalOpcode	interp/Interp.cpp	/^    u1          originalOpcode;         \/* original 8-bit opcode value *\/$/;"	m	struct:Breakpoint	file:
originalPtr	CheckJni.cpp	/^    const void* originalPtr;$/;"	m	struct:GuardedCopy	file:
os_changeThreadPriority	os/android.cpp	/^void os_changeThreadPriority(Thread* thread, int newPriority)$/;"	f
os_changeThreadPriority	os/linux.cpp	/^void os_changeThreadPriority(Thread* thread, int newPriority)$/;"	f
os_getThreadPriorityFromSystem	os/android.cpp	/^int os_getThreadPriorityFromSystem()$/;"	f
os_getThreadPriorityFromSystem	os/linux.cpp	/^int os_getThreadPriorityFromSystem()$/;"	f
os_lowerThreadPriority	os/android.cpp	/^void os_lowerThreadPriority(int oldThreadPriority)$/;"	f
os_lowerThreadPriority	os/linux.cpp	/^void os_lowerThreadPriority(int oldThreadPriority)$/;"	f
os_raiseThreadPriority	os/android.cpp	/^int os_raiseThreadPriority()$/;"	f
os_raiseThreadPriority	os/linux.cpp	/^int os_raiseThreadPriority()$/;"	f
ot_class_id	shadowlib/ReAgent.cpp	/^static volatile jint ot_class_id = 1;$/;"	v	file:
ot_object_id	shadowlib/ReAgent.cpp	/^static volatile jlong ot_object_id = 1;$/;"	v	file:
outOfMemoryObj	Globals.h	/^    Object*     outOfMemoryObj;$/;"	m	struct:DvmGlobals
outputStringTable	AllocTracker.cpp	/^static size_t outputStringTable(PointerSet* strings, u1* ptr)$/;"	f	file:
outputTypeVector	analysis/RegisterMap.cpp	/^static void outputTypeVector(const RegType* regs, int insnRegCount, u1* data)$/;"	f	file:
output_dir	compiler/template/gen-template.py	/^output_dir = sys.argv[2]$/;"	v
output_dir	mterp/gen-mterp.py	/^output_dir = sys.argv[2]$/;"	v
outsSize	oo/Object.h	/^    u2              outsSize;$/;"	m	struct:Method
overflow	Profile.h	/^    int     overflow;$/;"	m	struct:MethodTraceState
owner	Sync.cpp	/^    Thread*     owner;          \/* which thread currently owns the lock? *\/$/;"	m	struct:Monitor	file:
ownerMethod	Sync.cpp	/^    const Method* ownerMethod;$/;"	m	struct:Monitor	file:
ownerPc	Sync.cpp	/^    u4 ownerPc;$/;"	m	struct:Monitor	file:
p	alloc/DdmHeap.cpp	/^    u1 *p;$/;"	m	struct:HeapChunkContext	file:
pAddressSet	Debugger.h	/^    const AddressSet* pAddressSet;    \/* if non-null, address set for line *\/$/;"	m	struct:StepControl
pBits	BitVector.h	/^    BitVector *pBits;$/;"	m	struct:BitVectorIterator
pBootLoaderAlloc	Globals.h	/^    LinearAllocHdr* pBootLoaderAlloc;$/;"	m	struct:DvmGlobals
pCreateStatus	Thread.h	/^    volatile int*     pCreateStatus;$/;"	m	struct:InternalStartArgs
pDexFile	DvmDex.h	/^    DexFile*            pDexFile;$/;"	m	struct:DvmDex
pDexMemory	native/dalvik_system_DexFile.cpp	/^    u1*         pDexMemory; \/\/ malloc()ed memory, if any$/;"	m	struct:DexOrJar	file:
pDvmDex	JarFile.h	/^    DvmDex*     pDvmDex;$/;"	m	struct:JarFile
pDvmDex	RawDexFile.h	/^    DvmDex*     pDvmDex;$/;"	m	struct:RawDexFile
pDvmDex	oo/Object.h	/^    DvmDex*         pDvmDex;$/;"	m	struct:ClassObject
pEntries	Hash.h	/^    HashEntry*  pEntries;           \/* array on heap *\/$/;"	m	struct:HashTable
pHashTable	Hash.h	/^    HashTable*  pHashTable;$/;"	m	struct:HashIter
pHeader	DvmDex.h	/^    const DexHeader*    pHeader;$/;"	m	struct:DvmDex
pInterfaceCache	DvmDex.h	/^    struct AtomicCache* pInterfaceCache;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::AtomicCache
pJarFile	native/dalvik_system_DexFile.cpp	/^    JarFile*    pJarFile;$/;"	m	struct:DexOrJar	file:
pJitEntryTable	Globals.h	/^    struct JitEntry *pJitEntryTable;$/;"	m	struct:DvmJitGlobals	typeref:struct:DvmJitGlobals::JitEntry
pJitProfTable	Thread.h	/^    unsigned char*    pJitProfTable;$/;"	m	struct:Thread
pJitTraceProfCounters	Globals.h	/^    struct JitTraceProfCounters *pJitTraceProfCounters;$/;"	m	struct:DvmJitGlobals	typeref:struct:DvmJitGlobals::JitTraceProfCounters
pLoc	jdwp/JdwpEvent.cpp	/^    const JdwpLocation* pLoc;           \/* LocationOnly *\/$/;"	m	struct:ModBasket	file:
pProfTable	Globals.h	/^    unsigned char *pProfTable;$/;"	m	struct:DvmJitGlobals
pProfTableCopy	Globals.h	/^    unsigned char *pProfTableCopy;$/;"	m	struct:DvmJitGlobals
pProfileCountdown	Thread.h	/^    const void* pProfileCountdown;$/;"	m	struct:Thread
pRawDexFile	native/dalvik_system_DexFile.cpp	/^    RawDexFile* pRawDexFile;$/;"	m	struct:DexOrJar	file:
pReply	Debugger.cpp	/^    ExpandBuf* pReply;$/;"	m	struct:DebugCallbackContext	file:
pResClasses	DvmDex.h	/^    struct ClassObject** pResClasses;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::ClassObject
pResFields	DvmDex.h	/^    struct Field**      pResFields;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::Field
pResMethods	DvmDex.h	/^    struct Method**     pResMethods;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::Method
pResStrings	DvmDex.h	/^    struct StringObject** pResStrings;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::StringObject
pSet	Debugger.cpp	/^    AddressSet *pSet;$/;"	m	struct:AddressSetContext	file:
pThread	Thread.h	/^    volatile Thread** pThread;$/;"	m	struct:InternalStartArgs
pack_boolean	shadowlib/JniUtility.h	/^void pack_boolean(Buffer * buff, jboolean to_send) {$/;"	f
pack_boolean	shadowlib/buffpack.h	/^void pack_boolean(buffer * buff, jboolean to_send) {$/;"	f
pack_byte	shadowlib/JniUtility.h	/^void pack_byte(Buffer * buff, jbyte to_send) {$/;"	f
pack_byte	shadowlib/buffpack.h	/^void pack_byte(buffer * buff, jbyte to_send) {$/;"	f
pack_bytes	shadowlib/JniUtility.h	/^void pack_bytes(Buffer * buff, const void * data, jint size) {$/;"	f
pack_bytes	shadowlib/buffpack.h	/^void pack_bytes(buffer * buff, const void * data, jint size) {$/;"	f
pack_char	shadowlib/JniUtility.h	/^void pack_char(Buffer * buff, jchar to_send) {$/;"	f
pack_char	shadowlib/buffpack.h	/^void pack_char(buffer * buff, jchar to_send) {$/;"	f
pack_double	shadowlib/JniUtility.h	/^void pack_double(Buffer * buff, jdouble to_send) {$/;"	f
pack_double	shadowlib/buffpack.h	/^void pack_double(buffer * buff, jdouble to_send) {$/;"	f
pack_float	shadowlib/JniUtility.h	/^void pack_float(Buffer * buff, jfloat to_send) {$/;"	f
pack_float	shadowlib/buffpack.h	/^void pack_float(buffer * buff, jfloat to_send) {$/;"	f
pack_int	shadowlib/JniUtility.h	/^void pack_int(Buffer * buff, jint to_send) {$/;"	f
pack_int	shadowlib/buffpack.h	/^void pack_int(buffer * buff, jint to_send) {$/;"	f
pack_long	shadowlib/JniUtility.h	/^void pack_long(Buffer * buff, jlong to_send) {$/;"	f
pack_long	shadowlib/buffpack.h	/^void pack_long(buffer * buff, jlong to_send) {$/;"	f
pack_short	shadowlib/JniUtility.h	/^void pack_short(Buffer * buff, jshort to_send) {$/;"	f
pack_short	shadowlib/buffpack.h	/^void pack_short(buffer * buff, jshort to_send) {$/;"	f
pack_string_utf8	shadowlib/JniUtility.h	/^void pack_string_utf8(Buffer * buff, const void * string_utf8,$/;"	f
pack_string_utf8	shadowlib/buffpack.h	/^void pack_string_utf8(buffer * buff, const void * string_utf8,$/;"	f
pad0	interp/Stack.h	/^    u4          pad0, pad1, pad2;$/;"	m	struct:StackSaveArea
pad1	interp/Stack.h	/^    u4          pad0, pad1, pad2;$/;"	m	struct:StackSaveArea
pad2	interp/Stack.h	/^    u4          pad0, pad1, pad2;$/;"	m	struct:StackSaveArea
pad3	interp/Stack.h	/^    u4          pad3, pad4, pad5;$/;"	m	struct:StackSaveArea
pad4	interp/Stack.h	/^    u4          pad3, pad4, pad5;$/;"	m	struct:StackSaveArea
pad5	interp/Stack.h	/^    u4          pad3, pad4, pad5;$/;"	m	struct:StackSaveArea
pageSizeMask	Globals.h	/^    unsigned int pageSizeMask;$/;"	m	struct:DvmJitGlobals
pair	compiler/codegen/arm/ArmLIR.h	/^    bool pair;                  \/\/ Part of a register pair?$/;"	m	struct:RegisterInfo
pair	compiler/codegen/x86/X86LIR.h	/^    bool pair;                  \/\/ Part of a register pair?$/;"	m	struct:RegisterInfo
params	jdwp/JdwpPriv.h	/^    JdwpStartupParams   params;$/;"	m	struct:JdwpState
parseInsn	compiler/Frontend.cpp	/^static inline int parseInsn(const u2 *codePtr, DecodedInstruction *decInsn,$/;"	f	file:
parseJdwpOptions	Init.cpp	/^static bool parseJdwpOptions(const char* str)$/;"	f	file:
parseMemOption	Init.cpp	/^static size_t parseMemOption(const char *s, size_t div)$/;"	f	file:
partialOverlap	compiler/codegen/arm/Thumb/Gen.cpp	/^static bool partialOverlap(int sreg1, int sreg2)$/;"	f	file:
partner	compiler/codegen/arm/ArmLIR.h	/^    int partner;                \/\/ If pair, other reg of pair$/;"	m	struct:RegisterInfo
partner	compiler/codegen/x86/X86LIR.h	/^    int partner;                \/\/ If pair, other reg of pair$/;"	m	struct:RegisterInfo
parts	IndirectRefTable.h	/^    } parts;$/;"	m	union:IRTSegmentState	typeref:struct:IRTSegmentState::__anon19
pathName	Native.cpp	/^    char*       pathName;           \/* absolute path to library *\/$/;"	m	struct:SharedLib	file:
patternMatch	jdwp/JdwpEvent.cpp	/^static bool patternMatch(const char* pattern, const char* target)$/;"	f	file:
pc	AllocTracker.cpp	/^        int         pc;         \/* current execution offset, in 16-bit units *\/$/;"	m	struct:AllocRecord::__anon9	file:
pc	compiler/Compiler.h	/^    const u2* pc;$/;"	m	struct:CompilerWorkOrder
pc	interp/InterpState.h	/^    const u2*       pc;         \/\/ Dalvik PC$/;"	m	struct:InterpSaveState
pc	mterp/cstubs/enddefs.cpp	4;"	d	file:
pc	mterp/cstubs/stubdefs.cpp	26;"	d	file:
pc	mterp/out/InterpC-allstubs.cpp	396;"	d	file:
pc	mterp/out/InterpC-allstubs.cpp	4052;"	d	file:
pc	mterp/out/InterpC-armv5te-vfp.cpp	1159;"	d	file:
pc	mterp/out/InterpC-armv5te-vfp.cpp	396;"	d	file:
pc	mterp/out/InterpC-armv5te.cpp	1159;"	d	file:
pc	mterp/out/InterpC-armv5te.cpp	396;"	d	file:
pc	mterp/out/InterpC-armv7-a-neon.cpp	1159;"	d	file:
pc	mterp/out/InterpC-armv7-a-neon.cpp	396;"	d	file:
pc	mterp/out/InterpC-armv7-a.cpp	1159;"	d	file:
pc	mterp/out/InterpC-armv7-a.cpp	396;"	d	file:
pc	mterp/out/InterpC-x86-atom.cpp	2291;"	d	file:
pc	mterp/out/InterpC-x86-atom.cpp	396;"	d	file:
pc	mterp/out/InterpC-x86.cpp	2233;"	d	file:
pc	mterp/out/InterpC-x86.cpp	396;"	d	file:
pcReconstructionList	compiler/CompilerIR.h	/^    GrowableList pcReconstructionList;$/;"	m	struct:CompilationUnit
performanceTest	test/TestIndirectRefTable.cpp	/^static bool performanceTest()$/;"	f	file:
phantomReferences	alloc/HeapInternal.h	/^    Object *phantomReferences;$/;"	m	struct:GcHeap
phiV	compiler/Dataflow.h	/^    BitVector *phiV;$/;"	m	struct:BasicBlockDataFlow
pieceLenField	alloc/DdmHeap.cpp	/^    u1 *pieceLenField;$/;"	m	struct:HeapChunkContext	file:
pinHashTableEntries	alloc/Copying.cpp	/^static void pinHashTableEntries(HashTable *table)$/;"	f	file:
pinInternedStrings	alloc/Copying.cpp	/^static void pinInternedStrings()$/;"	f	file:
pinObject	alloc/Copying.cpp	/^static void pinObject(const Object *obj)$/;"	f	file:
pinPrimitiveArray	Jni.cpp	/^static void pinPrimitiveArray(ArrayObject* arrayObj) {$/;"	f	file:
pinPrimitiveClasses	alloc/Copying.cpp	/^static void pinPrimitiveClasses()$/;"	f	file:
pinReferenceTable	alloc/Copying.cpp	/^static void pinReferenceTable(const ReferenceTable *table)$/;"	f	file:
pinThread	alloc/Copying.cpp	/^static void pinThread(const Thread *thread)$/;"	f	file:
pinThreadList	alloc/Copying.cpp	/^static void pinThreadList()$/;"	f	file:
pinThreadStack	alloc/Copying.cpp	/^static void pinThreadStack(const Thread *thread)$/;"	f	file:
pkgOrClass	Globals.h	/^    char*   pkgOrClass;         \/* package\/class string, or NULL for esa\/dsa *\/$/;"	m	struct:AssertionControl
pkgOrClassLen	Globals.h	/^    int     pkgOrClassLen;      \/* string length, for quick compare *\/$/;"	m	struct:AssertionControl
policy	Thread.cpp	/^    int policy;$/;"	m	struct:SchedulerStats	file:
populateStringTables	AllocTracker.cpp	/^static bool populateStringTables(PointerSet* classNames,$/;"	f	file:
port	jdwp/Jdwp.h	/^    short       port;$/;"	m	struct:JdwpStartupParams
postVerify	Globals.h	/^    bool        postVerify;$/;"	m	struct:DvmGlobals
preVerify	Globals.h	/^    bool        preVerify;$/;"	m	struct:DvmGlobals
precacheReferenceOffsets	oo/Class.cpp	/^static bool precacheReferenceOffsets(ClassObject* clazz)$/;"	f	file:
preciseGc	Globals.h	/^    bool        preciseGc;$/;"	m	struct:DvmGlobals
preciseMethods	Globals.h	/^    PointerSet* preciseMethods;$/;"	m	struct:DvmGlobals
predecessors	analysis/VfyBasicBlock.h	/^    PointerSet*     predecessors;   \/* set of basic blocks that can flow here *\/$/;"	m	struct:VfyBasicBlock
predecessors	compiler/CompilerIR.h	/^    BitVector *predecessors;$/;"	m	struct:BasicBlock
prepareCpe	oo/Class.cpp	/^static bool prepareCpe(ClassPathEntry* cpe, bool isBootstrap)$/;"	f	file:
prepareSocket	jdwp/JdwpSocket.cpp	/^static bool prepareSocket(JdwpState* state, const JdwpStartupParams* pParams)$/;"	f	file:
prepareThread	Thread.cpp	/^static bool prepareThread(Thread* thread)$/;"	f	file:
preserveSoftReferences	alloc/Copying.cpp	/^void preserveSoftReferences(Object **list)$/;"	f
preserveSomeSoftReferences	alloc/MarkSweep.cpp	/^static void preserveSomeSoftReferences(Object **list)$/;"	f	file:
prev	JniInternal.h	/^    struct JNIEnvExt* prev;$/;"	m	struct:JNIEnvExt	typeref:struct:JNIEnvExt::JNIEnvExt
prev	Thread.h	/^    struct Thread* prev;$/;"	m	struct:Thread	typeref:struct:Thread::Thread
prev	compiler/CompilerIR.h	/^    struct LIR *prev;$/;"	m	struct:LIR	typeref:struct:LIR::LIR
prev	compiler/CompilerIR.h	/^    struct MIR *prev;$/;"	m	struct:MIR	typeref:struct:MIR::MIR
prev	interp/InterpState.h	/^    struct InterpSaveState* prev;  \/\/ To follow nested activations$/;"	m	struct:InterpSaveState	typeref:struct:InterpSaveState::InterpSaveState
prev	jdwp/JdwpEvent.h	/^    JdwpEvent* prev;           \/* linked list *\/$/;"	m	struct:JdwpEvent
prevFrame	interp/Stack.h	/^    u4*         prevFrame;$/;"	m	struct:StackSaveArea
prevSave	interp/Stack.h	/^    StackSaveArea* prevSave;$/;"	m	struct:StackSaveArea
primSigCharToRegType	analysis/CodeVerify.cpp	/^static RegType primSigCharToRegType(char sigChar)$/;"	f	file:
primitiveToBasicTypeAndSize	hprof/HprofHeap.cpp	/^static hprof_basic_type primitiveToBasicTypeAndSize(PrimitiveType prim,$/;"	f	file:
primitiveType	oo/Object.h	/^    PrimitiveType   primitiveType;$/;"	m	struct:ClassObject
primitiveTypeToName	CheckJni.cpp	/^    static const char* primitiveTypeToName(PrimitiveType primType) {$/;"	f	class:ScopedCheck	file:
primitiveTypeToRegType	analysis/CodeVerify.cpp	/^static RegType primitiveTypeToRegType(PrimitiveType primType)$/;"	f	file:
printAllClass	SignalCatcher.cpp	/^void printAllClass(void *ptr)$/;"	f
printDebug	shadowlib/ReAgent.cpp	/^void printDebug(ClassObject* obj){$/;"	f
printFunc	test/TestHash.cpp	/^static int printFunc(void* data, void* arg)$/;"	f	file:
printMe	Globals.h	/^    bool printMe;$/;"	m	struct:DvmJitGlobals
printMe	compiler/CompilerIR.h	/^    bool printMe;$/;"	m	struct:CompilationUnit
printProcessName	SignalCatcher.cpp	/^static void printProcessName(const DebugOutputTarget* target)$/;"	f	file:
printSSANames	compiler/CompilerIR.h	/^    bool printSSANames;$/;"	m	struct:CompilationUnit
printWaitMessage	interp/Stack.cpp	/^static void printWaitMessage(const DebugOutputTarget* target, const char* detail, Object* obj,$/;"	f	file:
priority	Misc.h	/^            int priority;$/;"	m	struct:DebugOutputTarget::__anon16::__anon17
priority	Thread.cpp	/^    int priority;$/;"	m	struct:SchedulerStats	file:
processAnnotationSet	reflect/Annotation.cpp	/^static ArrayObject* processAnnotationSet(const ClassObject* clazz,$/;"	f	file:
processAnnotationSetRefList	reflect/Annotation.cpp	/^static ArrayObject* processAnnotationSetRefList(const ClassObject* clazz,$/;"	f	file:
processAnnotationValue	reflect/Annotation.cpp	/^static bool processAnnotationValue(const ClassObject* clazz,$/;"	f	file:
processCanBranch	compiler/Frontend.cpp	/^static void processCanBranch(CompilationUnit *cUnit, BasicBlock *curBlock,$/;"	f	file:
processCanSwitch	compiler/Frontend.cpp	/^static void processCanSwitch(CompilationUnit *cUnit, BasicBlock *curBlock,$/;"	f	file:
processCanThrow	compiler/Frontend.cpp	/^static void processCanThrow(CompilationUnit *cUnit, BasicBlock *curBlock,$/;"	f	file:
processClassPath	oo/Class.cpp	/^static ClassPathEntry* processClassPath(const char* pathStr, bool isBootstrap)$/;"	f	file:
processEncodedAnnotation	reflect/Annotation.cpp	/^static Object* processEncodedAnnotation(const ClassObject* clazz,$/;"	f	file:
processFinalizableReferences	alloc/Copying.cpp	/^void processFinalizableReferences()$/;"	f
processIncoming	jdwp/JdwpAdb.cpp	/^static bool processIncoming(JdwpState* state)$/;"	f	file:
processIncoming	jdwp/JdwpPriv.h	/^    bool (*processIncoming)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
processIncoming	jdwp/JdwpSocket.cpp	/^static bool processIncoming(JdwpState* state)$/;"	f	file:
processInstruction	analysis/Liveness.cpp	/^static bool processInstruction(VerifierData* vdata, u4 insnIdx,$/;"	f	file:
processMarkStack	alloc/MarkSweep.cpp	/^static void processMarkStack(GcMarkContext *ctx)$/;"	f	file:
processOptions	Init.cpp	/^static int processOptions(int argc, const char* const argv[],$/;"	f	file:
processTryCatchBlocks	compiler/Frontend.cpp	/^static void processTryCatchBlocks(CompilationUnit *cUnit)$/;"	f	file:
processXjitmethod	Init.cpp	/^static void processXjitmethod(const char *opt)$/;"	f	file:
processXjitop	Init.cpp	/^static void processXjitop(const char *opt)$/;"	f	file:
process_one_arg	arch/sh/CallSH4ABI.S	/^process_one_arg:$/;"	l
processor	Misc.h	/^    int processor;          \/* number of CPU that last executed thread *\/$/;"	m	struct:ProcStatData
profileCodeSize	compiler/Compiler.h	/^    int profileCodeSize;$/;"	m	struct:JitTranslationInfo
profileCodeSize	compiler/CompilerIR.h	/^    int profileCodeSize;                \/\/ Size of the profile prefix in bytes$/;"	m	struct:CompilationUnit
profileCountdown	Globals.h	/^    int profileCountdown;$/;"	m	struct:DvmJitGlobals
profileEnabled	interp/Jit.h	/^    unsigned int           profileEnabled:1;$/;"	m	struct:JitEntryInfo
profileMode	Globals.h	/^    TraceProfilingModes profileMode;$/;"	m	struct:DvmJitGlobals
profileOffset	interp/Jit.h	/^    unsigned int           profileOffset:5;$/;"	m	struct:JitEntryInfo
profilerClockSource	Globals.h	/^    ProfilerClockSource profilerClockSource;$/;"	m	struct:DvmGlobals
promoteBlockByAddr	alloc/Copying.cpp	/^static void promoteBlockByAddr(HeapSource *heapSource, const void *addr)$/;"	f	file:
properties	Globals.h	/^    std::vector<std::string>* properties;$/;"	m	struct:DvmGlobals
prototype	oo/Object.h	/^    DexProto        prototype;$/;"	m	struct:Method
proxyConstructor	reflect/Proxy.cpp	/^static void proxyConstructor(const u4* args, JValue* pResult,$/;"	f	file:
proxyInvoker	reflect/Proxy.cpp	/^static void proxyInvoker(const u4* args, JValue* pResult,$/;"	f	file:
pthreadKeySelf	Globals.h	/^    pthread_key_t pthreadKeySelf;       \/* Thread*, for dvmThreadSelf *\/$/;"	m	struct:DvmGlobals
ptr	compiler/CompilerUtility.h	/^    char ptr[0];$/;"	m	struct:ArenaMemBlock
ptr	oo/Class.h	/^    void*   ptr;            \/* JarFile* or DexFile* *\/$/;"	m	struct:ClassPathEntry
ptr2heap	alloc/HeapSource.cpp	/^static Heap *ptr2heap(const HeapSource *hs, const void *ptr)$/;"	f	file:
puntBlock	compiler/CompilerIR.h	/^    BasicBlock *puntBlock;              \/\/ punting to interp for exceptions$/;"	m	struct:CompilationUnit
puntExit	Globals.h	/^    int                puntExit;$/;"	m	struct:DvmJitGlobals
putDoubleToArray	mterp/c/header.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-allstubs.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-armv5te-vfp.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-armv5te.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-armv7-a-neon.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-armv7-a.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-portable.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-x86-atom.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putDoubleToArray	mterp/out/InterpC-x86.cpp	/^static inline void putDoubleToArray(u4* ptr, int idx, double dval)$/;"	f	file:
putLongToArray	mterp/c/header.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-allstubs.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-armv5te-vfp.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-armv5te.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-armv7-a-neon.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-armv7-a.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-portable.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-x86-atom.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
putLongToArray	mterp/out/InterpC-x86.cpp	/^static inline void putLongToArray(u4* ptr, int idx, s8 val)$/;"	f	file:
put_32bit_on_stack	arch/sh/CallSH4ABI.S	/^put_32bit_on_stack:$/;"	l
put_64bit_on_stack	arch/sh/CallSH4ABI.S	/^put_64bit_on_stack:$/;"	l
q_capacity	shadowlib/ReQueue.h	/^		int q_capacity;$/;"	m	class:BaseQueue
q_data	shadowlib/ReQueue.h	/^		char* q_data;$/;"	m	class:BaseQueue
q_objfree	shadowlib/ReProtocol.h	/^		ReQueue q_objfree;$/;"	m	class:ReProtocol
q_occupied	shadowlib/ReQueue.h	/^		int q_occupied;$/;"	m	class:BaseQueue
quasiatomic_spinlock	Atomic.cpp	/^static int32_t quasiatomic_spinlock = 0;$/;"	v	file:
queueHead	alloc/Copying.cpp	/^    size_t queueHead;$/;"	m	struct:HeapSource	file:
queueSize	alloc/Copying.cpp	/^    size_t queueSize;$/;"	m	struct:HeapSource	file:
queueTail	alloc/Copying.cpp	/^    size_t queueTail;$/;"	m	struct:HeapSource	file:
quitLoopMode	compiler/CompilerIR.h	/^    bool quitLoopMode;                  \/\/ cold path\/complex bytecode$/;"	m	struct:CompilationUnit
r0	compiler/codegen/arm/ArmLIR.h	/^    r0     = 0,$/;"	e	enum:NativeRegisterPool
r1	compiler/codegen/arm/ArmLIR.h	/^    r1     = 1,$/;"	e	enum:NativeRegisterPool
r10	compiler/codegen/arm/ArmLIR.h	/^    r10    = 10,$/;"	e	enum:NativeRegisterPool
r11	compiler/codegen/arm/ArmLIR.h	/^    r11    = 11,$/;"	e	enum:NativeRegisterPool
r12	compiler/codegen/arm/ArmLIR.h	/^    r12    = 12,$/;"	e	enum:NativeRegisterPool
r13sp	compiler/codegen/arm/ArmLIR.h	/^    r13sp  = 13,$/;"	e	enum:NativeRegisterPool
r14lr	compiler/codegen/arm/ArmLIR.h	/^    r14lr  = 14,$/;"	e	enum:NativeRegisterPool
r15pc	compiler/codegen/arm/ArmLIR.h	/^    r15pc  = 15,$/;"	e	enum:NativeRegisterPool
r2	compiler/codegen/arm/ArmLIR.h	/^    r2     = 2,$/;"	e	enum:NativeRegisterPool
r3	compiler/codegen/arm/ArmLIR.h	/^    r3     = 3,$/;"	e	enum:NativeRegisterPool
r4PC	compiler/codegen/arm/ArmLIR.h	/^    r4PC   = rPC,$/;"	e	enum:NativeRegisterPool
r5FP	compiler/codegen/arm/ArmLIR.h	/^    r5FP   = rFP,$/;"	e	enum:NativeRegisterPool
r6SELF	compiler/codegen/arm/ArmLIR.h	/^    r6SELF = rSELF,$/;"	e	enum:NativeRegisterPool
r7	compiler/codegen/arm/ArmLIR.h	/^    r7     = 7,$/;"	e	enum:NativeRegisterPool
r8	compiler/codegen/arm/ArmLIR.h	/^    r8     = 8,$/;"	e	enum:NativeRegisterPool
r9	compiler/codegen/arm/ArmLIR.h	/^    r9     = 9,$/;"	e	enum:NativeRegisterPool
rEAX	compiler/codegen/x86/X86LIR.h	/^    rEAX = 0,$/;"	e	enum:NativeRegisterPool
rEBP	compiler/codegen/x86/X86LIR.h	/^    rEBP = 5,$/;"	e	enum:NativeRegisterPool
rEBX	compiler/codegen/x86/X86LIR.h	/^    rEBX = 3,$/;"	e	enum:NativeRegisterPool
rECX	compiler/codegen/x86/X86LIR.h	/^    rECX = 1,$/;"	e	enum:NativeRegisterPool
rEDI	compiler/codegen/x86/X86LIR.h	/^    rEDI = 7,$/;"	e	enum:NativeRegisterPool
rEDX	compiler/codegen/x86/X86LIR.h	/^    rEDX = 2,$/;"	e	enum:NativeRegisterPool
rESI	compiler/codegen/x86/X86LIR.h	/^    rESI = 6,$/;"	e	enum:NativeRegisterPool
rESP	compiler/codegen/x86/X86LIR.h	/^    rESP = 4,$/;"	e	enum:NativeRegisterPool
rFP	compiler/codegen/arm/ArmLIR.h	/^    rFP    = 5,$/;"	e	enum:NativeRegisterPool
rFP	compiler/codegen/x86/X86LIR.h	148;"	d
rFP	compiler/template/armv5te/header.S	/^#define rFP     r5$/;"	d
rFP	compiler/template/ia32/header.S	/^#define rFP   %edi$/;"	d
rFP	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define rFP     r5$/;"	d
rFP	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define rFP     r5$/;"	d
rFP	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define rFP     r5$/;"	d
rFP	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define rFP     r5$/;"	d
rFP	compiler/template/out/CompilerTemplateAsm-ia32.S	/^#define rFP   %edi$/;"	d
rFP	mterp/armv5te/header.S	/^#define rFP     r5$/;"	d
rFP	mterp/out/InterpAsm-armv5te-vfp.S	/^#define rFP     r5$/;"	d
rFP	mterp/out/InterpAsm-armv5te.S	/^#define rFP     r5$/;"	d
rFP	mterp/out/InterpAsm-armv7-a-neon.S	/^#define rFP     r5$/;"	d
rFP	mterp/out/InterpAsm-armv7-a.S	/^#define rFP     r5$/;"	d
rFP	mterp/out/InterpAsm-x86-atom.S	/^#define rFP     %edi$/;"	d
rFP	mterp/out/InterpAsm-x86.S	/^#define rFP      %edi$/;"	d
rFP	mterp/x86-atom/header.S	/^#define rFP     %edi$/;"	d
rFP	mterp/x86/header.S	/^#define rFP      %edi$/;"	d
rFP_SPILL	mterp/out/InterpAsm-x86.S	/^#define rFP_SPILL      (-20)$/;"	d
rFP_SPILL	mterp/x86/header.S	/^#define rFP_SPILL      (-20)$/;"	d
rFinish	mterp/out/InterpAsm-x86-atom.S	/^#define rFinish %edx$/;"	d
rFinish	mterp/x86-atom/header.S	/^#define rFinish %edx$/;"	d
rGLUE	mterp/out/InterpAsm-x86-atom.S	/^#define rGLUE  (%ebp)$/;"	d
rGLUE	mterp/x86-atom/header.S	/^#define rGLUE  (%ebp)$/;"	d
rIBASE	compiler/template/armv5te/header.S	/^#define rIBASE  r8$/;"	d
rIBASE	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define rIBASE  r8$/;"	d
rIBASE	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define rIBASE  r8$/;"	d
rIBASE	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define rIBASE  r8$/;"	d
rIBASE	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define rIBASE  r8$/;"	d
rIBASE	mterp/armv5te/header.S	/^#define rIBASE  r8$/;"	d
rIBASE	mterp/out/InterpAsm-armv5te-vfp.S	/^#define rIBASE  r8$/;"	d
rIBASE	mterp/out/InterpAsm-armv5te.S	/^#define rIBASE  r8$/;"	d
rIBASE	mterp/out/InterpAsm-armv7-a-neon.S	/^#define rIBASE  r8$/;"	d
rIBASE	mterp/out/InterpAsm-armv7-a.S	/^#define rIBASE  r8$/;"	d
rIBASE	mterp/out/InterpAsm-x86.S	/^#define rIBASE   %edx$/;"	d
rIBASE	mterp/x86/header.S	/^#define rIBASE   %edx$/;"	d
rIBASE_SPILL	mterp/out/InterpAsm-x86.S	/^#define rIBASE_SPILL   (-28)$/;"	d
rIBASE_SPILL	mterp/x86/header.S	/^#define rIBASE_SPILL   (-28)$/;"	d
rINST	compiler/codegen/x86/X86LIR.h	149;"	d
rINST	compiler/template/armv5te/header.S	/^#define rINST   r7$/;"	d
rINST	compiler/template/ia32/header.S	/^#define rINST %ebx$/;"	d
rINST	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define rINST   r7$/;"	d
rINST	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define rINST   r7$/;"	d
rINST	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define rINST   r7$/;"	d
rINST	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define rINST   r7$/;"	d
rINST	compiler/template/out/CompilerTemplateAsm-ia32.S	/^#define rINST %ebx$/;"	d
rINST	mterp/armv5te/header.S	/^#define rINST   r7$/;"	d
rINST	mterp/out/InterpAsm-armv5te-vfp.S	/^#define rINST   r7$/;"	d
rINST	mterp/out/InterpAsm-armv5te.S	/^#define rINST   r7$/;"	d
rINST	mterp/out/InterpAsm-armv7-a-neon.S	/^#define rINST   r7$/;"	d
rINST	mterp/out/InterpAsm-armv7-a.S	/^#define rINST   r7$/;"	d
rINST	mterp/out/InterpAsm-x86-atom.S	/^#define rINST   %ebx$/;"	d
rINST	mterp/out/InterpAsm-x86.S	/^#define rINST    %ebx$/;"	d
rINST	mterp/x86-atom/header.S	/^#define rINST   %ebx$/;"	d
rINST	mterp/x86/header.S	/^#define rINST    %ebx$/;"	d
rINST_SPILL	mterp/out/InterpAsm-x86.S	/^#define rINST_SPILL    (-24)$/;"	d
rINST_SPILL	mterp/x86/header.S	/^#define rINST_SPILL    (-24)$/;"	d
rINSTbh	mterp/out/InterpAsm-x86-atom.S	/^#define rINSTbh  %bh$/;"	d
rINSTbh	mterp/out/InterpAsm-x86.S	/^#define rINSTbh  %bh$/;"	d
rINSTbh	mterp/x86-atom/header.S	/^#define rINSTbh  %bh$/;"	d
rINSTbh	mterp/x86/header.S	/^#define rINSTbh  %bh$/;"	d
rINSTbl	mterp/out/InterpAsm-x86-atom.S	/^#define rINSTbl  %bl$/;"	d
rINSTbl	mterp/out/InterpAsm-x86.S	/^#define rINSTbl  %bl$/;"	d
rINSTbl	mterp/x86-atom/header.S	/^#define rINSTbl  %bl$/;"	d
rINSTbl	mterp/x86/header.S	/^#define rINSTbl  %bl$/;"	d
rINSTw	mterp/out/InterpAsm-x86-atom.S	/^#define rINSTw  %bx$/;"	d
rINSTw	mterp/out/InterpAsm-x86.S	/^#define rINSTw   %bx$/;"	d
rINSTw	mterp/x86-atom/header.S	/^#define rINSTw  %bx$/;"	d
rINSTw	mterp/x86/header.S	/^#define rINSTw   %bx$/;"	d
rNone	compiler/codegen/arm/ArmLIR.h	87;"	d
rPC	compiler/codegen/arm/ArmLIR.h	/^    rPC    = 4,$/;"	e	enum:NativeRegisterPool
rPC	compiler/codegen/x86/X86LIR.h	147;"	d
rPC	compiler/template/armv5te/header.S	/^#define rPC     r4$/;"	d
rPC	compiler/template/ia32/header.S	/^#define rPC   %esi$/;"	d
rPC	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define rPC     r4$/;"	d
rPC	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define rPC     r4$/;"	d
rPC	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define rPC     r4$/;"	d
rPC	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define rPC     r4$/;"	d
rPC	compiler/template/out/CompilerTemplateAsm-ia32.S	/^#define rPC   %esi$/;"	d
rPC	mterp/armv5te/header.S	/^#define rPC     r4$/;"	d
rPC	mterp/out/InterpAsm-armv5te-vfp.S	/^#define rPC     r4$/;"	d
rPC	mterp/out/InterpAsm-armv5te.S	/^#define rPC     r4$/;"	d
rPC	mterp/out/InterpAsm-armv7-a-neon.S	/^#define rPC     r4$/;"	d
rPC	mterp/out/InterpAsm-armv7-a.S	/^#define rPC     r4$/;"	d
rPC	mterp/out/InterpAsm-x86-atom.S	/^#define rPC     %esi$/;"	d
rPC	mterp/out/InterpAsm-x86.S	/^#define rPC      %esi$/;"	d
rPC	mterp/x86-atom/header.S	/^#define rPC     %esi$/;"	d
rPC	mterp/x86/header.S	/^#define rPC      %esi$/;"	d
rPC_SPILL	mterp/out/InterpAsm-x86.S	/^#define rPC_SPILL      (-16)$/;"	d
rPC_SPILL	mterp/x86/header.S	/^#define rPC_SPILL      (-16)$/;"	d
rSELF	compiler/codegen/arm/ArmLIR.h	/^    rSELF  = 6,$/;"	e	enum:NativeRegisterPool
rSELF	compiler/template/armv5te/header.S	/^#define rSELF   r6$/;"	d
rSELF	compiler/template/ia32/header.S	/^#define rSELF (%ebp)$/;"	d
rSELF	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^#define rSELF   r6$/;"	d
rSELF	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^#define rSELF   r6$/;"	d
rSELF	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^#define rSELF   r6$/;"	d
rSELF	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^#define rSELF   r6$/;"	d
rSELF	compiler/template/out/CompilerTemplateAsm-ia32.S	/^#define rSELF (%ebp)$/;"	d
rSELF	mterp/armv5te/header.S	/^#define rSELF   r6$/;"	d
rSELF	mterp/out/InterpAsm-armv5te-vfp.S	/^#define rSELF   r6$/;"	d
rSELF	mterp/out/InterpAsm-armv5te.S	/^#define rSELF   r6$/;"	d
rSELF	mterp/out/InterpAsm-armv7-a-neon.S	/^#define rSELF   r6$/;"	d
rSELF	mterp/out/InterpAsm-armv7-a.S	/^#define rSELF   r6$/;"	d
rSELF	mterp/out/InterpAsm-x86.S	/^#define rSELF    8(%ebp)$/;"	d
rSELF	mterp/x86/header.S	/^#define rSELF    8(%ebp)$/;"	d
rXMM0	compiler/codegen/x86/X86LIR.h	/^    rXMM0 = 0 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM1	compiler/codegen/x86/X86LIR.h	/^    rXMM1 = 1 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM2	compiler/codegen/x86/X86LIR.h	/^    rXMM2 = 2 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM3	compiler/codegen/x86/X86LIR.h	/^    rXMM3 = 3 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM4	compiler/codegen/x86/X86LIR.h	/^    rXMM4 = 4 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM5	compiler/codegen/x86/X86LIR.h	/^    rXMM5 = 5 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM6	compiler/codegen/x86/X86LIR.h	/^    rXMM6 = 6 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
rXMM7	compiler/codegen/x86/X86LIR.h	/^    rXMM7 = 7 + FP_REG_OFFSET,$/;"	e	enum:NativeRegisterPool
read1	Bits.h	/^INLINE u1 read1(unsigned const char** ppSrc)$/;"	f
read2BE	Bits.h	/^INLINE u2 read2BE(unsigned char const** ppSrc)$/;"	f
read2LE	Bits.h	/^INLINE u2 read2LE(unsigned char const** ppSrc)$/;"	f
read4BE	Bits.h	/^INLINE u4 read4BE(unsigned char const** ppSrc)$/;"	f
read4LE	Bits.h	/^INLINE u4 read4LE(unsigned char const** ppSrc)$/;"	f
read8BE	Bits.h	/^INLINE u8 read8BE(unsigned char const** ppSrc)$/;"	f
read8LE	Bits.h	/^INLINE u8 read8LE(unsigned char const** ppSrc)$/;"	f
readAndLog	StdioConverter.cpp	/^static bool readAndLog(int fd, BufferedData* data, const char* tag)$/;"	f	file:
readNewUtf8String	Bits.h	/^INLINE char* readNewUtf8String(unsigned char const** ppSrc, size_t* pLength)$/;"	f
readSignedInt	reflect/Annotation.cpp	/^static s4 readSignedInt(const u1* ptr, int zwidth)$/;"	f	file:
readSignedLong	reflect/Annotation.cpp	/^static s8 readSignedLong(const u1* ptr, int zwidth)$/;"	f	file:
readUleb128	reflect/Annotation.cpp	/^static u4 readUleb128(const u1** pBuf)$/;"	f	file:
readUnsignedInt	reflect/Annotation.cpp	/^static u4 readUnsignedInt(const u1* ptr, int zwidth, bool fillOnRight)$/;"	f	file:
readUnsignedLong	reflect/Annotation.cpp	/^static u8 readUnsignedLong(const u1* ptr, int zwidth, bool fillOnRight)$/;"	f	file:
readUtf8String	Bits.h	/^INLINE int readUtf8String(unsigned char const** ppSrc, char* buf, size_t bufLen)$/;"	f
ready	Debugger.h	/^    bool ready;$/;"	m	struct:DebugInvokeReq
reason	alloc/Heap.h	/^  const char *reason;$/;"	m	struct:GcSpec
receiveClientFd	jdwp/JdwpAdb.cpp	/^static int  receiveClientFd(JdwpNetState*  netState)$/;"	f	file:
receivedSIGUSR2	Globals.h	/^    bool receivedSIGUSR2;$/;"	m	struct:DvmJitGlobals
recordDFSPreOrder	compiler/SSATransformation.cpp	/^static void recordDFSPreOrder(CompilationUnit *cUnit, BasicBlock *block)$/;"	f	file:
recordSize	Profile.h	/^    size_t  recordSize;$/;"	m	struct:MethodTraceState
reduceExceptionClassList	reflect/Proxy.cpp	/^static void reduceExceptionClassList(ArrayObject* exceptionArray)$/;"	f	file:
reduceSignals	Globals.h	/^    bool        reduceSignals;$/;"	m	struct:DvmGlobals
refOffsets	oo/Object.h	/^    u4 refOffsets;$/;"	m	struct:ClassObject
refTypeId	jdwp/JdwpEvent.h	/^        RefTypeId   refTypeId;$/;"	m	struct:JdwpEventMod::__anon27
refTypeId	jdwp/JdwpEvent.h	/^        RefTypeId   refTypeId;$/;"	m	struct:JdwpEventMod::__anon31
refTypeId	jdwp/JdwpEvent.h	/^        RefTypeId   refTypeId;$/;"	m	struct:JdwpEventMod::__anon32
refTypeIdToClassObject	Debugger.cpp	/^static ClassObject* refTypeIdToClassObject(RefTypeId id)$/;"	f	file:
referenceClassFlags	alloc/MarkSweep.cpp	/^static int referenceClassFlags(const Object *obj)$/;"	f	file:
reg	compiler/codegen/arm/ArmLIR.h	/^    int reg;                    \/\/ Reg number$/;"	m	struct:RegisterInfo
reg	compiler/codegen/x86/X86LIR.h	/^    int reg;                    \/\/ Reg number$/;"	m	struct:RegisterInfo
regClassMatches	compiler/codegen/RallocUtil.cpp	/^static bool regClassMatches(int regClass, int reg)$/;"	f	file:
regLocation	compiler/CompilerIR.h	/^    RegLocation *regLocation;$/;"	m	struct:CompilationUnit
regPool	compiler/CompilerIR.h	/^    struct RegisterPool *regPool;$/;"	m	struct:CompilationUnit	typeref:struct:CompilationUnit::RegisterPool
regTypeFromClass	analysis/CodeVerify.cpp	/^static inline RegType regTypeFromClass(ClassObject* clazz) {$/;"	f	file:
regTypeFromUninitIndex	analysis/CodeVerify.cpp	/^static RegType regTypeFromUninitIndex(int uidx) {$/;"	f	file:
regTypeInitializedReferenceToClass	analysis/CodeVerify.cpp	/^static ClassObject* regTypeInitializedReferenceToClass(RegType type)$/;"	f	file:
regTypeIsReference	analysis/CodeVerify.cpp	/^static inline bool regTypeIsReference(RegType type) {$/;"	f	file:
regTypeIsUninitReference	analysis/CodeVerify.cpp	/^static inline bool regTypeIsUninitReference(RegType type) {$/;"	f	file:
regTypeReferenceToClass	analysis/CodeVerify.cpp	/^static ClassObject* regTypeReferenceToClass(RegType type,$/;"	f	file:
regTypeToUninitIndex	analysis/CodeVerify.cpp	/^static inline int regTypeToUninitIndex(RegType type) {$/;"	f	file:
regTypes	analysis/CodeVerify.h	/^    RegType*        regTypes;$/;"	m	struct:RegisterLine
regWidth	analysis/RegisterMap.h	/^    u1      regWidth;       \/* bytes per register line, 1+ *\/$/;"	m	struct:RegisterMap
registerLines	analysis/CodeVerify.cpp	/^    RegisterLine* registerLines;$/;"	m	struct:RegisterTable	file:
registerLines	analysis/CodeVerify.h	/^    RegisterLine*   registerLines;$/;"	m	struct:VerifierData
registerMap	oo/Object.h	/^    const RegisterMap* registerMap;$/;"	m	struct:Method
registerMapMode	Globals.h	/^    RegisterMapMode     registerMapMode;$/;"	m	struct:DvmGlobals
registerMapStats	Globals.h	/^    void*       registerMapStats;$/;"	m	struct:DvmGlobals
registerMethod	shadowlib/ReAgent.cpp	/^jshort registerMethod$/;"	f
registerNativeMethods	shadowlib/ReAgent.cpp	/^static int registerNativeMethods(JNIEnv* env, const char* className,$/;"	f	file:
registerObject	Debugger.cpp	/^static ObjectId registerObject(const Object* obj, RegistryType type, bool reg)$/;"	f	file:
registerShadowNatives	shadowlib/ReAgent.cpp	/^int registerShadowNatives(JNIEnv *env){$/;"	f
registerSpace	interp/Jit.h	/^    int* registerSpace;         \/* copy of register state *\/$/;"	m	struct:ShadowSpace
registerSpaceSize	interp/Jit.h	/^    int registerSpaceSize;      \/* current size of register space *\/$/;"	m	struct:ShadowSpace
registerSystemNatives	Init.cpp	/^static bool registerSystemNatives(JNIEnv* pEnv)$/;"	f	file:
registersSize	oo/Object.h	/^    u2              registersSize;  \/* ins + locals *\/$/;"	m	struct:Method
registryCompare	Debugger.cpp	/^static int registryCompare(const void* obj1, const void* obj2)$/;"	f	file:
registryHash	Debugger.cpp	/^static inline u4 registryHash(u4 val)$/;"	f	file:
relaxBranchMasks	compiler/codegen/arm/CodegenCommon.cpp	/^static void relaxBranchMasks(ArmLIR *lir)$/;"	f	file:
releaseGuardedPACopy	CheckJni.cpp	/^static void* releaseGuardedPACopy(JNIEnv* env, jarray jarr, void* dataBuf, int mode) {$/;"	f	file:
releasePagesInRange	alloc/HeapSource.cpp	/^static void releasePagesInRange(void *start, void *end, void *nbytes)$/;"	f	file:
releaseThreadId	Thread.cpp	/^static void releaseThreadId(Thread* thread)$/;"	f	file:
remoteAddr	jdwp/JdwpSocket.cpp	/^    struct in_addr remoteAddr;$/;"	m	struct:JdwpNetState	typeref:struct:JdwpNetState::in_addr	file:
remotePort	jdwp/JdwpSocket.cpp	/^    unsigned short remotePort;$/;"	m	struct:JdwpNetState	file:
remove	IndirectRefTable.cpp	/^bool IndirectRefTable::remove(u4 cookie, IndirectRef iref)$/;"	f	class:IndirectRefTable
removeClassFromHash	oo/Class.cpp	/^static void removeClassFromHash(ClassObject* clazz)$/;"	f	file:
replaceFailingInstruction	analysis/CodeVerify.cpp	/^static bool replaceFailingInstruction(const Method* meth, InsnFlags* insnFlags,$/;"	f	file:
requestId	jdwp/JdwpEvent.h	/^    u4 requestId;      \/* serial#, reported to debugger *\/$/;"	m	struct:JdwpEvent
requestSerial	jdwp/JdwpPriv.h	/^    u4              requestSerial;$/;"	m	struct:JdwpState
requestingThread	compiler/Compiler.h	/^    Thread *requestingThread;   \/\/ For debugging purpose$/;"	m	struct:JitTranslationInfo
reset	test/TestIndirectRefTable.cpp	/^    void reset() {$/;"	f	class:Stopwatch
resetBlockEdges	compiler/Loop.cpp	/^void resetBlockEdges(BasicBlock *bb)$/;"	f
resetCodeCache	compiler/Compiler.cpp	/^static void resetCodeCache(void)$/;"	f	file:
resetCpuClockBase	Profile.cpp	/^static void resetCpuClockBase()$/;"	f	file:
resetProfileCount	compiler/codegen/arm/Assemble.cpp	/^static inline void resetProfileCount(const JitEntry *entry)$/;"	f	file:
resizeHash	Hash.cpp	/^static bool resizeHash(HashTable* pHashTable, int newSize)$/;"	f	file:
resolveAmbiguousMethod	reflect/Annotation.cpp	/^static Method* resolveAmbiguousMethod(const ClassObject* referrer, u4 methodIdx)$/;"	f	file:
result	compiler/Compiler.h	/^    JitTranslationInfo result;$/;"	m	struct:CompilerWorkOrder
resultTag	Debugger.h	/^    u1 resultTag;$/;"	m	struct:DebugInvokeReq
resultValue	Debugger.h	/^    JValue resultValue;$/;"	m	struct:DebugInvokeReq
returnAddr	interp/Stack.h	/^    const u2* returnAddr;$/;"	m	struct:StackSaveArea
returnCString	native/dalvik_system_VMRuntime.cpp	/^static void returnCString(JValue* pResult, const char* s)$/;"	f	file:
returnDiff	compiler/template/armv5te/TEMPLATE_STRING_COMPARETO.S	/^returnDiff:$/;"	l
returnDiff	compiler/template/out/CompilerTemplateAsm-armv5te-vfp.S	/^returnDiff:$/;"	l
returnDiff	compiler/template/out/CompilerTemplateAsm-armv5te.S	/^returnDiff:$/;"	l
returnDiff	compiler/template/out/CompilerTemplateAsm-armv7-a-neon.S	/^returnDiff:$/;"	l
returnDiff	compiler/template/out/CompilerTemplateAsm-armv7-a.S	/^returnDiff:$/;"	l
returnFromMethod	mterp/c/opcommon.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-allstubs.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-armv5te-vfp.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-armv5te.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-armv7-a-neon.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-armv7-a.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-portable.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-x86-atom.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnFromMethod	mterp/out/InterpC-x86.cpp	/^GOTO_TARGET_DECL(returnFromMethod);$/;"	v
returnOp	Globals.h	/^    int                returnOp;$/;"	m	struct:DvmJitGlobals
returnTypesAreCompatible	reflect/Proxy.cpp	/^static bool returnTypesAreCompatible(Method* subMethod, Method* baseMethod)$/;"	f	file:
retval	interp/InterpState.h	/^    JValue          retval;$/;"	m	struct:InterpSaveState
retval	interp/Jit.h	/^    JValue retval;$/;"	m	struct:ShadowSpace
retval	mterp/cstubs/enddefs.cpp	3;"	d	file:
retval	mterp/cstubs/stubdefs.cpp	25;"	d	file:
retval	mterp/out/InterpC-allstubs.cpp	395;"	d	file:
retval	mterp/out/InterpC-allstubs.cpp	4051;"	d	file:
retval	mterp/out/InterpC-armv5te-vfp.cpp	1158;"	d	file:
retval	mterp/out/InterpC-armv5te-vfp.cpp	395;"	d	file:
retval	mterp/out/InterpC-armv5te.cpp	1158;"	d	file:
retval	mterp/out/InterpC-armv5te.cpp	395;"	d	file:
retval	mterp/out/InterpC-armv7-a-neon.cpp	1158;"	d	file:
retval	mterp/out/InterpC-armv7-a-neon.cpp	395;"	d	file:
retval	mterp/out/InterpC-armv7-a.cpp	1158;"	d	file:
retval	mterp/out/InterpC-armv7-a.cpp	395;"	d	file:
retval	mterp/out/InterpC-x86-atom.cpp	2290;"	d	file:
retval	mterp/out/InterpC-x86-atom.cpp	395;"	d	file:
retval	mterp/out/InterpC-x86.cpp	2232;"	d	file:
retval	mterp/out/InterpC-x86.cpp	395;"	d	file:
rewriteDex	analysis/DexPrepare.cpp	/^static bool rewriteDex(u1* addr, int len, bool doVerify, bool doOpt,$/;"	f	file:
rewriteExecuteInline	analysis/Optimize.cpp	/^static bool rewriteExecuteInline(Method* method, u2* insns,$/;"	f	file:
rewriteExecuteInlineRange	analysis/Optimize.cpp	/^static bool rewriteExecuteInlineRange(Method* method, u2* insns,$/;"	f	file:
rewriteInstField	analysis/Optimize.cpp	/^static void rewriteInstField(Method* method, u2* insns, Opcode quickOpc,$/;"	f	file:
rewriteInvokeObjectInit	analysis/Optimize.cpp	/^static bool rewriteInvokeObjectInit(Method* method, u2* insns)$/;"	f	file:
rewriteReturnVoid	analysis/Optimize.cpp	/^static void rewriteReturnVoid(Method* method, u2* insns)$/;"	f	file:
rewriteStaticField	analysis/Optimize.cpp	/^static void rewriteStaticField(Method* method, u2* insns, Opcode volatileOpc)$/;"	f	file:
rewriteStaticField0	analysis/Optimize.cpp	/^static void rewriteStaticField0(Method* method, u2* insns, Opcode volatileOpc,$/;"	f	file:
rewriteVirtualInvoke	analysis/Optimize.cpp	/^static void rewriteVirtualInvoke(Method* method, u2* insns, Opcode newOpc)$/;"	f	file:
room	alloc/Copying.cpp	/^static void room(size_t *alloc, size_t *avail, size_t *total)$/;"	f	file:
rootMarkObjectVisitor	alloc/MarkSweep.cpp	/^static void rootMarkObjectVisitor(void *addr, u4 thread, RootType type,$/;"	f	file:
rootReMarkObjectVisitor	alloc/MarkSweep.cpp	/^static void rootReMarkObjectVisitor(void *addr, u4 thread, RootType type,$/;"	f	file:
run	jdwp/JdwpPriv.h	/^    bool            run;$/;"	m	struct:JdwpState
runEnd	interp/InterpState.h	/^    unsigned runEnd:1;       \/\/ Run ends with last byte code$/;"	m	struct:JitCodeDesc
run_xor	alloc/TEST/HeapBitmapTest/main.c	/^run_xor(ssize_t offset, size_t step)$/;"	f
runningInAndroidFramework	Globals.h	/^    bool runningInAndroidFramework;$/;"	m	struct:DvmJitGlobals
running_oid	shadowlib/ReProtocol.h	/^		Map<thread_id_type, ordering_id_type> running_oid;$/;"	m	class:ReProtocol
s	Common.h	/^    s2      s;$/;"	m	union:JValue
s1	Common.h	/^typedef int8_t              s1;$/;"	t
s2	Common.h	/^typedef int16_t             s2;$/;"	t
s4	Common.h	/^typedef int32_t             s4;$/;"	t
s4FromSwitchData	interp/Interp.cpp	/^static inline s4 s4FromSwitchData(const void* switchData) {$/;"	f	file:
s8	Common.h	/^typedef int64_t             s8;$/;"	t
sReg	compiler/codegen/arm/ArmLIR.h	/^    int sReg;                   \/\/ Name of live value$/;"	m	struct:RegisterInfo
sReg	compiler/codegen/x86/X86LIR.h	/^    int sReg;                   \/\/ Name of live value$/;"	m	struct:RegisterInfo
sReg0	mterp/out/InterpAsm-x86-atom.S	/^#define sReg0    4(%ebp)$/;"	d
sReg0	mterp/out/InterpAsm-x86.S	/^#define sReg0 LOCAL0_OFFSET(%ebp)$/;"	d
sReg0	mterp/x86-atom/header.S	/^#define sReg0    4(%ebp)$/;"	d
sReg0	mterp/x86/header.S	/^#define sReg0 LOCAL0_OFFSET(%ebp)$/;"	d
sReg1	mterp/out/InterpAsm-x86-atom.S	/^#define sReg1    8(%ebp)$/;"	d
sReg1	mterp/out/InterpAsm-x86.S	/^#define sReg1 LOCAL1_OFFSET(%ebp)$/;"	d
sReg1	mterp/x86-atom/header.S	/^#define sReg1    8(%ebp)$/;"	d
sReg1	mterp/x86/header.S	/^#define sReg1 LOCAL1_OFFSET(%ebp)$/;"	d
sReg2	mterp/out/InterpAsm-x86-atom.S	/^#define sReg2   12(%ebp)$/;"	d
sReg2	mterp/out/InterpAsm-x86.S	/^#define sReg2 LOCAL2_OFFSET(%ebp)$/;"	d
sReg2	mterp/x86-atom/header.S	/^#define sReg2   12(%ebp)$/;"	d
sReg2	mterp/x86/header.S	/^#define sReg2 LOCAL2_OFFSET(%ebp)$/;"	d
sReg3	mterp/out/InterpAsm-x86-atom.S	/^#define sReg3   16(%ebp)$/;"	d
sReg3	mterp/x86-atom/header.S	/^#define sReg3   16(%ebp)$/;"	d
sRegLow	compiler/CompilerIR.h	/^    s2 sRegLow;         \/\/ SSA name for low Dalvik word$/;"	m	struct:RegLocation
saneDirName	analysis/DexPrepare.cpp	/^static std::string saneDirName(const std::string& path) {$/;"	f	file:
saveFloat	arch/x86/Call386ABI.S	/^saveFloat:$/;"	l
save_callsiteinfo	mterp/armv5te/footer.S	/^save_callsiteinfo:$/;"	l
save_callsiteinfo	mterp/out/InterpAsm-armv5te-vfp.S	/^save_callsiteinfo:$/;"	l
save_callsiteinfo	mterp/out/InterpAsm-armv5te.S	/^save_callsiteinfo:$/;"	l
save_callsiteinfo	mterp/out/InterpAsm-armv7-a-neon.S	/^save_callsiteinfo:$/;"	l
save_callsiteinfo	mterp/out/InterpAsm-armv7-a.S	/^save_callsiteinfo:$/;"	l
savedLine	analysis/CodeVerify.cpp	/^    RegisterLine savedLine;$/;"	m	struct:RegisterTable	file:
savedPc	interp/Stack.h	/^    const u2*   savedPc;$/;"	m	struct:StackSaveArea
sawZygote	alloc/HeapSource.cpp	/^    bool sawZygote;$/;"	m	struct:HeapSource	file:
scanArrayObject	alloc/MarkSweep.cpp	/^static void scanArrayObject(const Object *obj, GcMarkContext *ctx)$/;"	f	file:
scanBitmapCallback	alloc/MarkSweep.cpp	/^static void scanBitmapCallback(Object *obj, void *finger, void *arg)$/;"	f	file:
scanClassObject	alloc/MarkSweep.cpp	/^static void scanClassObject(const Object *obj, GcMarkContext *ctx)$/;"	f	file:
scanDataObject	alloc/MarkSweep.cpp	/^static void scanDataObject(const Object *obj, GcMarkContext *ctx)$/;"	f	file:
scanDirtyCards	alloc/MarkSweep.cpp	/^const u1 *scanDirtyCards(const u1 *start, const u1 *end,$/;"	f
scanFields	alloc/MarkSweep.cpp	/^static void scanFields(const Object *obj, GcMarkContext *ctx)$/;"	f	file:
scanGrayObjects	alloc/MarkSweep.cpp	/^static void scanGrayObjects(GcMarkContext *ctx)$/;"	f	file:
scanInterfaces	alloc/MarkSweep.cpp	/^static void scanInterfaces(const ClassObject *clazz, GcMarkContext *ctx)$/;"	f	file:
scanLiteralPool	compiler/codegen/arm/CodegenCommon.cpp	/^static ArmLIR *scanLiteralPool(LIR *dataTarget, int value, unsigned int delta)$/;"	f	file:
scanObject	alloc/MarkSweep.cpp	/^static void scanObject(const Object *obj, GcMarkContext *ctx)$/;"	f	file:
scanStaticFields	alloc/MarkSweep.cpp	/^static void scanStaticFields(const ClassObject *clazz, GcMarkContext *ctx)$/;"	f	file:
scanSuspendPolicy	jdwp/JdwpEvent.cpp	/^static JdwpSuspendPolicy scanSuspendPolicy(JdwpEvent** matchList,$/;"	f	file:
scanTryCatchBlocks	analysis/DexVerify.cpp	/^static bool scanTryCatchBlocks(const Method* meth, InsnFlags* insnFlags)$/;"	f	file:
scavengeArrayObject	alloc/Copying.cpp	/^static size_t scavengeArrayObject(ArrayObject *array)$/;"	f	file:
scavengeBlock	alloc/Copying.cpp	/^static void scavengeBlock(HeapSource *heapSource, size_t block)$/;"	f	file:
scavengeBlockQueue	alloc/Copying.cpp	/^static void scavengeBlockQueue()$/;"	f	file:
scavengeClassObject	alloc/Copying.cpp	/^static void scavengeClassObject(ClassObject *obj)$/;"	f	file:
scavengeDataObject	alloc/Copying.cpp	/^static void scavengeDataObject(Object *obj)$/;"	f	file:
scavengeInternedStrings	alloc/Copying.cpp	/^static void scavengeInternedStrings()$/;"	f	file:
scavengeLargeHeapRefTable	alloc/Copying.cpp	/^static void scavengeLargeHeapRefTable(LargeHeapRefTable *table)$/;"	f	file:
scavengeObject	alloc/Copying.cpp	/^static void scavengeObject(Object *obj)$/;"	f	file:
scavengeReference	alloc/Copying.cpp	/^static void scavengeReference(Object **obj)$/;"	f	file:
scavengeReferenceObject	alloc/Copying.cpp	/^static void scavengeReferenceObject(Object *obj)$/;"	f	file:
scavengeThread	alloc/Copying.cpp	/^static void scavengeThread(Thread *thread)$/;"	f	file:
scavengeThreadList	alloc/Copying.cpp	/^static void scavengeThreadList()$/;"	f	file:
scavengeThreadStack	alloc/Copying.cpp	/^static void scavengeThreadStack(Thread *thread)$/;"	f	file:
searchAnnotationSet	reflect/Annotation.cpp	/^static const DexAnnotationItem* searchAnnotationSet(const ClassObject* clazz,$/;"	f	file:
searchBootPathForClass	oo/Class.cpp	/^static DvmDex* searchBootPathForClass(const char* descriptor,$/;"	f	file:
searchEncodedAnnotation	reflect/Annotation.cpp	/^static const u1* searchEncodedAnnotation(const ClassObject* clazz,$/;"	f	file:
seenAndClearedMatch	alloc/TEST/HeapBitmapTest/main.c	/^seenAndClearedMatch()$/;"	f
segmentState	IndirectRefTable.h	/^    IRTSegmentState segmentState;$/;"	m	struct:IndirectRefTable
self	CheckJni.cpp	/^    Thread* self() {$/;"	f	class:ScopedCheck
self	Jni.cpp	/^    inline Thread* self() {$/;"	f	class:ScopedJniThreadState
self	JniInternal.h	/^    Thread* self;$/;"	m	struct:JNIEnvExt
self	mterp/c/OP_MOVE_EXCEPTION.cpp	/^    dvmClearException(self);$/;"	v
self	mterp/cstubs/enddefs.cpp	8;"	d	file:
self	mterp/out/InterpC-allstubs.cpp	/^    dvmClearException(self);$/;"	v
self	mterp/out/InterpC-allstubs.cpp	4056;"	d	file:
self	mterp/out/InterpC-armv5te-vfp.cpp	1163;"	d	file:
self	mterp/out/InterpC-armv5te.cpp	1163;"	d	file:
self	mterp/out/InterpC-armv7-a-neon.cpp	1163;"	d	file:
self	mterp/out/InterpC-armv7-a.cpp	1163;"	d	file:
self	mterp/out/InterpC-x86-atom.cpp	2295;"	d	file:
self	mterp/out/InterpC-x86.cpp	2237;"	d	file:
selfVerificationBranchInsert	compiler/codegen/arm/CodegenDriver.cpp	/^static void selfVerificationBranchInsert(LIR *currentLIR, ArmOpcode opcode,$/;"	f	file:
selfVerificationBranchInsertPass	compiler/codegen/arm/CodegenDriver.cpp	/^static void selfVerificationBranchInsertPass(CompilationUnit *cUnit)$/;"	f	file:
selfVerificationDumpState	interp/Jit.cpp	/^static void selfVerificationDumpState(const u2* pc, Thread* self)$/;"	f	file:
selfVerificationDumpTrace	interp/Jit.cpp	/^static void selfVerificationDumpTrace(const u2* pc, Thread* self)$/;"	f	file:
selfVerificationLoad	compiler/codegen/arm/Assemble.cpp	/^static int selfVerificationLoad(int addr, int size)$/;"	f	file:
selfVerificationLoadDoubleword	compiler/codegen/arm/Assemble.cpp	/^static s8 selfVerificationLoadDoubleword(int addr)$/;"	f	file:
selfVerificationMemRegLoad	compiler/codegen/arm/Assemble.cpp	/^static int selfVerificationMemRegLoad(int* sp, int reg)$/;"	f	file:
selfVerificationMemRegLoadDouble	compiler/codegen/arm/Assemble.cpp	/^static s8 selfVerificationMemRegLoadDouble(int* sp, int reg)$/;"	f	file:
selfVerificationMemRegStore	compiler/codegen/arm/Assemble.cpp	/^static void selfVerificationMemRegStore(int* sp, int data, int reg)$/;"	f	file:
selfVerificationMemRegStoreDouble	compiler/codegen/arm/Assemble.cpp	/^static void selfVerificationMemRegStoreDouble(int* sp, s8 data, int reg)$/;"	f	file:
selfVerificationPrintRegisters	interp/Jit.cpp	/^static void selfVerificationPrintRegisters(int* addr, int* addrRef,$/;"	f	file:
selfVerificationPuntOps	compiler/codegen/arm/CodegenDriver.cpp	/^static bool selfVerificationPuntOps(MIR *mir)$/;"	f	file:
selfVerificationSpin	Globals.h	/^    volatile bool selfVerificationSpin;$/;"	m	struct:DvmJitGlobals
selfVerificationSpinLoop	interp/Jit.cpp	/^static void selfVerificationSpinLoop(ShadowSpace *shadowSpace)$/;"	f	file:
selfVerificationState	interp/Jit.h	/^    SelfVerificationState selfVerificationState;  \/* current SV running state *\/$/;"	m	struct:ShadowSpace
selfVerificationStore	compiler/codegen/arm/Assemble.cpp	/^static void selfVerificationStore(int addr, int data, int size)$/;"	f	file:
selfVerificationStoreDoubleword	compiler/codegen/arm/Assemble.cpp	/^static void selfVerificationStoreDoubleword(int addr, s8 double_data)$/;"	f	file:
sendBoolean	shadowlib/ReAgent.cpp	/^void sendBoolean$/;"	f
sendBuf	shadowlib/ReProtocol.h	/^		Buffer *sendBuf;$/;"	m	class:ReProtocol
sendBufferedRequest	jdwp/JdwpAdb.cpp	/^static bool sendBufferedRequest(JdwpState* state, const struct iovec* iov,$/;"	f	file:
sendBufferedRequest	jdwp/JdwpPriv.h	/^    bool (*sendBufferedRequest)(struct JdwpState* state,$/;"	m	struct:JdwpTransport
sendBufferedRequest	jdwp/JdwpSocket.cpp	/^static bool sendBufferedRequest(JdwpState* state, const struct iovec* iov,$/;"	f	file:
sendByte	shadowlib/ReAgent.cpp	/^void sendByte$/;"	f
sendChar	shadowlib/ReAgent.cpp	/^void sendChar$/;"	f
sendDouble	shadowlib/ReAgent.cpp	/^void sendDouble$/;"	f
sendFloat	shadowlib/ReAgent.cpp	/^void sendFloat$/;"	f
sendInt	shadowlib/ReAgent.cpp	/^void sendInt$/;"	f
sendLong	shadowlib/ReAgent.cpp	/^void sendLong$/;"	f
sendObject	shadowlib/ReAgent.cpp	/^void sendObject$/;"	f
sendObjectPlusData	shadowlib/ReAgent.cpp	/^void sendObjectPlusData$/;"	f
sendRequest	jdwp/JdwpAdb.cpp	/^static bool sendRequest(JdwpState* state, ExpandBuf* pReq)$/;"	f	file:
sendRequest	jdwp/JdwpPriv.h	/^    bool (*sendRequest)(struct JdwpState* state, ExpandBuf* pReq);$/;"	m	struct:JdwpTransport
sendRequest	jdwp/JdwpSocket.cpp	/^static bool sendRequest(JdwpState* state, ExpandBuf* pReq)$/;"	f	file:
sendShort	shadowlib/ReAgent.cpp	/^void sendShort$/;"	f
send_once	shadowlib/ReAgent.cpp	/^void send_once(){$/;"	f
send_thread_loop	shadowlib/ReAgent.cpp	/^static void * send_thread_loop(void * obj) {$/;"	f	file:
seqNum	compiler/CompilerIR.h	/^    int seqNum;$/;"	m	struct:MIR
sequenceNumber	compiler/CompilerIR.h	/^    int sequenceNumber;$/;"	m	struct:CompilationUnit
serial	IndirectRefTable.h	/^    u4      serial;     \/* slot serial number *\/$/;"	m	struct:IndirectRefSlot
serialLock	jdwp/JdwpPriv.h	/^    pthread_mutex_t serialLock;$/;"	m	struct:JdwpState
serialNumber	compiler/Compiler.h	/^    u4 serialNumber;                    \/* Serial # (for verification only) *\/$/;"	m	struct:ICPatchWorkOrder
serialNumber	oo/Object.h	/^    u4              serialNumber;$/;"	m	struct:ClassObject
server	jdwp/Jdwp.h	/^    bool        server;$/;"	m	struct:JdwpStartupParams
serverReplySent	shadowlib/ReAgent.cpp	/^int serverReplySent(int transaction_id, int from_pid, int from_tid, bool isOneWay,int &t_flag){$/;"	f
serverTransactionRecv	shadowlib/ReAgent.cpp	/^int serverTransactionRecv(int transaction_id, int from_pid, int from_tid, bool isOneWay){$/;"	f
set	Debugger.h	/^    u1 set[1];$/;"	m	struct:AddressSet
set1	Bits.h	/^INLINE void set1(u1* buf, u1 val)$/;"	f
set2BE	Bits.h	/^INLINE void set2BE(u1* buf, u2 val)$/;"	f
set2LE	Bits.h	/^INLINE void set2LE(u1* buf, u2 val)$/;"	f
set4BE	Bits.h	/^INLINE void set4BE(u1* buf, u4 val)$/;"	f
set4LE	Bits.h	/^INLINE void set4LE(u1* buf, u4 val)$/;"	f
set8BE	Bits.h	/^INLINE void set8BE(u1* buf, u8 val)$/;"	f
set8LE	Bits.h	/^INLINE void set8LE(u1* buf, u8 val)$/;"	f
setAndReturnMarkBit	alloc/MarkSweep.cpp	/^static long setAndReturnMarkBit(GcMarkContext *ctx, const void *obj)$/;"	f	file:
setAsmAltStub	mterp/gen-mterp.py	/^def setAsmAltStub(tokens):$/;"	f
setAsmStub	compiler/template/gen-template.py	/^def setAsmStub(tokens):$/;"	f
setAsmStub	mterp/gen-mterp.py	/^def setAsmStub(tokens):$/;"	f
setCapabilities	native/dalvik_system_Zygote.cpp	/^static int setCapabilities(int64_t permitted, int64_t effective)$/;"	f	file:
setCommandLineDefaults	Init.cpp	/^static void setCommandLineDefaults()$/;"	f	file:
setConstant	compiler/Dataflow.cpp	/^static void setConstant(CompilationUnit *cUnit, int ssaReg, int value)$/;"	f	file:
setCount	interp/Interp.cpp	/^    int         setCount;               \/* #of times this breakpoint was set *\/$/;"	m	struct:Breakpoint	file:
setFPSCR	mterp/armv5te/footer.S	/^setFPSCR:$/;"	l
setFPSCR	mterp/out/InterpAsm-armv5te-vfp.S	/^setFPSCR:$/;"	l
setFPSCR	mterp/out/InterpAsm-armv5te.S	/^setFPSCR:$/;"	l
setFPSCR	mterp/out/InterpAsm-armv7-a-neon.S	/^setFPSCR:$/;"	l
setFPSCR	mterp/out/InterpAsm-armv7-a.S	/^setFPSCR:$/;"	l
setFieldValue	native/java_lang_reflect_Field.cpp	/^static void setFieldValue(Field* field, Object* obj, const JValue* value)$/;"	f	file:
setForward	alloc/Copying.cpp	/^static void setForward(const void *toObj, void *fromObj)$/;"	f	file:
setHandlerSize	compiler/template/gen-template.py	/^def setHandlerSize(tokens):$/;"	f
setHandlerSize	mterp/gen-mterp.py	/^def setHandlerSize(tokens):$/;"	f
setHandlerStyle	mterp/gen-mterp.py	/^def setHandlerStyle(tokens):$/;"	f
setIdealFootprint	alloc/HeapSource.cpp	/^static void setIdealFootprint(size_t max)$/;"	f	file:
setInstFieldValue	native/java_lang_reflect_Field.cpp	/^static void setInstFieldValue(InstField* ifield, Object* obj,$/;"	f	file:
setMemRefType	compiler/codegen/arm/CodegenCommon.cpp	/^static void setMemRefType(ArmLIR *lir, bool isLoad, int memType)$/;"	f	file:
setNoDelay	jdwp/JdwpSocket.cpp	/^static int setNoDelay(int fd)$/;"	f	file:
setPredecessors	analysis/VfyBasicBlock.cpp	/^static bool setPredecessors(VerifierData* vdata, VfyBasicBlock* curBlock,$/;"	f	file:
setRegisterType	analysis/CodeVerify.cpp	/^static void setRegisterType(RegisterLine* registerLine, u4 vdst,$/;"	f	file:
setResultRegisterType	analysis/CodeVerify.cpp	/^static void setResultRegisterType(RegisterLine* registerLine,$/;"	f	file:
setSignalHandler	native/dalvik_system_Zygote.cpp	/^static void setSignalHandler()$/;"	f	file:
setSize	Debugger.h	/^    u4 setSize;$/;"	m	struct:AddressSet
setSoftLimit	alloc/HeapSource.cpp	/^static void setSoftLimit(HeapSource *hs, size_t softLimit)$/;"	f	file:
setStaticFieldValue	native/java_lang_reflect_Field.cpp	/^static void setStaticFieldValue(StaticField* sfield, const JValue* value)$/;"	f	file:
setThreadName	Thread.cpp	/^static void setThreadName(const char *threadName)$/;"	f	file:
setThreadSelf	Thread.cpp	/^static void setThreadSelf(Thread* thread)$/;"	f	file:
setTypesFromSignature	analysis/CodeVerify.cpp	/^static bool setTypesFromSignature(const Method* meth, RegType* regTypes,$/;"	f	file:
setUninitInstance	analysis/CodeVerify.cpp	/^static int setUninitInstance(UninitInstanceMap* uninitMap, int addr,$/;"	f	file:
setUtf8String	Bits.h	/^INLINE void setUtf8String(u1* buf, const u1* str)$/;"	f
set_bits	shadowlib/Netref.h	/^static inline void set_bits(uint64_t * to, uint64_t bits,$/;"	f
set_non_blocking	shadowlib/Socket.cpp	/^void Socket::set_non_blocking ( const bool b )$/;"	f	class:Socket
setgroupsIntarray	native/dalvik_system_Zygote.cpp	/^static int setgroupsIntarray(ArrayObject* gidArray)$/;"	f	file:
setrlimitsFromArray	native/dalvik_system_Zygote.cpp	/^static int setrlimitsFromArray(ArrayObject* rlimits)$/;"	f	file:
setupLoopEntryBlock	compiler/codegen/arm/CodegenDriver.cpp	/^static void setupLoopEntryBlock(CompilationUnit *cUnit, BasicBlock *entry,$/;"	f	file:
setupRegMask	compiler/codegen/arm/CodegenCommon.cpp	/^static inline void setupRegMask(u8 *mask, int reg)$/;"	f	file:
setupResourceMasks	compiler/codegen/arm/CodegenCommon.cpp	/^static void setupResourceMasks(ArmLIR *lir)$/;"	f	file:
sfieldCount	oo/Object.h	/^    int             sfieldCount;$/;"	m	struct:ClassObject
sfields	oo/Object.h	/^    StaticField     sfields[0]; \/* MUST be last item *\/$/;"	m	struct:ClassObject
shadowFP	interp/Jit.h	/^    void* shadowFP;       \/* pointer to fp in shadow space *\/$/;"	m	struct:ShadowSpace
shadowSpace	Thread.h	/^    struct ShadowSpace* shadowSpace;$/;"	m	struct:Thread	typeref:struct:Thread::ShadowSpace
shiftNames	compiler/codegen/arm/ArchUtility.cpp	/^static const char *shiftNames[4] = {$/;"	v	file:
shorty	oo/Object.h	/^    const char*     shorty;$/;"	m	struct:Method
shouldTrace	Jni.cpp	/^static bool shouldTrace(Method* method) {$/;"	f	file:
shouldTrace	oo/Object.h	/^    bool shouldTrace;$/;"	m	struct:Method
showJdwpHelp	Init.cpp	/^static void showJdwpHelp()$/;"	f	file:
showLocation	CheckJni.cpp	/^    void showLocation() {$/;"	f	class:ScopedCheck	file:
showVersion	Init.cpp	/^static void showVersion()$/;"	f	file:
shutdown	jdwp/JdwpPriv.h	/^    void (*shutdown)(struct JdwpState* state);$/;"	m	struct:JdwpTransport
shuttingDown	jdwp/JdwpAdb.cpp	/^    bool                shuttingDown;$/;"	m	struct:JdwpNetState	file:
sigchldHandler	native/dalvik_system_Zygote.cpp	/^static void sigchldHandler(int s)$/;"	f	file:
signalCatcherHandle	Globals.h	/^    pthread_t   signalCatcherHandle;$/;"	m	struct:DvmGlobals
signalCatcherThreadStart	SignalCatcher.cpp	/^static void* signalCatcherThreadStart(void* arg)$/;"	f	file:
signature	Native.h	/^    const char* signature;$/;"	m	struct:DalvikNativeMethod
signature	oo/Object.h	/^    const char*     signature;      \/* e.g. "I", "[C", "Landroid\/os\/Debug;" *\/$/;"	m	struct:Field
signatureBreakpoint	Globals.h	/^    u4 *signatureBreakpoint;            \/\/ Signature content$/;"	m	struct:DvmJitGlobals
signatureBreakpointSize	Globals.h	/^    u4 signatureBreakpointSize;         \/\/ # of words$/;"	m	struct:DvmJitGlobals
signatureToBasicTypeAndSize	hprof/HprofHeap.cpp	/^static hprof_basic_type signatureToBasicTypeAndSize(const char *sig,$/;"	f	file:
singleStepCount	Thread.h	/^    int         singleStepCount;$/;"	m	struct:Thread
size	AllocTracker.cpp	/^    u4              size;       \/* total size requested *\/$/;"	m	struct:AllocRecord	file:
size	Debugger.h	/^    JdwpStepSize size;$/;"	m	struct:StepControl
size	analysis/RegisterMap.h	/^    size_t      size;$/;"	m	struct:RegisterMapBuilder
size	compiler/CompilerUtility.h	/^    size_t size;$/;"	m	struct:GrowableListIterator
size	compiler/codegen/arm/ArmLIR.h	/^        unsigned int size:3;    \/\/ bytes (2 for thumb, 2\/4 for thumb2)$/;"	m	struct:ArmLIR::__anon40
size	compiler/codegen/arm/ArmLIR.h	/^    int size;$/;"	m	struct:ArmEncodingMap
size	jdwp/JdwpEvent.h	/^        int         size;           \/* JdwpStepSize *\/$/;"	m	struct:JdwpEventMod::__anon33
size	reflect/Reflect.h	/^    u4 size;                             \/* number of elements in instance *\/$/;"	m	struct:EncodedArrayIterator
skeleton	compiler/codegen/arm/ArmLIR.h	/^    u4 skeleton;$/;"	m	struct:ArmEncodingMap
skipAnnotationValue	reflect/Annotation.cpp	/^static bool skipAnnotationValue(const ClassObject* clazz, const u1** pPtr)$/;"	f	file:
skipEncodedAnnotation	reflect/Annotation.cpp	/^static bool skipEncodedAnnotation(const ClassObject* clazz, const u1** pPtr)$/;"	f	file:
skipNullsAndTombstones	IndirectRefTable.h	/^    void skipNullsAndTombstones() {$/;"	f	class:iref_iterator
skipUtf8String	Bits.h	/^INLINE void skipUtf8String(unsigned char const** ppSrc)$/;"	f
snapIdealFootprint	alloc/HeapSource.cpp	/^static void snapIdealFootprint()$/;"	f	file:
sock	shadowlib/ReAgent.cpp	/^Socket *sock = NULL;$/;"	v
socketLock	jdwp/JdwpPriv.h	/^    pthread_mutex_t socketLock;     \/* socket synchronization *\/$/;"	m	class:JdwpNetStateBase
socketTransport	jdwp/JdwpAdb.cpp	/^static const JdwpTransport socketTransport = {$/;"	v	file:
socketTransport	jdwp/JdwpSocket.cpp	/^static const JdwpTransport socketTransport = {$/;"	v	file:
softLimit	alloc/HeapSource.cpp	/^    size_t softLimit;$/;"	m	struct:HeapSource	file:
softReferences	alloc/HeapInternal.h	/^    Object *softReferences;$/;"	m	struct:GcHeap
sortTraceProfileCount	compiler/codegen/arm/Assemble.cpp	/^static int sortTraceProfileCount(const void *entry1, const void *entry2)$/;"	f	file:
sourceFile	oo/Object.h	/^    const char*     sourceFile;$/;"	m	struct:ClassObject
splitBlock	compiler/Frontend.cpp	/^static BasicBlock *splitBlock(CompilationUnit *cUnit,$/;"	f	file:
ssaBIV	compiler/Loop.h	/^    int ssaBIV;                         \/\/ basic IV in SSA name$/;"	m	struct:LoopAnalysis
ssaReg	compiler/Dataflow.h	/^    int ssaReg;$/;"	m	struct:InductionVariableInfo
ssaRep	compiler/CompilerIR.h	/^    struct SSARepresentation *ssaRep;$/;"	m	struct:MIR	typeref:struct:MIR::SSARepresentation
ssaToDalvikMap	compiler/CompilerIR.h	/^    GrowableList *ssaToDalvikMap;$/;"	m	struct:CompilationUnit
stack	alloc/MarkSweep.h	/^    GcMarkStack stack;$/;"	m	struct:GcMarkContext
stackCrc	Thread.h	/^    u4          stackCrc;$/;"	m	struct:Thread
stackElem	AllocTracker.cpp	/^    } stackElem[kMaxAllocRecordStackDepth];$/;"	m	struct:AllocRecord	typeref:struct:AllocRecord::__anon9	file:
stackOverflowed	Thread.h	/^    bool        stackOverflowed;$/;"	m	struct:Thread
stackSize	Globals.h	/^    size_t      stackSize;$/;"	m	struct:DvmGlobals
stackTraceFile	Globals.h	/^    char*       stackTraceFile;     \/\/ for SIGQUIT-inspired output$/;"	m	struct:DvmGlobals
stackTraceSerialNumber	hprof/Hprof.h	/^    u4 stackTraceSerialNumber;$/;"	m	struct:hprof_context_t
stackTraceSerialNumber	hprof/HprofHeap.cpp	/^static int stackTraceSerialNumber(const void *obj)$/;"	f	file:
stagedClazz	compiler/Compiler.h	/^    const ClassObject *stagedClazz;   \/* possible next key for prediction *\/$/;"	m	struct:PredictedChainingCell
start	compiler/codegen/arm/ArmLIR.h	/^        int start; \/* start for kFmtBitBlt, 4-bit slice end for FP regs *\/$/;"	m	struct:ArmEncodingMap::__anon39
startOffset	compiler/CompilerIR.h	/^    unsigned int startOffset;$/;"	m	struct:BasicBlock
startOffset	interp/InterpState.h	/^    u2 startOffset;          \/\/ Starting offset for trace run$/;"	m	struct:JitCodeDesc
startPC	interp/Jit.h	/^    const u2* startPC;          \/* starting pc of jitted region *\/$/;"	m	struct:ShadowSpace
startSize	alloc/HeapSource.cpp	/^    size_t startSize;$/;"	m	struct:HeapSource	file:
startStopLock	Profile.h	/^    pthread_mutex_t startStopLock;$/;"	m	struct:MethodTraceState
startWhen	Profile.h	/^    u8      startWhen;$/;"	m	struct:MethodTraceState
start_	test/TestIndirectRefTable.cpp	/^    u8 start_;$/;"	m	class:Stopwatch	file:
startup	jdwp/JdwpAdb.cpp	/^static bool startup(struct JdwpState* state, const JdwpStartupParams* pParams)$/;"	f	file:
startup	jdwp/JdwpPriv.h	/^    bool (*startup)(struct JdwpState* state, const JdwpStartupParams* pParams);$/;"	m	struct:JdwpTransport
status	Thread.h	/^    volatile ThreadStatus status;$/;"	m	struct:Thread
status	oo/Object.h	/^    ClassStatus     status;$/;"	m	struct:ClassObject
stderrPipe	Globals.h	/^    int             stderrPipe[2];$/;"	m	struct:DvmGlobals
stdioConverterCond	Globals.h	/^    pthread_cond_t  stdioConverterCond;$/;"	m	struct:DvmGlobals
stdioConverterHandle	Globals.h	/^    pthread_t       stdioConverterHandle;$/;"	m	struct:DvmGlobals
stdioConverterLock	Globals.h	/^    pthread_mutex_t stdioConverterLock;$/;"	m	struct:DvmGlobals
stdioConverterReady	Globals.h	/^    bool            stdioConverterReady;$/;"	m	struct:DvmGlobals
stdioConverterThreadStart	StdioConverter.cpp	/^static void* stdioConverterThreadStart(void* arg)$/;"	f	file:
stdoutPipe	Globals.h	/^    int             stdoutPipe[2];$/;"	m	struct:DvmGlobals
step	jdwp/JdwpEvent.h	/^    } step;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon33
stepControl	Globals.h	/^    StepControl stepControl;$/;"	m	struct:DvmGlobals
stime	Misc.h	/^    unsigned long stime;    \/* number of jiffies scheduled in kernel mode *\/$/;"	m	struct:ProcStatData
storage	BitVector.h	/^    u4*     storage;$/;"	m	struct:BitVector
storage	jdwp/ExpandBuf.cpp	/^    u1*     storage;$/;"	m	struct:ExpandBuf	file:
storageSize	BitVector.h	/^    u4      storageSize;    \/* current size, in 32-bit words *\/$/;"	m	struct:BitVector
storeBaseDisp	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *storeBaseDisp(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseDisp	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *storeBaseDisp(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseDispBody	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *storeBaseDispBody(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseDispBody	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *storeBaseDispBody(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseDispWide	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *storeBaseDispWide(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseDispWide	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *storeBaseDispWide(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseIndexed	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *storeBaseIndexed(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeBaseIndexed	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *storeBaseIndexed(CompilationUnit *cUnit, int rBase,$/;"	f	file:
storeIntLE	Profile.cpp	/^static inline void storeIntLE(u1* buf, u4 val)$/;"	f	file:
storeLongLE	Profile.cpp	/^static inline void storeLongLE(u1* buf, u8 val)$/;"	f	file:
storeMultiple	compiler/codegen/arm/Thumb/Factory.cpp	/^static ArmLIR *storeMultiple(CompilationUnit *cUnit, int rBase, int rMask)$/;"	f	file:
storeMultiple	compiler/codegen/arm/Thumb2/Factory.cpp	/^static ArmLIR *storeMultiple(CompilationUnit *cUnit, int rBase, int rMask)$/;"	f	file:
storePair	compiler/codegen/arm/Thumb/Factory.cpp	/^static void storePair(CompilationUnit *cUnit, int base, int lowReg, int highReg)$/;"	f	file:
storePair	compiler/codegen/arm/Thumb2/Factory.cpp	/^static void storePair(CompilationUnit *cUnit, int base, int lowReg, int highReg)$/;"	f	file:
storeRetval	arch/x86/Call386ABI.S	/^storeRetval:$/;"	l
storeShortLE	Profile.cpp	/^static inline void storeShortLE(u1* buf, u2 val)$/;"	f	file:
storeValue	compiler/codegen/CodegenFactory.cpp	/^static void storeValue(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
storeValueWide	compiler/codegen/CodegenFactory.cpp	/^static void storeValueWide(CompilationUnit *cUnit, RegLocation rlDest,$/;"	f	file:
storeWordDisp	compiler/codegen/CodegenFactory.cpp	/^static TGT_LIR *storeWordDisp(CompilationUnit *cUnit, int rBase,$/;"	f	file:
strBadEntryPoint	mterp/armv5te/entry.S	/^strBadEntryPoint:$/;"	l
strBadEntryPoint	mterp/out/InterpAsm-armv5te-vfp.S	/^strBadEntryPoint:$/;"	l
strBadEntryPoint	mterp/out/InterpAsm-armv5te.S	/^strBadEntryPoint:$/;"	l
strBadEntryPoint	mterp/out/InterpAsm-armv7-a-neon.S	/^strBadEntryPoint:$/;"	l
strBadEntryPoint	mterp/out/InterpAsm-armv7-a.S	/^strBadEntryPoint:$/;"	l
strDivideByZero	mterp/armv5te/footer.S	/^strDivideByZero:$/;"	l
strDivideByZero	mterp/out/InterpAsm-armv5te-vfp.S	/^strDivideByZero:$/;"	l
strDivideByZero	mterp/out/InterpAsm-armv5te.S	/^strDivideByZero:$/;"	l
strDivideByZero	mterp/out/InterpAsm-armv7-a-neon.S	/^strDivideByZero:$/;"	l
strDivideByZero	mterp/out/InterpAsm-armv7-a.S	/^strDivideByZero:$/;"	l
strExceptionNotCaughtLocally	mterp/armv5te/footer.S	/^strExceptionNotCaughtLocally:$/;"	l
strExceptionNotCaughtLocally	mterp/out/InterpAsm-armv5te-vfp.S	/^strExceptionNotCaughtLocally:$/;"	l
strExceptionNotCaughtLocally	mterp/out/InterpAsm-armv5te.S	/^strExceptionNotCaughtLocally:$/;"	l
strExceptionNotCaughtLocally	mterp/out/InterpAsm-armv7-a-neon.S	/^strExceptionNotCaughtLocally:$/;"	l
strExceptionNotCaughtLocally	mterp/out/InterpAsm-armv7-a.S	/^strExceptionNotCaughtLocally:$/;"	l
strLogTag	mterp/armv5te/footer.S	/^strLogTag:$/;"	l
strLogTag	mterp/out/InterpAsm-armv5te-vfp.S	/^strLogTag:$/;"	l
strLogTag	mterp/out/InterpAsm-armv5te.S	/^strLogTag:$/;"	l
strLogTag	mterp/out/InterpAsm-armv7-a-neon.S	/^strLogTag:$/;"	l
strLogTag	mterp/out/InterpAsm-armv7-a.S	/^strLogTag:$/;"	l
strNewline	mterp/armv5te/footer.S	/^strNewline:$/;"	l
strNewline	mterp/out/InterpAsm-armv5te-vfp.S	/^strNewline:$/;"	l
strNewline	mterp/out/InterpAsm-armv5te.S	/^strNewline:$/;"	l
strNewline	mterp/out/InterpAsm-armv7-a-neon.S	/^strNewline:$/;"	l
strNewline	mterp/out/InterpAsm-armv7-a.S	/^strNewline:$/;"	l
strPrintHex	mterp/armv5te/footer.S	/^strPrintHex:$/;"	l
strPrintHex	mterp/out/InterpAsm-armv5te-vfp.S	/^strPrintHex:$/;"	l
strPrintHex	mterp/out/InterpAsm-armv5te.S	/^strPrintHex:$/;"	l
strPrintHex	mterp/out/InterpAsm-armv7-a-neon.S	/^strPrintHex:$/;"	l
strPrintHex	mterp/out/InterpAsm-armv7-a.S	/^strPrintHex:$/;"	l
strPrintLong	mterp/armv5te/footer.S	/^strPrintLong:$/;"	l
strPrintLong	mterp/out/InterpAsm-armv5te-vfp.S	/^strPrintLong:$/;"	l
strPrintLong	mterp/out/InterpAsm-armv5te.S	/^strPrintLong:$/;"	l
strPrintLong	mterp/out/InterpAsm-armv7-a-neon.S	/^strPrintLong:$/;"	l
strPrintLong	mterp/out/InterpAsm-armv7-a.S	/^strPrintLong:$/;"	l
strSqueak	arch/arm/CallEABI.S	/^strSqueak:$/;"	l
strSqueak	mterp/armv5te/footer.S	/^strSqueak:$/;"	l
strSqueak	mterp/out/InterpAsm-armv5te-vfp.S	/^strSqueak:$/;"	l
strSqueak	mterp/out/InterpAsm-armv5te.S	/^strSqueak:$/;"	l
strSqueak	mterp/out/InterpAsm-armv7-a-neon.S	/^strSqueak:$/;"	l
strSqueak	mterp/out/InterpAsm-armv7-a.S	/^strSqueak:$/;"	l
strcmpCount	oo/AccessCheck.cpp	/^static int strcmpCount(const char* str1, const char* str2)$/;"	f	file:
strlcpy	Misc.cpp	/^size_t strlcpy(char *dst, const char *src, size_t size) {$/;"	f
style	mterp/gen-mterp.py	/^style = None                # interpreter style$/;"	v
subMode	Thread.h	/^        uint16_t   subMode;$/;"	m	struct:InterpBreak::__anon12
successorBlockList	compiler/CompilerIR.h	/^    } successorBlockList;$/;"	m	struct:BasicBlock	typeref:struct:BasicBlock::__anon45
sumHeapBitmap	alloc/Copying.cpp	/^static size_t sumHeapBitmap(const HeapBitmap *bitmap)$/;"	f	file:
sumThreadSuspendCount	Globals.h	/^    int  sumThreadSuspendCount;$/;"	m	struct:DvmGlobals
super	oo/Object.h	/^    ClassObject*    super;$/;"	m	struct:ClassObject
suspend	jdwp/Jdwp.h	/^    bool        suspend;$/;"	m	struct:JdwpStartupParams
suspendByPolicy	jdwp/JdwpEvent.cpp	/^static void suspendByPolicy(JdwpState* state, JdwpSuspendPolicy suspendPolicy)$/;"	f	file:
suspendCount	Thread.h	/^    int suspendCount;$/;"	m	struct:Thread
suspendPolicy	jdwp/JdwpEvent.h	/^    JdwpSuspendPolicy suspendPolicy;  \/* suspend all, none, or self? *\/$/;"	m	struct:JdwpEvent
swapField	oo/Class.cpp	/^static inline void swapField(InstField* pOne, InstField* pTwo)$/;"	f	file:
sweepBitmapCallback	alloc/MarkSweep.cpp	/^static void sweepBitmapCallback(size_t numPtrs, void **ptrs, void *arg)$/;"	f	file:
sweepWeakJniGlobals	alloc/MarkSweep.cpp	/^static void sweepWeakJniGlobals()$/;"	f	file:
switchOverflowPad	compiler/CompilerIR.h	/^    const u2 *switchOverflowPad;$/;"	m	struct:CompilationUnit
systemServerPid	Globals.h	/^    pid_t systemServerPid;$/;"	m	struct:DvmGlobals
systemTid	Thread.h	/^    pid_t       systemTid;$/;"	m	struct:Thread
table	ReferenceTable.h	/^    Object**        table;              \/* bottom of the list *\/$/;"	m	struct:ReferenceTable
tableLock	Globals.h	/^    pthread_mutex_t tableLock;$/;"	m	struct:DvmJitGlobals
tableSize	Hash.h	/^    int         tableSize;          \/* must be power of 2 *\/$/;"	m	struct:HashTable
table_	IndirectRefTable.h	/^    IndirectRefSlot* table_;$/;"	m	class:iref_iterator
table_	IndirectRefTable.h	/^    IndirectRefSlot* table_;$/;"	m	struct:IndirectRefTable
tag	Misc.h	/^            const char* tag;$/;"	m	struct:DebugOutputTarget::__anon16::__anon17
tag	hprof/Hprof.h	/^    u1 tag;$/;"	m	struct:hprof_record_t
tagFromClass	Debugger.cpp	/^static u1 tagFromClass(ClassObject* clazz)$/;"	f	file:
tagFromObject	Debugger.cpp	/^static u1 tagFromObject(const Object* obj)$/;"	f	file:
taken	compiler/CompilerIR.h	/^    struct BasicBlock *taken;$/;"	m	struct:BasicBlock	typeref:struct:BasicBlock::BasicBlock
target	compiler/CompilerIR.h	/^    struct LIR *target;$/;"	m	struct:LIR	typeref:struct:LIR::LIR
targetUtilization	alloc/HeapSource.cpp	/^    size_t targetUtilization;$/;"	m	struct:HeapSource	file:
target_arch	compiler/template/gen-template.py	/^target_arch = sys.argv[1]$/;"	v
target_arch	mterp/gen-mterp.py	/^target_arch = sys.argv[1]$/;"	v
target_smp_flag	Android.mk	/^    target_smp_flag := -DANDROID_SMP=0$/;"	m
target_smp_flag	Android.mk	/^    target_smp_flag := -DANDROID_SMP=1$/;"	m
tempBlockV	compiler/CompilerIR.h	/^    BitVector *tempBlockV;$/;"	m	struct:CompilationUnit
tempDalvikRegisterV	compiler/CompilerIR.h	/^    BitVector *tempDalvikRegisterV;$/;"	m	struct:CompilationUnit
tempSSARegisterV	compiler/CompilerIR.h	/^    BitVector *tempSSARegisterV;        \/\/ numSSARegs$/;"	m	struct:CompilationUnit
templateEntryOffsets	compiler/codegen/arm/CodegenCommon.cpp	/^static intptr_t templateEntryOffsets[TEMPLATE_LAST_MARK];$/;"	v	file:
templateEntryOffsets	compiler/codegen/x86/CodegenDriver.cpp	/^static intptr_t templateEntryOffsets[TEMPLATE_LAST_MARK];$/;"	v	file:
templateSize	Globals.h	/^    unsigned int templateSize;$/;"	m	struct:DvmJitGlobals
test	ShadowAPI.cpp	/^int test(){$/;"	f
testAtomicSpeed	test/AtomicTest.cpp	/^static void testAtomicSpeed()$/;"	f	file:
testAtomicSpeedSub	test/AtomicTest.cpp	/^static int64_t testAtomicSpeedSub(int repeatCount)$/;"	f	file:
test_bits	alloc/TEST/HeapBitmapTest/main.c	/^test_bits()$/;"	f
test_clear	alloc/TEST/HeapBitmapTest/main.c	/^test_clear()$/;"	f
test_init	alloc/TEST/HeapBitmapTest/main.c	/^test_init()$/;"	f
test_modify	alloc/TEST/HeapBitmapTest/main.c	/^test_modify()$/;"	f
test_xor	alloc/TEST/HeapBitmapTest/main.c	/^test_xor()$/;"	f
thisPtr	jdwp/JdwpEvent.cpp	/^    ObjectId            thisPtr;        \/* InstanceOnly *\/$/;"	m	struct:ModBasket	file:
thread	Debugger.h	/^    Object* thread;$/;"	m	struct:DebugInvokeReq
thread	Debugger.h	/^    Thread* thread;         \/* don't deref; for comparison only *\/$/;"	m	struct:StepControl
threadEndHook	shadowlib/ReAgent.cpp	/^void threadEndHook(Thread* self){$/;"	f
threadExitCheck	Thread.cpp	/^static void threadExitCheck(void* arg)$/;"	f	file:
threadExitCheckCount	Thread.h	/^    int         threadExitCheckCount;$/;"	m	struct:Thread
threadExitCond	Profile.h	/^    pthread_cond_t  threadExitCond;$/;"	m	struct:MethodTraceState
threadExitUncaughtException	Thread.cpp	/^static void threadExitUncaughtException(Thread* self, Object* group)$/;"	f	file:
threadId	AllocTracker.cpp	/^    u2              threadId;   \/* simple thread ID; could be recycled *\/$/;"	m	struct:AllocRecord	file:
threadId	Thread.h	/^    u4          threadId;$/;"	m	struct:Thread
threadId	jdwp/JdwpEvent.cpp	/^    ObjectId            threadId;       \/* ThreadOnly *\/$/;"	m	struct:ModBasket	file:
threadId	jdwp/JdwpEvent.h	/^        ObjectId    threadId;$/;"	m	struct:JdwpEventMod::__anon26
threadId	jdwp/JdwpEvent.h	/^        ObjectId    threadId;$/;"	m	struct:JdwpEventMod::__anon33
threadIdMap	Globals.h	/^    BitVector*  threadIdMap;$/;"	m	struct:DvmGlobals
threadList	Globals.h	/^    Thread*     threadList;$/;"	m	struct:DvmGlobals
threadListLock	Globals.h	/^    pthread_mutex_t threadListLock;$/;"	m	struct:DvmGlobals
threadObj	Thread.h	/^    Object*     threadObj;$/;"	m	struct:Thread
threadObjToThread	Debugger.cpp	/^static Thread* threadObjToThread(Object* threadObj)$/;"	f	file:
threadOnly	jdwp/JdwpEvent.h	/^    } threadOnly;$/;"	m	union:JdwpEventMod	typeref:struct:JdwpEventMod::__anon26
threadSleepMon	Globals.h	/^    Monitor*    threadSleepMon;$/;"	m	struct:DvmGlobals
threadStartCond	Globals.h	/^    pthread_cond_t threadStartCond;$/;"	m	struct:DvmGlobals
threadStartCond	jdwp/JdwpPriv.h	/^    pthread_cond_t  threadStartCond;$/;"	m	struct:JdwpState
threadStartLock	jdwp/JdwpPriv.h	/^    pthread_mutex_t threadStartLock;$/;"	m	struct:JdwpState
threadSuspendCountCond	Globals.h	/^    pthread_cond_t  threadSuspendCountCond;$/;"	m	struct:DvmGlobals
threadSuspendCountLock	Globals.h	/^    pthread_mutex_t threadSuspendCountLock;$/;"	m	struct:DvmGlobals
thread_id_type	shadowlib/ShadowLib.h	/^typedef int thread_id_type;$/;"	t
threadsStarted	test/AtomicTest.cpp	/^static volatile int threadsStarted = 0;$/;"	v	file:
threshFilter	Thread.h	/^    intptr_t    threshFilter[JIT_TRACE_THRESH_FILTER_SIZE];$/;"	m	struct:Thread
threshold	Globals.h	/^    unsigned short threshold;$/;"	m	struct:DvmJitGlobals
throwArgumentTypeMismatch	interp/Stack.cpp	/^static void throwArgumentTypeMismatch(int argIndex, ClassObject* expected, DataObject* arg) {$/;"	f	file:
throwArrayRegionOutOfBounds	Jni.cpp	/^static void throwArrayRegionOutOfBounds(ArrayObject* arrayObj, jsize start,$/;"	f	file:
throwEarlierClassFailure	oo/Class.cpp	/^static void throwEarlierClassFailure(ClassObject* clazz)$/;"	f	file:
throwOOME	alloc/Heap.cpp	/^static void throwOOME()$/;"	f	file:
throwTypeError	Exception.cpp	/^static void throwTypeError(ClassObject* exceptionClass, const char* fmt,$/;"	f	file:
throwingOOME	Thread.h	/^    bool        throwingOOME;$/;"	m	struct:Thread
time	hprof/Hprof.h	/^    u4 time;$/;"	m	struct:hprof_record_t
toIndirectRef	IndirectRefTable.h	/^    static inline IndirectRef toIndirectRef(u4 index, u4 serial, IndirectRefKind kind) {$/;"	f	struct:IndirectRefTable
toInterpreter	mterp/armv5te/footer.S	/^toInterpreter:$/;"	l
toInterpreter	mterp/out/InterpAsm-armv5te-vfp.S	/^toInterpreter:$/;"	l
toInterpreter	mterp/out/InterpAsm-armv5te.S	/^toInterpreter:$/;"	l
toInterpreter	mterp/out/InterpAsm-armv7-a-neon.S	/^toInterpreter:$/;"	l
toInterpreter	mterp/out/InterpAsm-armv7-a.S	/^toInterpreter:$/;"	l
toInterpreter	mterp/out/InterpAsm-x86.S	/^toInterpreter:$/;"	l
toInterpreter	mterp/x86/footer.S	/^toInterpreter:$/;"	l
toSpaceContains	alloc/Copying.cpp	/^static bool toSpaceContains(const void *addr)$/;"	f	file:
toggleBit	analysis/RegisterMap.cpp	/^static inline void toggleBit(u1* ptr, int idx)$/;"	f	file:
tokens	compiler/template/gen-template.py	/^        tokens = line.split(' ')    # tokenize$/;"	v
tokens	mterp/gen-mterp.py	/^        tokens = line.split(' ')    # tokenize$/;"	v
top	alloc/MarkSweep.h	/^    const Object **top;$/;"	m	struct:GcMarkStack
topIndex	IndirectRefTable.h	/^        u4      topIndex:16;            \/* index of first unused entry *\/$/;"	m	struct:IRTSegmentState::__anon19
totalAllocationUnits	alloc/DdmHeap.cpp	/^    size_t totalAllocationUnits;$/;"	m	struct:HeapChunkContext	file:
totalBlocks	alloc/Copying.cpp	/^    size_t totalBlocks;$/;"	m	struct:HeapSource	file:
totalExpandedMapSize	analysis/RegisterMap.cpp	/^    int totalExpandedMapSize;$/;"	m	struct:MapStats	file:
totalGcPointCount	analysis/RegisterMap.cpp	/^    int totalGcPointCount;$/;"	m	struct:MapStats	file:
totalSize	compiler/CompilerIR.h	/^    int totalSize;                      \/\/ header + code size$/;"	m	struct:CompilationUnit
totalTraceLen	Thread.h	/^    int         totalTraceLen;  \/\/ Number of Dalvik insts in trace$/;"	m	struct:Thread
trace	Thread.h	/^    JitTraceRun trace[MAX_JIT_RUN_LEN];$/;"	m	struct:Thread
trace	compiler/Compiler.h	/^    JitTraceRun trace[0];       \/\/ Variable-length trace descriptors$/;"	m	struct:__anon37
trace	interp/Jit.h	/^    InstructionTrace trace[JIT_MAX_TRACE_LEN]; \/* opcode trace for debugging *\/$/;"	m	struct:ShadowSpace
traceDesc	compiler/CompilerIR.h	/^    const JitTraceDescription *traceDesc;$/;"	m	struct:CompilationUnit
traceEnabled	Profile.h	/^    int     traceEnabled;$/;"	m	struct:MethodTraceState
traceFile	Profile.h	/^    FILE*   traceFile;$/;"	m	struct:MethodTraceState
traceLength	interp/Jit.h	/^    int traceLength;            \/* counter for current trace length *\/$/;"	m	struct:ShadowSpace
traceMethod	Thread.h	/^    const Method*  traceMethod; \/\/ Starting method of current trace$/;"	m	struct:Thread
traceVersion	Profile.h	/^    int     traceVersion;$/;"	m	struct:MethodTraceState
trackMonitorEnter	Jni.cpp	/^static void trackMonitorEnter(Thread* self, Object* obj) {$/;"	f	file:
trackMonitorExit	Jni.cpp	/^static void trackMonitorExit(Thread* self, Object* obj) {$/;"	f	file:
translationChains	Globals.h	/^    int                translationChains;$/;"	m	struct:DvmJitGlobals
transport	jdwp/Jdwp.h	/^    JdwpTransportType transport;$/;"	m	struct:JdwpStartupParams
transport	jdwp/JdwpPriv.h	/^    const JdwpTransport*    transport;$/;"	m	struct:JdwpState
transportObject	alloc/Copying.cpp	/^static Object *transportObject(const Object *fromObj)$/;"	f	file:
trimHeaps	alloc/HeapSource.cpp	/^static void trimHeaps()$/;"	f	file:
trivial	AtomicCache.h	/^    int         trivial;                \/* cache access not required *\/$/;"	m	struct:AtomicCache
tryBlockAddr	compiler/CompilerIR.h	/^    BitVector *tryBlockAddr;$/;"	m	struct:CompilationUnit
tryInlineSingletonCallsite	compiler/InlineTransformation.cpp	/^static bool tryInlineSingletonCallsite(CompilationUnit *cUnit,$/;"	f	file:
tryInlineVirtualCallsite	compiler/InlineTransformation.cpp	/^static bool tryInlineVirtualCallsite(CompilationUnit *cUnit,$/;"	f	file:
tryLockMonitor	Sync.cpp	/^static bool tryLockMonitor(Thread* self, Monitor* mon)$/;"	f	file:
tryMalloc	alloc/Heap.cpp	/^static void *tryMalloc(size_t size)$/;"	f	file:
tweakLoader	analysis/Optimize.cpp	/^static void tweakLoader(ClassObject* referrer, ClassObject* resClass)$/;"	f	file:
tweakSlot	Debugger.cpp	/^static int tweakSlot(int slot, const char* name)$/;"	f	file:
type	alloc/DdmHeap.cpp	/^    int type;$/;"	m	struct:HeapChunkContext	file:
type	reflect/Reflect.h	/^    u1      type;$/;"	m	struct:AnnotationValue
typeBoolean	Globals.h	/^    ClassObject* typeBoolean;$/;"	m	struct:DvmGlobals
typeByte	Globals.h	/^    ClassObject* typeByte;$/;"	m	struct:DvmGlobals
typeChar	Globals.h	/^    ClassObject* typeChar;$/;"	m	struct:DvmGlobals
typeDouble	Globals.h	/^    ClassObject* typeDouble;$/;"	m	struct:DvmGlobals
typeFloat	Globals.h	/^    ClassObject* typeFloat;$/;"	m	struct:DvmGlobals
typeInt	Globals.h	/^    ClassObject* typeInt;$/;"	m	struct:DvmGlobals
typeLong	Globals.h	/^    ClassObject* typeLong;$/;"	m	struct:DvmGlobals
typeShort	Globals.h	/^    ClassObject* typeShort;$/;"	m	struct:DvmGlobals
typeTag	jdwp/Jdwp.h	/^    u1          typeTag;        \/* class or interface? *\/$/;"	m	struct:JdwpLocation
typeVoid	Globals.h	/^    ClassObject* typeVoid;$/;"	m	struct:DvmGlobals
u	compiler/CompilerIR.h	/^    } u;$/;"	m	struct:ChainCellCounts	typeref:union:ChainCellCounts::__anon42
u	interp/Jit.h	/^    JitEntryInfoUnion   u;$/;"	m	struct:JitEntry
u1	Common.h	/^typedef uint8_t             u1;$/;"	t
u2	Common.h	/^typedef uint16_t            u2;$/;"	t
u4	Common.h	/^typedef uint32_t            u4;$/;"	t
u8	Common.h	/^typedef uint64_t            u8;$/;"	t
uncaught	jdwp/JdwpEvent.h	/^        u1          uncaught;$/;"	m	struct:JdwpEventMod::__anon31
unchainSingle	compiler/codegen/arm/Assemble.cpp	/^static u4* unchainSingle(JitEntry *trace)$/;"	f	file:
uncompressMapDifferential	analysis/RegisterMap.cpp	/^static RegisterMap* uncompressMapDifferential(const RegisterMap* pMap)$/;"	f	file:
uninitMap	analysis/CodeVerify.h	/^    UninitInstanceMap* uninitMap;$/;"	m	struct:VerifierData
uninitSearches	analysis/DexVerify.h	/^    size_t uninitSearches;     \/* times we've had to search the uninit table *\/$/;"	m	struct:VerifierStats
unlinkThread	Thread.cpp	/^static void unlinkThread(Thread* thread)$/;"	f	file:
unlockEventMutex	jdwp/JdwpEvent.cpp	/^static void unlockEventMutex(JdwpState* state)$/;"	f	file:
unlockMonitor	Sync.cpp	/^static bool unlockMonitor(Thread* self, Monitor* mon)$/;"	f	file:
unlockThreadSuspend	Thread.cpp	/^static inline void unlockThreadSuspend()$/;"	f	file:
unlockThreadSuspendCount	Thread.cpp	/^static inline void unlockThreadSuspendCount()$/;"	f	file:
unpinPrimitiveArray	Jni.cpp	/^static void unpinPrimitiveArray(ArrayObject* arrayObj) {$/;"	f	file:
unregisterEvent	jdwp/JdwpEvent.cpp	/^static void unregisterEvent(JdwpState* state, JdwpEvent* pEvent)$/;"	f	file:
unregisterJNINativeMethods	Native.cpp	/^static void unregisterJNINativeMethods(Method* methods, size_t count)$/;"	f	file:
unsetSignalHandler	native/dalvik_system_Zygote.cpp	/^static void unsetSignalHandler()$/;"	f	file:
untweakLoader	analysis/Optimize.cpp	/^static void untweakLoader(ClassObject* referrer, ClassObject* resClass)$/;"	f	file:
untweakSlot	Debugger.cpp	/^static int untweakSlot(int slot, const void* framePtr)$/;"	f	file:
unused	Thread.h	/^        int8_t     unused;   \/* for future expansion *\/$/;"	m	struct:InterpBreak::__anon12
unused	Thread.h	/^        void* unused;$/;"	m	struct:InterpBreak::__anon12
unused	compiler/codegen/arm/ArmLIR.h	/^        unsigned int unused:23;$/;"	m	struct:ArmLIR::__anon40
unused	interp/InterpState.h	/^    int             unused;        \/\/ Keep struct size constant$/;"	m	struct:InterpSaveState
unused	interp/InterpState.h	/^    u4 unused:31;$/;"	m	struct:JitTraceRun
unused	interp/InterpState.h	/^    void (*unused)(void);  \/\/ Keep structure size constant$/;"	m	struct:JitToInterpEntries
unused	interp/Jit.h	/^    unsigned int           unused:5;$/;"	m	struct:JitEntryInfo
unused0	Thread.h	/^    void*       unused0;            \/\/ Consume space to keep offsets$/;"	m	struct:Thread
unused1	Thread.h	/^    void*       unused1;            \/\/   the same between builds with$/;"	m	struct:Thread
upcastBooleanOp	analysis/CodeVerify.cpp	/^static bool upcastBooleanOp(RegisterLine* registerLine, u4 reg1, u4 reg2)$/;"	f	file:
updateActiveProfilers	Profile.cpp	/^static void updateActiveProfilers(ExecutionSubModes newMode, bool enable)$/;"	f	file:
updateAllInterpBreak	interp/Interp.cpp	/^void updateAllInterpBreak(ExecutionSubModes subMode, bool enable)$/;"	f
updateChecksum	analysis/DexPrepare.cpp	/^static void updateChecksum(u1* addr, int len, DexHeader* pHeader)$/;"	f	file:
updateDebugger	interp/Interp.cpp	/^static void updateDebugger(const Method* method, const u2* pc, const u4* fp,$/;"	f	file:
updateExceptionClassList	reflect/Proxy.cpp	/^static void updateExceptionClassList(const Method* method, PointerSet* throws)$/;"	f	file:
updateGE16	analysis/RegisterMap.cpp	/^    int updateGE16;$/;"	m	struct:MapStats	file:
updateInterpBreak	interp/Interp.cpp	/^void updateInterpBreak(Thread* thread, ExecutionSubModes subMode, bool enable)$/;"	f
updateLT16	analysis/RegisterMap.cpp	/^    int updateLT16;$/;"	m	struct:MapStats	file:
updateOpcode	analysis/Optimize.cpp	/^static inline void updateOpcode(const Method* meth, u2* ptr, Opcode opcode)$/;"	f	file:
updatePages	LinearAlloc.cpp	/^static void updatePages(Object* classLoader, void* mem, int direction)$/;"	f	file:
updatePosn	analysis/RegisterMap.cpp	/^    int updatePosn[kNumUpdatePosns];$/;"	m	struct:MapStats	file:
updateRangeCheckInfo	compiler/Loop.cpp	/^static void updateRangeCheckInfo(CompilationUnit *cUnit, int arrayReg,$/;"	f	file:
updateRegisters	analysis/CodeVerify.cpp	/^static bool updateRegisters(const Method* meth, InsnFlags* insnFlags,$/;"	f	file:
usage	Init.cpp	/^static void usage(const char* progName)$/;"	f	file:
useCheckJni	Globals.h	/^    bool useCheckJni;$/;"	m	struct:DvmJniGlobals
useMask	compiler/codegen/arm/ArmLIR.h	/^    u8 useMask;                 \/\/ Resource mask for use$/;"	m	struct:ArmLIR
useMask	compiler/codegen/x86/X86LIR.h	/^    u8 useMask;         \/\/ Resource mask for use$/;"	m	struct:X86LIR
useThreadCpuClock	Profile.cpp	/^static inline bool useThreadCpuClock() {$/;"	f	file:
useV	compiler/Dataflow.h	/^    BitVector *useV;$/;"	m	struct:BasicBlockDataFlow
useWallClock	Profile.cpp	/^static inline bool useWallClock() {$/;"	f	file:
userDexFiles	Globals.h	/^    HashTable*  userDexFiles;$/;"	m	struct:DvmGlobals
uses	compiler/Dataflow.h	/^    int *uses;$/;"	m	struct:SSARepresentation
usesLinkRegister	compiler/CompilerIR.h	/^    bool usesLinkRegister;              \/\/ For self-verification only$/;"	m	struct:CompilationUnit
utf16_utf8ByteLen	UtfString.cpp	/^static int utf16_utf8ByteLen(const u2* utf16Str, int len)$/;"	f	file:
utfLength	UtfString.cpp	/^int StringObject::utfLength() const$/;"	f	class:StringObject
utime	Misc.h	/^    unsigned long utime;    \/* number of jiffies scheduled in user mode *\/$/;"	m	struct:ProcStatData
vNone	compiler/codegen/arm/ArmLIR.h	85;"	d
validateCookie	native/dalvik_system_DexFile.cpp	/^static bool validateCookie(int cookie)$/;"	f	file:
validateFieldAccess	native/java_lang_reflect_Field.cpp	/^static Field* validateFieldAccess(Object* obj, ClassObject* declaringClass,$/;"	f	file:
validateSuperDescriptors	oo/Class.cpp	/^static bool validateSuperDescriptors(const ClassObject* clazz)$/;"	f	file:
value	AtomicCache.h	/^    u4          value;$/;"	m	struct:AtomicCacheEntry
value	oo/Object.h	/^    JValue          value;          \/* initially set from DEX for primitives *\/$/;"	m	struct:StaticField
value	reflect/Reflect.h	/^    JValue  value;$/;"	m	struct:AnnotationValue
variableTableCb	Debugger.cpp	/^static void variableTableCb (void *cnxt, u2 reg, u4 startAddress,$/;"	f	file:
venv	shadowlib/ReAgent.cpp	/^	void* venv;$/;"	m	union:__anon36	file:
verbose	mterp/gen-mterp.py	/^verbose = False$/;"	v
verboseClass	Globals.h	/^    bool        verboseClass;$/;"	m	struct:DvmGlobals
verboseGc	Globals.h	/^    bool        verboseGc;$/;"	m	struct:DvmGlobals
verboseJni	Globals.h	/^    bool        verboseJni;$/;"	m	struct:DvmGlobals
verboseShutdown	Globals.h	/^    bool        verboseShutdown;$/;"	m	struct:DvmGlobals
verifierStats	Globals.h	/^    VerifierStats verifierStats;$/;"	m	struct:DvmGlobals
verifyAndOptimizeClass	analysis/DexPrepare.cpp	/^static void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,$/;"	f	file:
verifyAndOptimizeClasses	analysis/DexPrepare.cpp	/^static void verifyAndOptimizeClasses(DexFile* pDexFile, bool doVerify,$/;"	f	file:
verifyBitmapCallback	alloc/Verify.cpp	/^static void verifyBitmapCallback(Object *obj, void *arg)$/;"	f	file:
verifyBlock	alloc/Copying.cpp	/^static void verifyBlock(HeapSource *heapSource, size_t block)$/;"	f	file:
verifyCardTable	Globals.h	/^    bool        verifyCardTable;$/;"	m	struct:DvmGlobals
verifyCardTableCallback	alloc/CardTable.cpp	/^static void verifyCardTableCallback(Object *obj, void *arg)$/;"	f	file:
verifyDexChecksum	Globals.h	/^    bool        verifyDexChecksum;$/;"	m	struct:DvmGlobals
verifyErrorClass	oo/Object.h	/^    ClassObject*    verifyErrorClass;$/;"	m	struct:ClassObject
verifyFilledNewArrayRegs	analysis/CodeVerify.cpp	/^static void verifyFilledNewArrayRegs(const Method* meth,$/;"	f	file:
verifyInstruction	analysis/CodeVerify.cpp	/^static bool verifyInstruction(const Method* meth, InsnFlags* insnFlags,$/;"	f	file:
verifyInstructions	analysis/DexVerify.cpp	/^static bool verifyInstructions(VerifierData* vdata)$/;"	f	file:
verifyInvocationArgs	analysis/CodeVerify.cpp	/^static Method* verifyInvocationArgs(const Method* meth,$/;"	f	file:
verifyMagicAndGetAdler32	RawDexFile.cpp	/^static int verifyMagicAndGetAdler32(int fd, u4 *adler32)$/;"	f	file:
verifyMap	analysis/RegisterMap.cpp	/^static bool verifyMap(VerifierData* vdata, const RegisterMap* pMap)$/;"	f	file:
verifyMethod	analysis/DexVerify.cpp	/^static bool verifyMethod(Method* meth)$/;"	f	file:
verifyNewSpace	alloc/Copying.cpp	/^static void verifyNewSpace()$/;"	f	file:
verifyPredInfo	compiler/Frontend.cpp	/^static bool verifyPredInfo(CompilationUnit *cUnit, BasicBlock *bb)$/;"	f	file:
verifyPrep	analysis/CodeVerify.cpp	/^static void verifyPrep()$/;"	f	file:
verifyReference	alloc/Verify.cpp	/^static void verifyReference(void *addr, void *arg)$/;"	f	file:
verifyRegisterType	analysis/CodeVerify.cpp	/^static void verifyRegisterType(RegisterLine* registerLine, u4 vsrc,$/;"	f	file:
verifyRootReference	alloc/Verify.cpp	/^static void verifyRootReference(void *addr, u4 threadId,$/;"	f	file:
verifyRootsAndHeap	alloc/Heap.cpp	/^static void verifyRootsAndHeap()$/;"	f	file:
verifySorted	PointerSet.cpp	/^static bool verifySorted(PointerSet* pSet)$/;"	f	file:
verifyStringOffset	InitRefs.cpp	/^static bool verifyStringOffset(const char* name, int actual, int expected) {$/;"	f	file:
verifyStringOffsets	InitRefs.cpp	/^static bool verifyStringOffsets() {$/;"	f	file:
version	AtomicCache.h	/^    volatile u4 version;    \/* version and lock flag *\/$/;"	m	struct:AtomicCacheEntry
vfprintfHook	Globals.h	/^    int         (*vfprintfHook)(FILE*, const char*, va_list);$/;"	m	struct:DvmGlobals
virtualAlloc	alloc/Copying.cpp	/^static void *virtualAlloc(size_t length)$/;"	f	file:
virtualFree	alloc/Copying.cpp	/^static void virtualFree(void *addr, size_t length)$/;"	f	file:
virtualMethodCount	oo/Object.h	/^    int             virtualMethodCount;$/;"	m	struct:ClassObject
virtualMethods	oo/Object.h	/^    Method*         virtualMethods;$/;"	m	struct:ClassObject
visitArrayObject	alloc/VisitInlines.h	/^static void visitArrayObject(Visitor *visitor, Object *obj, void *arg)$/;"	f
visitClassObject	alloc/VisitInlines.h	/^static void visitClassObject(Visitor *visitor, Object *obj, void *arg)$/;"	f
visitDataObject	alloc/VisitInlines.h	/^static void visitDataObject(Visitor *visitor, Object *obj, void *arg)$/;"	f
visitFields	alloc/VisitInlines.h	/^static void visitFields(Visitor *visitor, Object *obj, void *arg)$/;"	f
visitHashTable	alloc/Visit.cpp	/^static void visitHashTable(RootVisitor *visitor, HashTable *table,$/;"	f	file:
visitIndirectRefTable	alloc/Visit.cpp	/^static void visitIndirectRefTable(RootVisitor *visitor, IndirectRefTable *table,$/;"	f	file:
visitInterfaces	alloc/VisitInlines.h	/^static void visitInterfaces(Visitor *visitor, ClassObject *clazz,$/;"	f
visitObject	alloc/VisitInlines.h	/^static void visitObject(Visitor *visitor, Object *obj, void *arg)$/;"	f
visitPrimitiveTypes	alloc/Visit.cpp	/^static void visitPrimitiveTypes(RootVisitor *visitor, void *arg)$/;"	f	file:
visitReferenceObject	alloc/VisitInlines.h	/^static void visitReferenceObject(Visitor *visitor, Object *obj, void *arg)$/;"	f
visitReferenceTable	alloc/Visit.cpp	/^static void visitReferenceTable(RootVisitor *visitor, ReferenceTable *table,$/;"	f	file:
visitStaticFields	alloc/VisitInlines.h	/^static void visitStaticFields(Visitor *visitor, ClassObject *clazz,$/;"	f
visitThread	alloc/Visit.cpp	/^static void visitThread(RootVisitor *visitor, Thread *thread, void *arg)$/;"	f	file:
visitThreadStack	alloc/Visit.cpp	/^static void visitThreadStack(RootVisitor *visitor, Thread *thread, void *arg)$/;"	f	file:
visitThreads	alloc/Visit.cpp	/^static void visitThreads(RootVisitor *visitor, void *arg)$/;"	f	file:
visited	analysis/VfyBasicBlock.h	/^    bool            visited;        \/* block has been visited at least once *\/$/;"	m	struct:VfyBasicBlock
visited	compiler/CompilerIR.h	/^    bool visited;$/;"	m	struct:BasicBlock
vmEndHook	shadowlib/ReAgent.cpp	/^void vmEndHook(JavaVM* vm){$/;"	f
vmExitCond	Globals.h	/^    pthread_cond_t  vmExitCond;$/;"	m	struct:DvmGlobals
voffJavaLangClassLoader_loadClass	Globals.h	/^    int         voffJavaLangClassLoader_loadClass;$/;"	m	struct:DvmGlobals
voffJavaLangObject_equals	Globals.h	/^    int         voffJavaLangObject_equals;$/;"	m	struct:DvmGlobals
voffJavaLangObject_hashCode	Globals.h	/^    int         voffJavaLangObject_hashCode;$/;"	m	struct:DvmGlobals
voffJavaLangObject_toString	Globals.h	/^    int         voffJavaLangObject_toString;$/;"	m	struct:DvmGlobals
voffJavaLangThreadGroup_removeThread	Globals.h	/^    int         voffJavaLangThreadGroup_removeThread;$/;"	m	struct:DvmGlobals
voffJavaLangThread_run	Globals.h	/^    int         voffJavaLangThread_run;$/;"	m	struct:DvmGlobals
vtable	oo/Object.h	/^    Method**        vtable;$/;"	m	struct:ClassObject
vtableCount	oo/Object.h	/^    int             vtableCount;$/;"	m	struct:ClassObject
waitCond	Thread.h	/^    pthread_cond_t     waitCond;$/;"	m	struct:Thread
waitCond	test/AtomicTest.cpp	/^static pthread_cond_t waitCond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
waitForThreadSuspend	Thread.cpp	/^static void waitForThreadSuspend(Thread* self, Thread* thread)$/;"	f	file:
waitLock	test/AtomicTest.cpp	/^static pthread_mutex_t waitLock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
waitMonitor	Sync.cpp	/^static void waitMonitor(Thread* self, Monitor* mon, s8 msec, s4 nsec,$/;"	f	file:
waitMonitor	Thread.h	/^    Monitor*    waitMonitor;$/;"	m	struct:Thread
waitMutex	Thread.h	/^    pthread_mutex_t    waitMutex;$/;"	m	struct:Thread
waitNext	Thread.h	/^    struct Thread*     waitNext;$/;"	m	struct:Thread	typeref:struct:Thread::Thread
waitSet	Sync.cpp	/^    Thread*     waitSet;	\/* threads currently waiting on this monitor *\/$/;"	m	struct:Monitor	file:
waitSetAppend	Sync.cpp	/^static void waitSetAppend(Monitor *mon, Thread *thread)$/;"	f	file:
waitSetCheck	Sync.cpp	/^static int waitSetCheck(Monitor *mon)$/;"	f	file:
waitSetRemove	Sync.cpp	/^static void waitSetRemove(Monitor *mon, Thread *thread)$/;"	f	file:
wakeFds	jdwp/JdwpAdb.cpp	/^    int                 wakeFds[2];$/;"	m	struct:JdwpNetState	file:
wakePipe	jdwp/JdwpSocket.cpp	/^    int     wakePipe[2];        \/* break out of select *\/$/;"	m	struct:JdwpNetState	file:
walkHeap	alloc/DdmHeap.cpp	/^static void walkHeap(bool merge, bool native)$/;"	f	file:
warnOnly	Globals.h	/^    bool warnOnly;$/;"	m	struct:DvmJniGlobals
weakReferences	alloc/HeapInternal.h	/^    Object *weakReferences;$/;"	m	struct:GcHeap
which	Misc.h	/^    DebugTargetKind which;$/;"	m	struct:DebugOutputTarget
whiteRefs	alloc/CardTable.cpp	/^    size_t whiteRefs;$/;"	m	struct:WhiteReferenceCounter	file:
wide	compiler/CompilerIR.h	/^    unsigned wide:1;$/;"	m	struct:RegLocation
wideCasTest	test/AtomicTest.cpp	/^static int64_t wideCasTest = 0x6600000077000000LL;$/;"	v	file:
width	compiler/CompilerIR.h	/^    unsigned int width;$/;"	m	struct:MIR
withGeneric	Debugger.cpp	/^    bool withGeneric;$/;"	m	struct:DebugCallbackContext	file:
workAroundAppJniBugs	Globals.h	/^    bool workAroundAppJniBugs;$/;"	m	struct:DvmJniGlobals
workDequeue	compiler/Compiler.cpp	/^static CompilerWorkOrder workDequeue(void)$/;"	f	file:
workLine	analysis/CodeVerify.cpp	/^    RegisterLine workLine;$/;"	m	struct:RegisterTable	file:
workQueueLength	compiler/Compiler.cpp	/^static inline bool workQueueLength(void)$/;"	f	file:
writeBufferedPacket	jdwp/JdwpMain.cpp	/^ssize_t JdwpNetStateBase::writeBufferedPacket(const struct iovec* iov,$/;"	f	class:JdwpNetStateBase
writeChunk	analysis/DexPrepare.cpp	/^static bool writeChunk(int fd, u4 type, const void* data, size_t size)$/;"	f	file:
writeDependencies	analysis/DexPrepare.cpp	/^static int writeDependencies(int fd, u4 modWhen, u4 crc)$/;"	f	file:
writeMapForMethod	analysis/RegisterMap.cpp	/^static bool writeMapForMethod(const Method* meth, u1** pPtr)$/;"	f	file:
writeMapsAllClasses	analysis/RegisterMap.cpp	/^static size_t writeMapsAllClasses(DvmDex* pDvmDex, u1* basePtr, size_t length)$/;"	f	file:
writeMapsAllMethods	analysis/RegisterMap.cpp	/^static bool writeMapsAllMethods(DvmDex* pDvmDex, const ClassObject* clazz,$/;"	f	file:
writeOptData	analysis/DexPrepare.cpp	/^static bool writeOptData(int fd, const DexClassLookup* pClassLookup,$/;"	f	file:
writePacket	jdwp/JdwpMain.cpp	/^ssize_t JdwpNetStateBase::writePacket(ExpandBuf* pReply)$/;"	f	class:JdwpNetStateBase
writeRefCount	LinearAlloc.h	/^    short*  writeRefCount;      \/* for ENFORCE_READ_ONLY *\/$/;"	m	struct:LinearAllocHdr
xorCallback	alloc/TEST/HeapBitmapTest/main.c	/^xorCallback(size_t numPtrs, void **ptrs, const void *finger, void *arg)$/;"	f
xtra	interp/Stack.h	/^    } xtra;$/;"	m	struct:StackSaveArea	typeref:union:StackSaveArea::__anon22
z	Common.h	/^    u1      z;$/;"	m	union:JValue
zygote	Globals.h	/^    bool        zygote;$/;"	m	struct:DvmGlobals
~BaseQueue	shadowlib/ReQueue.h	/^		virtual ~BaseQueue(){$/;"	f	class:BaseQueue
~Buffer	shadowlib/Buffer.h	/^		~Buffer(){$/;"	f	class:Buffer
~LockBuffer	shadowlib/Lock.h	/^		~LockBuffer(){$/;"	f	class:LockBuffer
~Map	shadowlib/Map.h	/^		~Map(){$/;"	f	class:Map
~ReProtocol	shadowlib/ReProtocol.h	/^		~ReProtocol(){$/;"	f	class:ReProtocol
~ScopedCheckJniThreadState	CheckJni.cpp	/^    ~ScopedCheckJniThreadState() {$/;"	f	class:ScopedCheckJniThreadState
~ScopedJniThreadState	Jni.cpp	/^    ~ScopedJniThreadState() {$/;"	f	class:ScopedJniThreadState
~ScopedMutex	shadowlib/ShadowLib.h	/^		~ScopedMutex(){$/;"	f	class:ScopedMutex
~ScopedShutdown	Init.cpp	/^    ~ScopedShutdown() {$/;"	f	class:ScopedShutdown
~Socket	shadowlib/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
